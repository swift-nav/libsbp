#!/usr/bin/env python
# Copyright (C) 2015 Swift Navigation Inc.
# Contact: Mark Fine <mark@swiftnav.com>
#
# This source is subject to the license found in the file 'LICENSE' which must
# be be distributed together with this source. All other rights reserved.
#
# THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND,
# EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR PURPOSE.

"""
The :mod:`sbp.client.main` module contains functions related to
setting up and running SBP message handling.
"""

import sys
import time

from ..piksi                  import SBP_MSG_PRINT
from .drivers.file_driver     import FileDriver
from .drivers.pyserial_driver import PySerialDriver
from .drivers.pyftdi_driver   import PyFTDIDriver
from .loggers.byte_logger     import ByteLogger
from .loggers.json_logger     import JSONLogger
from .loggers.null_logger     import NullLogger
from .loggers.pickle_logger   import PickleLogger
from .handler                 import Handler

DEFAULT_PORT         = "/dev/ttyUSB0"
DEFAULT_BAUD         = 1000000
DEFAULT_LOG_FILENAME = time.strftime("sbp-%Y%m%d-%H%M%S.log")

def get_args():
  """
  Get and parse arguments.
  """
  import argparse
  parser = argparse.ArgumentParser(description="Swift Navigation SBP Client.")
  parser.add_argument("-p", "--port",
                      default=[DEFAULT_PORT], nargs=1,
                      help="specify the serial port to use.")
  parser.add_argument("-b", "--baud",
                      default=[DEFAULT_BAUD], nargs=1,
                      help="specify the baud rate to use.")
  parser.add_argument("-v", "--verbose",
                      action="store_true",
                      help="print extra debugging information.")
  parser.add_argument("-f", "--ftdi",
                      action="store_true",
                      help="use pylibftdi instead of pyserial.")
  parser.add_argument("-l", "--log",
                      action="store_true",
                      help="serialize SBP messages to autogenerated log file.")
  parser.add_argument("-j", "--json",
                      action="store_true",
                      help="JSON serialize SBP messages.")
  parser.add_argument("-t", "--timeout",
                      default=[None], nargs=1,
                      help="exit after TIMEOUT seconds have elapsed.")
  parser.add_argument("-r", "--reset",
                      action="store_true",
                      help="reset device after connection.")
  parser.add_argument("-i", "--input-filename",
                      default=[None], nargs=1,
                      help="use input file to read SBP messages from.")
  parser.add_argument("-o", "--log-filename",
                      default=[DEFAULT_LOG_FILENAME], nargs=1,
                      help="file to log output to.")
  parser.add_argument("-s", "--byte",
                      action="store_true",
                      help="Serialize SBP messages to bytes.")
  return parser.parse_args()

def get_driver(use_ftdi, filename, port, baud):
  """
  Get a driver based on configuration options

  Parameters
  ----------
  use_ftdi : bool
    For serial driver, use the pyftdi driver, otherwise use the pyserial driver.
  filename : string
    File to read SBP messages from.
  port : string
    Serial port to read.
  baud : int
    Serial port baud rate to set.
  """
  if filename:
    return FileDriver(filename)
  if use_ftdi:
    return PyFTDIDriver(baud)
  return PySerialDriver(port, baud)

def get_logger(use_log, use_json, use_byte, filename):
  """
  Get a logger based on configuration options.

  Parameters
  ----------
  use_log : bool
    Whether to log or not.
  use_json : bool
    Log out JSON records, otherwise log out bytes or pickled records.
  use_byte : bool
    Log out bytes, otherwise log out pickled records.
  filename : string
    File to log to.
  """
  if not use_log:
    return NullLogger()
  print "Logging at %s." % filename
  if use_json:
    return JSONLogger(filename)
  if use_byte:
    return ByteLogger(filename)
  return PickleLogger(filename)

def main():
  """
  Get configuration, get driver, get logger, and build handler and start it.
  """
  args = get_args()
  port = args.port[0]
  baud = args.baud[0]
  verbose = args.verbose
  use_ftdi = args.ftdi
  use_log = args.log
  use_json = args.json
  use_byte = args.byte
  timeout = args.timeout[0]
  reset = args.reset
  input_filename = args.input_filename[0]
  log_filename = args.log_filename[0]
  # Driver with context
  with get_driver(use_ftdi, input_filename, port, baud) as driver:
    # Logger with context
    with get_logger(use_log, use_json, use_byte, log_filename) as logger:
      # Handler with context
      with Handler(driver.read, driver.write, verbose) as handler:
        handler.add_callback(lambda msg: sys.stdout.write(msg.payload), SBP_MSG_PRINT)
        handler.add_callback(logger)
        handler.start()
        if reset:
          handler.send(SBP_RESET, "")
        try:
          if timeout is None:
            while True:
              time.sleep(0.1)
          else:
            time.sleep(float(timeout))
        except KeyboardInterrupt:
          pass

if __name__ == "__main__":
  main()
