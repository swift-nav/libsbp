/*
 * Copyright (C) 2021 Swift Navigation Inc.
 * Contact: https://support.swiftnav.com
 *
 * This source is subject to the license found in the file 'LICENSE' which must
 * be be distributed together with this source. All other rights reserved.
 *
 * THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND,
 * EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR PURPOSE.
 */

syntax = "proto3";

/** Flash
 *
 * Messages for reading/writing the device's onboard flash memory. Many of
 * these messages target specific flash memory peripherals used in Swift
 * Navigation devices: the STM32 flash and the M25Pxx FPGA configuration flash
 * from Piksi 2.3.1.  This module does not apply to Piksi Multi.
 */

package swiftnav.sbp.flash;


/** Program flash addresses
 *
 * The flash program message programs a set of addresses of either the STM or
 * M25 flash. The device replies with either a MSG_FLASH_DONE message
 * containing the return code FLASH_OK (0) on success, or FLASH_INVALID_LEN
 * (2) if the maximum write size is exceeded. Note that the sector-containing
 * addresses must be erased before addresses can be programmed.
 */
message MsgFlashProgram {
    uint32 target = 1;
    repeated uint32 addr_start = 2;
    uint32 addr_len = 3;
    repeated uint32 data = 4;
}

/** Flash response message (host <= device)
 *
 * This message defines success or failure codes for a variety of flash memory
 * requests from the host to the device. Flash read and write messages, such
 * as MSG_FLASH_READ_REQ, or MSG_FLASH_PROGRAM, may return this message on
 * failure.
 */
message MsgFlashDone {
    uint32 response = 1;
}

/** Read STM or M25 flash address request (host => device)
 *
 * The flash read message reads a set of addresses of either the STM or M25
 * onboard flash. The device replies with a MSG_FLASH_READ_RESP message
 * containing either the read data on success or a MSG_FLASH_DONE message
 * containing the return code FLASH_INVALID_LEN (2) if the maximum read size
 * is exceeded or FLASH_INVALID_ADDR (3) if the address is outside of the
 * allowed range.
 */
message MsgFlashReadReq {
    uint32 target = 1;
    repeated uint32 addr_start = 2;
    uint32 addr_len = 3;
}

/** Read STM or M25 flash address response (host <= device)
 *
 * The flash read message reads a set of addresses of either the STM or M25
 * onboard flash. The device replies with a MSG_FLASH_READ_RESP message
 * containing either the read data on success or a MSG_FLASH_DONE message
 * containing the return code FLASH_INVALID_LEN (2) if the maximum read size
 * is exceeded or FLASH_INVALID_ADDR (3) if the address is outside of the
 * allowed range.
 */
message MsgFlashReadResp {
    uint32 target = 1;
    repeated uint32 addr_start = 2;
    uint32 addr_len = 3;
}

/** Erase sector of device flash memory (host => device)
 *
 * The flash erase message from the host erases a sector of either the STM or
 * M25 onboard flash memory. The device will reply with a MSG_FLASH_DONE
 * message containing the return code - FLASH_OK (0) on success or
 * FLASH_INVALID_FLASH (1) if the flash specified is invalid.
 */
message MsgFlashErase {
    uint32 target = 1;
    uint32 sector_num = 2;
}

/** Lock sector of STM flash memory (host => device)
 *
 * The flash lock message locks a sector of the STM flash memory. The device
 * replies with a MSG_FLASH_DONE message.
 */
message MsgStmFlashLockSector {
    uint32 sector = 1;
}

/** Unlock sector of STM flash memory (host => device)
 *
 * The flash unlock message unlocks a sector of the STM flash memory. The
 * device replies with a MSG_FLASH_DONE message.
 */
message MsgStmFlashUnlockSector {
    uint32 sector = 1;
}

/** Read device's hard-coded unique ID request (host => device)

 *
 * This message reads the device's hard-coded unique ID. The host requests the
 * ID by sending a MSG_STM_UNIQUE_ID_REQ. The device responds with a
 * MSG_STM_UNIQUE_ID_RESP with the 12-byte unique ID in the payload.
 */
message MsgStmUniqueIdReq {
}

/** Read device's hard-coded unique ID response (host <= device)

 *
 * This message reads the device's hard-coded unique ID. The host requests the
 * ID by sending a MSG_STM_UNIQUE_ID_REQ. The device responds with a
 * MSG_STM_UNIQUE_ID_RESP with the 12-byte unique ID in the payload.
 */
message MsgStmUniqueIdResp {
    repeated uint32 stm_id = 1;
}

/** Write M25 flash status register (host => device)
 *
 * The flash status message writes to the 8-bit M25 flash status register. The
 * device replies with a MSG_FLASH_DONE message.
 */
message MsgM25FlashWriteStatus {
    repeated uint32 status = 1;
}