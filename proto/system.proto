/*
 * Copyright (C) 2021 Swift Navigation Inc.
 * Contact: https://support.swiftnav.com
 *
 * This source is subject to the license found in the file 'LICENSE' which must
 * be be distributed together with this source. All other rights reserved.
 *
 * THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND,
 * EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR PURPOSE.
 */

syntax = "proto3";

/** System
 *
 * Standardized system messages from Swift Navigation devices.
 */

package swiftnav.sbp.system;


/** System start-up message
 *
 * The system start-up message is sent once on system start-up. It notifies
 * the host or other attached devices that the system has started and is now
 * ready to respond to commands or configuration requests.
 */
message MsgStartup {
    uint32 cause = 1;
    uint32 startup_type = 2;
}

/** Status of received corrections
 *
 * This message provides information about the receipt of Differential
 * corrections.  It is expected to be sent with each receipt of a complete
 * corrections packet.
 */
message MsgDgnssStatus {
    uint32 flags = 1;
    uint32 latency = 2;
    uint32 num_signals = 3;
    string source = 4;
}

/** System heartbeat message
 *
 * The heartbeat message is sent periodically to inform the host or other
 * attached devices that the system is running. It is used to monitor system
 * malfunctions. It also contains status flags that indicate to the host the
 * status of the system and whether it is operating correctly. Currently, the
 * expected heartbeat interval is 1 sec.
 *
 * The system error flag is used to indicate that an error has occurred in the
 * system. To determine the source of the error, the remaining error flags
 * should be inspected.
 */
message MsgHeartbeat {
    uint32 flags = 1;
}

/** Subsystem Status report
 *
 * Report the general and specific state of a subsystem.  If the generic state
 * is reported as initializing, the specific state should be ignored.
 */
message SubSystemReport {
    uint32 component = 1;
    uint32 generic = 2;
    uint32 specific = 3;
}

/** Status report message
 *
 * The status report is sent periodically to inform the host or other attached
 * devices that the system is running. It is used to monitor system
 * malfunctions. It contains status reports that indicate to the host the
 * status of each subsystem and whether it is operating correctly.
 *
 * Interpretation of the subsystem specific status code is product dependent,
 * but if the generic status code is initializing, it should be ignored.
 * Refer to product documentation for details.
 */
message MsgStatusReport {
    uint32 reporting_system = 1;
    uint32 sbp_version = 2;
    uint32 sequence = 3;
    uint32 uptime = 4;
    repeated SubSystemReport status = 5;
}

/** Subsystem Status report
 *
 * Reports the uptime and the state of a subsystem via generic and specific
 * status codes.  If the generic state is reported as initializing, the
 * specific state should be ignored.
 */
message StatusJournalItem {
    uint32 uptime = 1;
    SubSystemReport report = 2;
}

/** Status report journal
 *
 * The status journal message contains past status reports (see
 * MSG_STATUS_REPORT) and functions as a error/event storage for telemetry
 * purposes.
 */
message MsgStatusJournal {
    uint32 reporting_system = 1;
    uint32 sbp_version = 2;
    uint32 total_status_reports = 3;
    uint32 sequence_descriptor = 4;
    repeated StatusJournalItem journal = 5;
}

/** Inertial Navigation System status message
 *
 * The INS status message describes the state of the operation and
 * initialization of the inertial navigation system.
 */
message MsgInsStatus {
    uint32 flags = 1;
}

/** Experimental telemetry message
 *
 * The CSAC telemetry message has an implementation defined telemetry string
 * from a device. It is not produced or available on general Swift Products.
 * It is intended to be a low rate message for status purposes.
 */
message MsgCsacTelemetry {
    uint32 id = 1;
    string telemetry = 2;
}

/** Experimental telemetry message labels
 *
 * The CSAC telemetry message provides labels for each member of the string
 * produced by MSG_CSAC_TELEMETRY. It should be provided by a device at a
 * lower rate than the MSG_CSAC_TELEMETRY.
 */
message MsgCsacTelemetryLabels {
    uint32 id = 1;
    string telemetry_labels = 2;
}

/** Inertial Navigation System update status message
 *
 * The INS update status message contains information about executed and
 * rejected INS updates. This message is expected to be extended in the future
 * as new types of measurements are being added.
 */
message MsgInsUpdates {
    uint32 tow = 1;
    uint32 gnsspos = 2;
    uint32 gnssvel = 3;
    uint32 wheelticks = 4;
    uint32 speed = 5;
    uint32 nhc = 6;
    uint32 zerovel = 7;
}

/** Offset of the local time with respect to GNSS time
 *
 * The GNSS time offset message contains the information that is needed to
 * translate messages tagged with a local timestamp (e.g. IMU or wheeltick
 * messages) to GNSS time for the sender producing this message.
 */
message MsgGnssTimeOffset {
    sint32 weeks = 1;
    sint32 milliseconds = 2;
    sint32 microseconds = 3;
    uint32 flags = 4;
}

/** Local time at detection of PPS pulse
 *
 * The PPS time message contains the value of the sender's local time in
 * microseconds at the moment a pulse is detected on the PPS input. This is to
 * be used for syncronisation of sensor data sampled with a local timestamp
 * (e.g. IMU or wheeltick messages) where GNSS time is unknown to the sender.
 *
 * The local time used to timestamp the PPS pulse must be generated by the
 * same clock which is used to timestamp the IMU/wheel sensor data and should
 * follow the same roll-over rules.  A separate MSG_PPS_TIME message should be
 * sent for each source of sensor data which uses PPS-relative timestamping.
 * The sender ID for each of these MSG_PPS_TIME messages should match the
 * sender ID of the respective sensor data.
 */
message MsgPpsTime {
    uint64 time = 1;
    uint32 flags = 2;
}

/** Sensor state and update status data
 *
 * This diagnostic message contains state and update status information for
 * all sensors that are being used by the fusion engine. This message will be
 * generated asynchronously to the solution messages and will be emitted
 * anytime a sensor update is being processed.
 */
message MsgSensorAidEvent {
    uint32 time = 1;
    uint32 sensor_type = 2;
    uint32 sensor_id = 3;
    uint32 sensor_state = 4;
    uint32 n_available_meas = 5;
    uint32 n_attempted_meas = 6;
    uint32 n_accepted_meas = 7;
    uint32 flags = 8;
}

/** Solution Group Metadata
 *
 * This leading message lists the time metadata of the Solution Group. It also
 * lists the atomic contents (i.e. types of messages included) of the Solution
 * Group.
 */
message MsgGroupMeta {
    uint32 group_id = 1;
    uint32 flags = 2;
    uint32 n_group_msgs = 3;
    repeated uint32 group_msgs = 4;
}