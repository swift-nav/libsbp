/*
 * Copyright (C) 2021 Swift Navigation Inc.
 * Contact: https://support.swiftnav.com
 *
 * This source is subject to the license found in the file 'LICENSE' which must
 * be be distributed together with this source. All other rights reserved.
 *
 * THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND,
 * EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR PURPOSE.
 */

syntax = "proto3";

/** Imu
 *
 * Inertial Measurement Unit (IMU) messages.
 */

package swiftnav.sbp.imu;


/** Raw IMU data
 *
 * Raw data from the Inertial Measurement Unit, containing accelerometer and
 * gyroscope readings. The sense of the measurements are to be aligned with
 * the indications on the device itself. Measurement units, which are specific
 * to the device hardware and settings, are communicated via the MSG_IMU_AUX
 * message. If using "time since startup" time tags, the receiving end will
 * expect a `MSG_GNSS_TIME_OFFSET` when a PVT fix becomes available to
 * synchronise IMU measurements with GNSS. The timestamp must wrap around to
 * zero when reaching one week (604800 seconds).
 *
 * The time-tagging mode should not change throughout a run.
 */
message MsgImuRaw {
    uint32 tow = 1;
    uint32 tow_f = 2;
    sint32 acc_x = 3;
    sint32 acc_y = 4;
    sint32 acc_z = 5;
    sint32 gyr_x = 6;
    sint32 gyr_y = 7;
    sint32 gyr_z = 8;
}

/** Auxiliary IMU data
 *
 * Auxiliary data specific to a particular IMU. The `imu_type` field will
 * always be consistent but the rest of the payload is device specific and
 * depends on the value of `imu_type`.
 */
message MsgImuAux {
    uint32 imu_type = 1;
    sint32 temp = 2;
    uint32 imu_conf = 3;
}