/*
 * Copyright (C) 2021 Swift Navigation Inc.
 * Contact: https://support.swiftnav.com
 *
 * This source is subject to the license found in the file 'LICENSE' which must
 * be be distributed together with this source. All other rights reserved.
 *
 * THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND,
 * EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR PURPOSE.
 */

syntax = "proto3";

/** Navigation
 *
 * Geodetic navigation messages reporting GPS time, position, velocity, and
 * baseline position solutions. For position solutions, these messages define
 * several different position solutions: single-point (SPP), RTK, and pseudo-
 * absolute position solutions.
 *
 * The SPP is the standalone, absolute GPS position solution using only a
 * single receiver. The RTK solution is the differential GPS solution, which
 * can use either a fixed/integer or floating carrier phase ambiguity. The
 * pseudo-absolute position solution uses a user-provided, well-surveyed base
 * station position (if available) and the RTK solution in tandem.
 *
 * When the inertial navigation mode indicates that the IMU is used, all
 * messages are reported in the vehicle body frame as defined by device
 * settings.  By default, the vehicle body frame is configured to be
 * coincident with the antenna phase center.  When there is no inertial
 * navigation, the solution will be reported at the phase center of the
 * antenna. There is no inertial navigation capability on Piksi Multi or Duro.
 *
 * The tow field, when valid, is most often the Time of Measurement. When this
 * is the case, the 5th bit of flags is set to the default value of 0. When
 * this is not the case, the tow may be a time of arrival or a local system
 * timestamp, irrespective of the time reference (GPS Week or else), but not a
 * Time of Measurement.
 */

package swiftnav.sbp.navigation;


/** GPS Time
 *
 * This message reports the GPS time, representing the time since the GPS
 * epoch began on midnight January 6, 1980 UTC. GPS time counts the weeks and
 * seconds of the week. The weeks begin at the Saturday/Sunday transition. GPS
 * week 0 began at the beginning of the GPS time scale.
 *
 * Within each week number, the GPS time of the week is between between 0 and
 * 604800 seconds (=60*60*24*7). Note that GPS time does not accumulate leap
 * seconds, and as of now, has a small offset from UTC. In a message stream,
 * this message precedes a set of other navigation messages referenced to the
 * same time (but lacking the ns field) and indicates a more precise time of
 * these messages.
 */
message MsgGpsTime {
    uint32 wn = 1;
    uint32 tow = 2;
    sint32 ns_residual = 3;
    uint32 flags = 4;
}

/** GPS Time
 *
 * This message reports the GPS time, representing the time since the GPS
 * epoch began on midnight January 6, 1980 UTC. GPS time counts the weeks and
 * seconds of the week. The weeks begin at the Saturday/Sunday transition. GPS
 * week 0 began at the beginning of the GPS time scale.
 *
 * Within each week number, the GPS time of the week is between between 0 and
 * 604800 seconds (=60*60*24*7). Note that GPS time does not accumulate leap
 * seconds, and as of now, has a small offset from UTC. In a message stream,
 * this message precedes a set of other navigation messages referenced to the
 * same time (but lacking the ns field) and indicates a more precise time of
 * these messages.
 */
message MsgGpsTimeGnss {
    uint32 wn = 1;
    uint32 tow = 2;
    sint32 ns_residual = 3;
    uint32 flags = 4;
}

/** UTC Time
 *
 * This message reports the Universal Coordinated Time (UTC).  Note the flags
 * which indicate the source of the UTC offset value and source of the time
 * fix.
 */
message MsgUtcTime {
    uint32 flags = 1;
    uint32 tow = 2;
    uint32 year = 3;
    uint32 month = 4;
    uint32 day = 5;
    uint32 hours = 6;
    uint32 minutes = 7;
    uint32 seconds = 8;
    uint32 ns = 9;
}

/** UTC Time
 *
 * This message reports the Universal Coordinated Time (UTC).  Note the flags
 * which indicate the source of the UTC offset value and source of the time
 * fix.
 */
message MsgUtcTimeGnss {
    uint32 flags = 1;
    uint32 tow = 2;
    uint32 year = 3;
    uint32 month = 4;
    uint32 day = 5;
    uint32 hours = 6;
    uint32 minutes = 7;
    uint32 seconds = 8;
    uint32 ns = 9;
}

/** Dilution of Precision
 *
 * This dilution of precision (DOP) message describes the effect of navigation
 * satellite geometry on positional measurement precision.  The flags field
 * indicated whether the DOP reported corresponds to differential or SPP
 * solution.
 */
message MsgDops {
    uint32 tow = 1;
    uint32 gdop = 2;
    uint32 pdop = 3;
    uint32 tdop = 4;
    uint32 hdop = 5;
    uint32 vdop = 6;
    uint32 flags = 7;
}

/** Single-point position in ECEF
 *
 * The position solution message reports absolute Earth Centered Earth Fixed
 * (ECEF) coordinates and the status (single point vs pseudo-absolute RTK) of
 * the position solution. If the rover receiver knows the surveyed position of
 * the base station and has an RTK solution, this reports a pseudo-absolute
 * position solution using the base station position and the rover's RTK
 * baseline vector. The full GPS time is given by the preceding MSG_GPS_TIME
 * with the matching time-of-week (tow).
 */
message MsgPosEcef {
    uint32 tow = 1;
    double x = 2;
    double y = 3;
    double z = 4;
    uint32 accuracy = 5;
    uint32 n_sats = 6;
    uint32 flags = 7;
}

/** Single-point position in ECEF
 *
 * The position solution message reports absolute Earth Centered Earth Fixed
 * (ECEF) coordinates and the status (single point vs pseudo-absolute RTK) of
 * the position solution. The message also reports the upper triangular
 * portion of the 3x3 covariance matrix. If the receiver knows the surveyed
 * position of the base station and has an RTK solution, this reports a
 * pseudo-absolute position solution using the base station position and the
 * rover's RTK baseline vector. The full GPS time is given by the preceding
 * MSG_GPS_TIME with the matching time-of-week (tow).
 */
message MsgPosEcefCov {
    uint32 tow = 1;
    double x = 2;
    double y = 3;
    double z = 4;
    float cov_x_x = 5;
    float cov_x_y = 6;
    float cov_x_z = 7;
    float cov_y_y = 8;
    float cov_y_z = 9;
    float cov_z_z = 10;
    uint32 n_sats = 11;
    uint32 flags = 12;
}

/** Geodetic Position
 *
 * This position solution message reports the absolute geodetic coordinates
 * and the status (single point vs pseudo-absolute RTK) of the position
 * solution. If the rover receiver knows the surveyed position of the base
 * station and has an RTK solution, this reports a pseudo-absolute position
 * solution using the base station position and the rover's RTK baseline
 * vector. The full GPS time is given by the preceding MSG_GPS_TIME with the
 * matching time-of-week (tow).
 */
message MsgPosLlh {
    uint32 tow = 1;
    double lat = 2;
    double lon = 3;
    double height = 4;
    uint32 h_accuracy = 5;
    uint32 v_accuracy = 6;
    uint32 n_sats = 7;
    uint32 flags = 8;
}

/** Geodetic Position
 *
 * This position solution message reports the absolute geodetic coordinates
 * and the status (single point vs pseudo-absolute RTK) of the position
 * solution as well as the upper triangle of the 3x3 covariance matrix.  The
 * position information and Fix Mode flags follow the MSG_POS_LLH message.
 * Since the covariance matrix is computed in the local-level North, East,
 * Down frame, the covariance terms follow that convention. Thus, covariances
 * are reported against the "downward" measurement and care should be taken
 * with the sign convention.
 */
message MsgPosLlhCov {
    uint32 tow = 1;
    double lat = 2;
    double lon = 3;
    double height = 4;
    float cov_n_n = 5;
    float cov_n_e = 6;
    float cov_n_d = 7;
    float cov_e_e = 8;
    float cov_e_d = 9;
    float cov_d_d = 10;
    uint32 n_sats = 11;
    uint32 flags = 12;
}

/** Horizontal estimated error ellipse
 *
None
 */
message EstimatedHorizontalErrorEllipse {
    float semi_major = 1;
    float semi_minor = 2;
    float orientation = 3;
}

/** Geodetic Position and Accuracy
 *
 * This position solution message reports the absolute geodetic coordinates
 * and the status (single point vs pseudo-absolute RTK) of the position
 * solution as well as the estimated horizontal, vertical, cross-track and
 * along-track errors.  The position information and Fix Mode flags  follow
 * the MSG_POS_LLH message. Since the covariance matrix is computed in the
 * local-level North, East, Down frame, the estimated error terms follow that
 * convention.
 *
 * The estimated errors are reported at a user-configurable confidence level.
 * The user-configured percentile is encoded in the percentile field.
 */
message MsgPosLlhAcc {
    uint32 tow = 1;
    double lat = 2;
    double lon = 3;
    double height = 4;
    double orthometric_height = 5;
    float h_accuracy = 6;
    float v_accuracy = 7;
    float ct_accuracy = 8;
    float at_accuracy = 9;
    EstimatedHorizontalErrorEllipse h_ellipse = 10;
    uint32 confidence_and_geoid = 11;
    uint32 n_sats = 12;
    uint32 flags = 13;
}

/** Baseline Position in ECEF
 *
 * This message reports the baseline solution in Earth Centered Earth Fixed
 * (ECEF) coordinates. This baseline is the relative vector distance from the
 * base station to the rover receiver. The full GPS time is given by the
 * preceding MSG_GPS_TIME with the matching time-of-week (tow).
 */
message MsgBaselineEcef {
    uint32 tow = 1;
    sint32 x = 2;
    sint32 y = 3;
    sint32 z = 4;
    uint32 accuracy = 5;
    uint32 n_sats = 6;
    uint32 flags = 7;
}

/** Baseline in NED
 *
 * This message reports the baseline solution in North East Down (NED)
 * coordinates. This baseline is the relative vector distance from the base
 * station to the rover receiver, and NED coordinate system is defined at the
 * local WGS84 tangent plane centered at the base station position.  The full
 * GPS time is given by the preceding MSG_GPS_TIME with the matching time-of-
 * week (tow).
 */
message MsgBaselineNed {
    uint32 tow = 1;
    sint32 n = 2;
    sint32 e = 3;
    sint32 d = 4;
    uint32 h_accuracy = 5;
    uint32 v_accuracy = 6;
    uint32 n_sats = 7;
    uint32 flags = 8;
}

/** Velocity in ECEF
 *
 * This message reports the velocity in Earth Centered Earth Fixed (ECEF)
 * coordinates. The full GPS time is given by the preceding MSG_GPS_TIME with
 * the matching time-of-week (tow).
 */
message MsgVelEcef {
    uint32 tow = 1;
    sint32 x = 2;
    sint32 y = 3;
    sint32 z = 4;
    uint32 accuracy = 5;
    uint32 n_sats = 6;
    uint32 flags = 7;
}

/** Velocity in ECEF
 *
 * This message reports the velocity in Earth Centered Earth Fixed (ECEF)
 * coordinates. The full GPS time is given by the preceding MSG_GPS_TIME with
 * the matching time-of-week (tow).
 */
message MsgVelEcefCov {
    uint32 tow = 1;
    sint32 x = 2;
    sint32 y = 3;
    sint32 z = 4;
    float cov_x_x = 5;
    float cov_x_y = 6;
    float cov_x_z = 7;
    float cov_y_y = 8;
    float cov_y_z = 9;
    float cov_z_z = 10;
    uint32 n_sats = 11;
    uint32 flags = 12;
}

/** Velocity in NED
 *
 * This message reports the velocity in local North East Down (NED)
 * coordinates. The NED coordinate system is defined as the local WGS84
 * tangent plane centered at the current position. The full GPS time is given
 * by the preceding MSG_GPS_TIME with the matching time-of-week (tow).
 */
message MsgVelNed {
    uint32 tow = 1;
    sint32 n = 2;
    sint32 e = 3;
    sint32 d = 4;
    uint32 h_accuracy = 5;
    uint32 v_accuracy = 6;
    uint32 n_sats = 7;
    uint32 flags = 8;
}

/** Velocity in NED
 *
 * This message reports the velocity in local North East Down (NED)
 * coordinates. The NED coordinate system is defined as the local WGS84
 * tangent plane centered at the current position. The full GPS time is given
 * by the preceding MSG_GPS_TIME with the matching time-of-week (tow). This
 * message is similar to the MSG_VEL_NED, but it includes the upper triangular
 * portion of the 3x3 covariance matrix.
 */
message MsgVelNedCov {
    uint32 tow = 1;
    sint32 n = 2;
    sint32 e = 3;
    sint32 d = 4;
    float cov_n_n = 5;
    float cov_n_e = 6;
    float cov_n_d = 7;
    float cov_e_e = 8;
    float cov_e_d = 9;
    float cov_d_d = 10;
    uint32 n_sats = 11;
    uint32 flags = 12;
}

/** GNSS-only Position in ECEF
 *
 * The position solution message reports absolute Earth Centered Earth Fixed
 * (ECEF) coordinates and the status (single point vs pseudo-absolute RTK) of
 * the position solution. If the rover receiver knows the surveyed position of
 * the base station and has an RTK solution, this reports a pseudo-absolute
 * position solution using the base station position and the rover's RTK
 * baseline vector. The full GPS time is given by the preceding MSG_GPS_TIME
 * with the matching time-of-week (tow).
 */
message MsgPosEcefGnss {
    uint32 tow = 1;
    double x = 2;
    double y = 3;
    double z = 4;
    uint32 accuracy = 5;
    uint32 n_sats = 6;
    uint32 flags = 7;
}

/** GNSS-only Position in ECEF
 *
 * The position solution message reports absolute Earth Centered Earth Fixed
 * (ECEF) coordinates and the status (single point vs pseudo-absolute RTK) of
 * the position solution. The message also reports the upper triangular
 * portion of the 3x3 covariance matrix. If the receiver knows the surveyed
 * position of the base station and has an RTK solution, this reports a
 * pseudo-absolute position solution using the base station position and the
 * rover's RTK baseline vector. The full GPS time is given by the preceding
 * MSG_GPS_TIME with the matching time-of-week (tow).
 */
message MsgPosEcefCovGnss {
    uint32 tow = 1;
    double x = 2;
    double y = 3;
    double z = 4;
    float cov_x_x = 5;
    float cov_x_y = 6;
    float cov_x_z = 7;
    float cov_y_y = 8;
    float cov_y_z = 9;
    float cov_z_z = 10;
    uint32 n_sats = 11;
    uint32 flags = 12;
}

/** GNSS-only Geodetic Position
 *
 * This position solution message reports the absolute geodetic coordinates
 * and the status (single point vs pseudo-absolute RTK) of the position
 * solution. If the rover receiver knows the surveyed position of the base
 * station and has an RTK solution, this reports a pseudo-absolute position
 * solution using the base station position and the rover's RTK baseline
 * vector. The full GPS time is given by the preceding MSG_GPS_TIME with the
 * matching time-of-week (tow).
 */
message MsgPosLlhGnss {
    uint32 tow = 1;
    double lat = 2;
    double lon = 3;
    double height = 4;
    uint32 h_accuracy = 5;
    uint32 v_accuracy = 6;
    uint32 n_sats = 7;
    uint32 flags = 8;
}

/** GNSS-only Geodetic Position
 *
 * This position solution message reports the absolute geodetic coordinates
 * and the status (single point vs pseudo-absolute RTK) of the position
 * solution as well as the upper triangle of the 3x3 covariance matrix.  The
 * position information and Fix Mode flags should follow the MSG_POS_LLH
 * message.  Since the covariance matrix is computed in the local-level North,
 * East, Down frame, the covariance terms follow with that convention. Thus,
 * covariances are reported against the "downward" measurement and care should
 * be taken with the sign convention.
 */
message MsgPosLlhCovGnss {
    uint32 tow = 1;
    double lat = 2;
    double lon = 3;
    double height = 4;
    float cov_n_n = 5;
    float cov_n_e = 6;
    float cov_n_d = 7;
    float cov_e_e = 8;
    float cov_e_d = 9;
    float cov_d_d = 10;
    uint32 n_sats = 11;
    uint32 flags = 12;
}

/** GNSS-only Velocity in ECEF
 *
 * This message reports the velocity in Earth Centered Earth Fixed (ECEF)
 * coordinates. The full GPS time is given by the preceding MSG_GPS_TIME with
 * the matching time-of-week (tow).
 */
message MsgVelEcefGnss {
    uint32 tow = 1;
    sint32 x = 2;
    sint32 y = 3;
    sint32 z = 4;
    uint32 accuracy = 5;
    uint32 n_sats = 6;
    uint32 flags = 7;
}

/** GNSS-only Velocity in ECEF
 *
 * This message reports the velocity in Earth Centered Earth Fixed (ECEF)
 * coordinates. The full GPS time is given by the preceding MSG_GPS_TIME with
 * the matching time-of-week (tow).
 */
message MsgVelEcefCovGnss {
    uint32 tow = 1;
    sint32 x = 2;
    sint32 y = 3;
    sint32 z = 4;
    float cov_x_x = 5;
    float cov_x_y = 6;
    float cov_x_z = 7;
    float cov_y_y = 8;
    float cov_y_z = 9;
    float cov_z_z = 10;
    uint32 n_sats = 11;
    uint32 flags = 12;
}

/** GNSS-only Velocity in NED
 *
 * This message reports the velocity in local North East Down (NED)
 * coordinates. The NED coordinate system is defined as the local WGS84
 * tangent plane centered at the current position. The full GPS time is given
 * by the preceding MSG_GPS_TIME with the matching time-of-week (tow).
 */
message MsgVelNedGnss {
    uint32 tow = 1;
    sint32 n = 2;
    sint32 e = 3;
    sint32 d = 4;
    uint32 h_accuracy = 5;
    uint32 v_accuracy = 6;
    uint32 n_sats = 7;
    uint32 flags = 8;
}

/** GNSS-only Velocity in NED
 *
 * This message reports the velocity in local North East Down (NED)
 * coordinates. The NED coordinate system is defined as the local WGS84
 * tangent plane centered at the current position. The full GPS time is given
 * by the preceding MSG_GPS_TIME with the matching time-of-week (tow). This
 * message is similar to the MSG_VEL_NED, but it includes the upper triangular
 * portion of the 3x3 covariance matrix.
 */
message MsgVelNedCovGnss {
    uint32 tow = 1;
    sint32 n = 2;
    sint32 e = 3;
    sint32 d = 4;
    float cov_n_n = 5;
    float cov_n_e = 6;
    float cov_n_d = 7;
    float cov_e_e = 8;
    float cov_e_d = 9;
    float cov_d_d = 10;
    uint32 n_sats = 11;
    uint32 flags = 12;
}

/** Velocity in User Frame
 *
 * This message reports the velocity in the Vehicle Body Frame. By convention,
 * the x-axis should point out the nose of the vehicle and represent the
 * forward direction, while as the y-axis should point out the right hand side
 * of the vehicle. Since this is a right handed system, z should point out the
 * bottom of the vehicle. The orientation and origin of the Vehicle Body Frame
 * are specified via the device settings. The full GPS time is given by the
 * preceding MSG_GPS_TIME with the matching time-of-week (tow). This message
 * is only produced by inertial versions of Swift products and is not
 * available from Piksi Multi or Duro.
 */
message MsgVelBody {
    uint32 tow = 1;
    sint32 x = 2;
    sint32 y = 3;
    sint32 z = 4;
    float cov_x_x = 5;
    float cov_x_y = 6;
    float cov_x_z = 7;
    float cov_y_y = 8;
    float cov_y_z = 9;
    float cov_z_z = 10;
    uint32 n_sats = 11;
    uint32 flags = 12;
}

/** Velocity expressed as course over ground
 *
 * This message reports the receiver course over ground (COG) and speed over
 * ground (SOG) based on the horizontal (N-E) components of the NED velocity
 * vector. It also includes the vertical velocity coordinate. A flag is
 * provided to indicate whether the COG value has been frozen. When  the flag
 * is set to true, the COG field is set to its last valid value until  the
 * system exceeds a minimum velocity threshold. No other fields are  affected
 * by this flag.  The NED coordinate system is defined as the local WGS84
 * tangent  plane centered at the current position. The full GPS time is given
 * by the  preceding MSG_GPS_TIME with the matching time-of-week (tow). Note:
 * course over ground represents the receiver's direction of travel,  but not
 * necessarily the device heading.
 */
message MsgVelCog {
    uint32 tow = 1;
    uint32 cog = 2;
    uint32 sog = 3;
    sint32 v_up = 4;
    uint32 cog_accuracy = 5;
    uint32 sog_accuracy = 6;
    uint32 v_up_accuracy = 7;
    uint32 flags = 8;
}

/** Age of corrections
 *
 * This message reports the Age of the corrections used for the current
 * Differential solution.
 */
message MsgAgeCorrections {
    uint32 tow = 1;
    uint32 age = 2;
}

/** Computed state and Protection Levels
 *
 * This message reports the protection levels associated to the given state
 * estimate. The full GPS time is given by the preceding MSG_GPS_TIME with the
 * matching time-of-week (tow).
 */
message MsgProtectionLevel {
    uint32 tow = 1;
    sint32 wn = 2;
    uint32 hpl = 3;
    uint32 vpl = 4;
    uint32 atpl = 5;
    uint32 ctpl = 6;
    uint32 hvpl = 7;
    uint32 vvpl = 8;
    uint32 hopl = 9;
    uint32 popl = 10;
    uint32 ropl = 11;
    double lat = 12;
    double lon = 13;
    double height = 14;
    sint32 v_x = 15;
    sint32 v_y = 16;
    sint32 v_z = 17;
    sint32 roll = 18;
    sint32 pitch = 19;
    sint32 heading = 20;
    uint32 flags = 21;
}

/** Leap second SBP message.

 *
 * UTC-GPST leap seconds before and after the most recent (past, or future,
 * for announced insertions) UTC leap second insertion.
 */
message MsgUtcLeapSecond {
    sint32 count_before = 4;
    uint32 ref_wn = 7;
    uint32 ref_dn = 8;
    sint32 count_after = 9;
}

/** Reference Frame Transformation Parameters
 *
None
 */
message MsgReferenceFrameParam {
    uint32 ssr_iod = 1;
    string sn = 2;
    string tn = 3;
    uint32 sin = 4;
    uint32 utn = 5;
    uint32 re_t0 = 6;
    sint32 delta_X0 = 7;
    sint32 delta_Y0 = 8;
    sint32 delta_Z0 = 9;
    sint32 theta_01 = 10;
    sint32 theta_02 = 11;
    sint32 theta_03 = 12;
    sint32 scale = 13;
    sint32 dot_delta_X0 = 14;
    sint32 dot_delta_Y0 = 15;
    sint32 dot_delta_Z0 = 16;
    sint32 dot_theta_01 = 17;
    sint32 dot_theta_02 = 18;
    sint32 dot_theta_03 = 19;
    sint32 dot_scale = 20;
}