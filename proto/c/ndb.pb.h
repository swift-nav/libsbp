/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.0-dev at Tue Mar 13 13:32:36 2018. */

#ifndef PB_SWIFTNAV_SBP_NDB_NDB_PB_H_INCLUDED
#define PB_SWIFTNAV_SBP_NDB_NDB_PB_H_INCLUDED
#include <pb.h>

#include "gnss.pb.h"

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Struct definitions */
typedef struct _swiftnav_sbp_ndb_MsgNdbEvent {
    uint64_t recv_time;
    uint32_t event;
    uint32_t object_type;
    uint32_t result;
    uint32_t data_source;
    swiftnav_sbp_gnss_GnssSignal object_sid;
    swiftnav_sbp_gnss_GnssSignal src_sid;
    uint32_t original_sender;
/* @@protoc_insertion_point(struct:swiftnav_sbp_ndb_MsgNdbEvent) */
} swiftnav_sbp_ndb_MsgNdbEvent;

/* Default values for struct fields */

/* Initializer values for message structs */
#define swiftnav_sbp_ndb_MsgNdbEvent_init_default {0, 0, 0, 0, 0, swiftnav_sbp_gnss_GnssSignal_init_default, swiftnav_sbp_gnss_GnssSignal_init_default, 0}
#define swiftnav_sbp_ndb_MsgNdbEvent_init_zero   {0, 0, 0, 0, 0, swiftnav_sbp_gnss_GnssSignal_init_zero, swiftnav_sbp_gnss_GnssSignal_init_zero, 0}

/* Field tags (for use in manual encoding/decoding) */
#define swiftnav_sbp_ndb_MsgNdbEvent_recv_time_tag 1
#define swiftnav_sbp_ndb_MsgNdbEvent_event_tag   2
#define swiftnav_sbp_ndb_MsgNdbEvent_object_type_tag 3
#define swiftnav_sbp_ndb_MsgNdbEvent_result_tag  4
#define swiftnav_sbp_ndb_MsgNdbEvent_data_source_tag 5
#define swiftnav_sbp_ndb_MsgNdbEvent_object_sid_tag 6
#define swiftnav_sbp_ndb_MsgNdbEvent_src_sid_tag 7
#define swiftnav_sbp_ndb_MsgNdbEvent_original_sender_tag 8

/* Struct field encoding specification for nanopb */
extern const pb_field_t swiftnav_sbp_ndb_MsgNdbEvent_fields[9];

/* Maximum encoded size of messages (where known) */
#define swiftnav_sbp_ndb_MsgNdbEvent_size        69

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define NDB_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif
/* @@protoc_insertion_point(eof) */

#endif
