/*
 * Copyright (C) 2018 Swift Navigation Inc.
 * Contact: Swift Navigation <dev@swiftnav.com>
 *
 * This source is subject to the license found in the file 'LICENSE' which must
 * be be distributed together with this source. All other rights reserved.
 *
 * THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND,
 * EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR PURPOSE.
 */

syntax = "proto3";

/** Gnss
 *
 * Various structs shared between modules
 */

package swiftnav.sbp.gnss;


/** Represents all the relevant information about the signal
 *
 * Signal identifier containing constellation, band, and satellite identifier
 */
message GnssSignal {
    uint32 sat = 1;
    uint32 code = 2;
}

/** Space vehicle identifier
 *
 * A (Constellation ID, satellite ID) tuple that uniquely identifies
 * a space vehicle
 */
message SvId {
    uint32 satId = 1;
    uint32 constellation = 2;
}

/** Whole second accurate GPS time
 *
 * A GPS time, defined as the number of
 * seconds since beginning of the week on the Saturday/Sunday
 * transition.
 */
message GpsTimeSec {
    uint32 tow = 1;
    uint32 wn = 2;
}

/** Nanosecond-accurate receiver clock time
 *
 * A wire-appropriate receiver clock time, defined as the time
 * since the beginning of the week on the Saturday/Sunday
 * transition. In most cases, observations are epoch aligned
 * so ns field will be 0.
 */
message GpsTime {
    uint32 tow = 1;
    sint32 ns_residual = 2;
    uint32 wn = 3;
}

/** GNSS carrier phase measurement.
 *
 * Carrier phase measurement in cycles represented as a 40-bit
 * fixed point number with Q32.8 layout, i.e. 32-bits of whole
 * cycles and 8-bits of fractional cycles. This phase has the
 * same sign as the pseudorange.
 */
message CarrierPhase {
    sint32 i = 1;
    uint32 f = 2;
}