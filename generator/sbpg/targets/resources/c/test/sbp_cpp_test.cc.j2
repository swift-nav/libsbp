/*
 * Copyright (C) 2015-2021 Swift Navigation Inc.
 * Contact: https://support.swiftnav.com
 *
 * This source is subject to the license found in the file 'LICENSE' which must
 * be distributed together with this source. All other rights reserved.
 *
 * THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND,
 * EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR PURPOSE.
 */

// This file was auto-generated from (((s.src_filename))) by generate.py. Do not modify by hand!

#include <algorithm>
#include <gtest/gtest.h>
#include <libsbp/cpp/message_handler.h>
#include <libsbp/cpp/state.h>
#include <libsbp/sbp.h>

((*- macro assign_string(root_path, value) *))
((*- if value.sections *))
((*- for s in value.sections *))
EXPECT_TRUE( (((- value.fn_prefix)))_add_section(&(((root_path))), "(((value.sections[loop.index0])))"));
((*- endfor *))
((*- else *))
size_t written;
EXPECT_TRUE( (((- value.fn_prefix)))_set(&(((root_path))), "(((value.text)))", false, &written));
EXPECT_EQ(written, strlen("(((value.text)))"));
((*- endif *))
EXPECT_EQ( (((- value.fn_prefix)))_encoded_len(&(((root_path)))), (((value.encoded_len))));
((*- endmacro *))


  
((*- macro assign_value(root_path, path, value) *))
((*- if value is string_type *))
{
  const char assign_string[] = { (((value|str_escape))) };
  memcpy( (((-path))), assign_string, sizeof(assign_string));
}
((*- elif value is array_type *))
((*- for ff in value *))
((( assign_value(root_path, path ~ '[' ~ loop.index0 ~ ']', ff) )))
((*- endfor *))
((*- elif value is dict_type *))
((*- if value.handle_as and value.handle_as == "encoded-string" *))
((( assign_string(root_path, value) )))
((*- elif value.handle_as and value.handle_as == "vararray-len" *))
assign( (((path))) , (((value.value))));
((*- else *))
((*- for k in value|sorted *))((( assign_value(root_path, path + "." + k, value[k]) )))((*- endfor *))
((*- endif *))
((*- else *))
assign( (((path))) , (((value))));
((*- endif *))
((*- endmacro *))

namespace {

template<typename T, typename U>
void assign(T &dest, const U &source) {
  dest = static_cast<T>(source);
}

((*- for t in s.tests *))
((*- set fixture_name = "Test" ~ s.suite_name ~ loop.index0 *))
class ((( fixture_name ))) : public ::testing::Test {
public:
  ((( fixture_name ))) () {
    ((*- if t.c_decoded_fields *))
    ((*- for f in t.c_decoded_fieldskeys *))(((assign_value("test_msg_", "test_msg_." + f, t.c_decoded_fields[f]))))((*- endfor *))
    ((*- endif *))
  }

  class SlowReader final : public sbp::IReader {
  public:
    SlowReader(const uint8_t *buf, uint32_t len)
        : sbp::IReader(), buf_{buf}, len_{len} {}

    s32 read(uint8_t *buf, const uint32_t n) override {
      if (n == 0) {
        return 0;
      }
      if (remaining() == 0) {
        return -1;
      }
      skip_next_read = !skip_next_read;
      if (skip_next_read) {
        return 0;
      }
      uint32_t real_n = std::min(n, 1u);
      memcpy(buf, buf_ + offset_, real_n);
      offset_ += real_n;
      return static_cast<s32>(real_n);
    }

    uint32_t remaining() const noexcept { return len_ - offset_; }

    static s32 read_static(uint8_t *buf, uint32_t len, void *ctx) {
      return static_cast<SlowReader *>(ctx)->read(buf, len);
    }

  private:
    const uint8_t *buf_;
    uint32_t len_;
    uint32_t offset_{};
    bool skip_next_read{};
  };

  class Reader final : public sbp::IReader {
  public:
    Reader(const uint8_t *buf, uint32_t len)
        : sbp::IReader(), buf_{buf}, len_{len} {}

    s32 read(uint8_t *buf, const uint32_t n) override {
      if (n == 0) {
        return 0;
      }
      uint32_t real_n = std::min(n, remaining());
      if (real_n == 0) {
        return -1;
      }
      memcpy(buf, buf_ + offset_, real_n);
      offset_ += real_n;
      return static_cast<s32>(real_n);
    }

    uint32_t remaining() const noexcept { return len_ - offset_; }

    static s32 read_static(uint8_t *buf, uint32_t len, void *ctx) {
      return static_cast<Reader *>(ctx)->read(buf, len);
    }

  private:
    const uint8_t *buf_;
    uint32_t len_;
    uint32_t offset_{};
  };

  class SlowWriter final : public sbp::IWriter {
  public:
    explicit SlowWriter(uint32_t max_len = cMaxLen)
        : IWriter(), max_len_{max_len} {}
    static constexpr uint32_t cMaxLen = SBP_MAX_FRAME_LEN;

    s32 write(const uint8_t *buf, uint32_t n) override {
      if (n == 0) {
        return 0;
      }
      uint32_t real_n = std::min(n, 1u);
      if (real_n == 0) {
        return -1;
      }
      memcpy(buf_ + offset_, buf, real_n);
      offset_ += real_n;
      return static_cast<s32>(real_n);
    }

    uint32_t remaining() const noexcept { return max_len_ - offset_; }

    const uint8_t *data() const noexcept { return buf_; }

    uint32_t len() const noexcept { return offset_; }

    static s32 write_static(const uint8_t *buf, uint32_t len, void *ctx) {
      return static_cast<SlowWriter *>(ctx)->write(buf, len);
    }

    static s32 write_c(uint8_t *buf, uint32_t len, void *ctx) {
      return static_cast<SlowWriter *>(ctx)->write(buf, len);
    }

  private:
    uint8_t buf_[cMaxLen];
    uint32_t max_len_;
    uint32_t offset_{};
  };

  class Writer final : public sbp::IWriter {
  public:
    explicit Writer(uint32_t max_len = cMaxLen)
        : IWriter(), max_len_{max_len} {}
    static constexpr uint32_t cMaxLen = SBP_MAX_FRAME_LEN;

    s32 write(const uint8_t *buf, uint32_t n) override {
      if (n == 0) {
        return 0;
      }
      uint32_t real_n = std::min(n, remaining());
      if (real_n == 0) {
        return -1;
      }
      memcpy(buf_ + offset_, buf, real_n);
      offset_ += real_n;
      return static_cast<s32>(real_n);
    }

    uint32_t remaining() const noexcept { return max_len_ - offset_; }

    const uint8_t *data() const noexcept { return buf_; }

    uint32_t len() const noexcept { return offset_; }

    static s32 write_static(const uint8_t *buf, uint32_t len, void *ctx) {
      return static_cast<Writer *>(ctx)->write(buf, len);
    }

    static s32 write_c(uint8_t *buf, uint32_t len, void *ctx) {
      return static_cast<Writer *>(ctx)->write(buf, len);
    }

  private:
    uint8_t buf_[cMaxLen];
    uint32_t max_len_;
    uint32_t offset_{};
  };

  struct CppHandler final : public sbp::MessageHandler<((( t.struct_name )))> {
    using sbp::MessageHandler<((( t.struct_name )))>::MessageHandler;

    struct Output final {
      uint16_t sender_id;
      ((( t.struct_name ))) msg;
    };

    std::vector<Output> outputs{};

  protected:
    void handle_sbp_msg(uint16_t sender_id,
                        const ((( t.struct_name ))) &msg) override {
      outputs.emplace_back();
      outputs.back().sender_id = sender_id;
      memcpy(&outputs.back().msg, &msg, sizeof(msg));
    }
  };

  struct CHandler final {
    explicit CHandler(sbp_state_t *state) : state_{state} {
      sbp_callback_register(state, ((( t.enum_value ))), &CHandler::callback_static,
                            this, &node_);
    }

    ~CHandler() { sbp_remove_callback(state_, &node_); }

    struct Output final {
      uint16_t sender_id;
      ((( t.struct_name ))) msg;
    };

    std::vector<Output> outputs{};

  private:
    void callback(uint16_t sender_id, sbp_msg_type_t msg_type,
                  const sbp_msg_t *msg) {
      ASSERT_EQ(msg_type, ((( t.enum_value ))));
      outputs.emplace_back();
      outputs.back().sender_id = sender_id;
      memcpy(&outputs.back().msg, &msg->(((t.name_in_sbp_msg_t))), sizeof(msg->(((t.name_in_sbp_msg_t)))));
    }

    static void callback_static(uint16_t sender_id, sbp_msg_type_t msg_type,
                                const sbp_msg_t *msg, void *ctx) {
      static_cast<CHandler *>(ctx)->callback(sender_id, msg_type, msg);
    }

    sbp_msg_callbacks_node_t node_{};
    sbp_state_t *state_;
  };

  struct TestMsgInfo {
    ((( t.struct_name ))) test_msg;
    sbp_msg_t test_msg_wrapped;
    sbp_msg_type_t msg_type;
    uint16_t sender_id;
    uint8_t preamble;
    uint16_t crc;
    const uint8_t *encoded_frame;
    uint32_t frame_len;
    const uint8_t *encoded_payload;
    uint8_t payload_len;

    Reader get_frame_reader() const noexcept {
      return Reader{encoded_frame, frame_len};
    }

    Reader get_frame_reader(uint32_t max) const noexcept {
      assert(max <= frame_len);
      return Reader{encoded_frame, max};
    }

    SlowReader get_slow_frame_reader() const noexcept {
      return SlowReader{encoded_frame, frame_len};
    }

    Writer get_frame_writer() const noexcept { return Writer{frame_len}; }

    Writer get_frame_writer(uint32_t max) const noexcept { return Writer{max}; }

    SlowWriter get_slow_frame_writer() const noexcept {
      return SlowWriter{frame_len};
    }
  };

  TestMsgInfo get_test_msg_info() const noexcept {
    TestMsgInfo info;
    memcpy(&info.test_msg, &test_msg_, sizeof(test_msg_));
    memcpy(&info.test_msg_wrapped.(((t.name_in_sbp_msg_t))), &test_msg_, sizeof(test_msg_));
    info.msg_type = static_cast<sbp_msg_type_t>( (((t.enum_value))) );
    info.sender_id = (((t.raw_json_obj.sender)));
    info.preamble = 0x55;
    info.crc = (((t.sbp.crc)));
    info.encoded_frame = encoded_frame_;
    info.frame_len = sizeof(encoded_frame_);
    info.encoded_payload = encoded_payload_;
    info.payload_len = (((t.sbp.length)));

    return info;
  }

protected:
void comparison_tests(const (((t.struct_name))) &lesser,
                      const (((t.struct_name))) &greater) {
  sbp_msg_t wrapped_lesser =
      sbp::MessageTraits<(((t.struct_name)))>::to_sbp_msg(lesser);
  sbp_msg_t wrapped_greater =
      sbp::MessageTraits<(((t.struct_name)))>::to_sbp_msg(greater);

  EXPECT_EQ( (((t.fn_prefix)))_cmp(&lesser, &lesser), 0);
  EXPECT_EQ( (((t.fn_prefix)))_cmp(&greater, &greater), 0);
  EXPECT_LE( (((t.fn_prefix)))_cmp(&lesser, &greater), 0);
  EXPECT_GT( (((t.fn_prefix)))_cmp(&greater, &lesser), 0);

  EXPECT_EQ(sbp_message_cmp( (((t.enum_value))), &wrapped_lesser, &wrapped_lesser),
            0);
  EXPECT_EQ(sbp_message_cmp( (((t.enum_value))), &wrapped_greater, &wrapped_greater),
            0);
  EXPECT_LE(sbp_message_cmp( (((t.enum_value))), &wrapped_lesser, &wrapped_greater),
            0);
  EXPECT_GT(sbp_message_cmp( (((t.enum_value))), &wrapped_greater, &wrapped_lesser),
            0);

  // lesser vs lesser
  EXPECT_TRUE(lesser == lesser);
  EXPECT_FALSE(lesser != lesser);
  EXPECT_FALSE(lesser < lesser);
  EXPECT_TRUE(lesser <= lesser);
  EXPECT_FALSE(lesser > lesser);
  EXPECT_TRUE(lesser >= lesser);

  // greater vs greater
  EXPECT_TRUE(greater == greater);
  EXPECT_FALSE(greater != greater);
  EXPECT_FALSE(greater < greater);
  EXPECT_TRUE(greater <= greater);
  EXPECT_FALSE(greater > greater);
  EXPECT_TRUE(greater >= greater);

  // lesser vs greater
  EXPECT_FALSE(lesser == greater);
  EXPECT_TRUE(lesser != greater);
  EXPECT_TRUE(lesser < greater);
  EXPECT_TRUE(lesser <= greater);
  EXPECT_FALSE(lesser > greater);
  EXPECT_FALSE(lesser >= greater);

  // greater vs lesser
  EXPECT_FALSE(greater == lesser);
  EXPECT_TRUE(greater != lesser);
  EXPECT_FALSE(greater < lesser);
  EXPECT_FALSE(greater <= lesser);
  EXPECT_TRUE(greater > lesser);
  EXPECT_TRUE(greater >= lesser);
}

template <typename T, 
std::enable_if_t<std::is_integral<T>::value, bool> = true> 
void make_lesser_greater(T &lesser, T &greater) {
  if (lesser > std::numeric_limits<T>::min()) {
    lesser--;
  } else {
    greater++;
  }
}

template<typename T, 
std::enable_if_t<std::is_floating_point<T>::value, bool> = true> 
void make_lesser_greater(T &lesser, T &greater) {
  (void)lesser;
  greater += static_cast<T>(1.0);
}

void make_lesser_greater(sbp_string_t &lesser, sbp_string_t &greater) {
  if (greater.data[0] == 'z') {
    lesser.data[0]--;
  } else {
    greater.data[0]++;
  }
}

template<size_t N>
void make_lesser_greater(char (&lesser)[N], char (&greater)[N]) {
  if (lesser[0] == 'z') {
    lesser[0]--;
  } else {
    greater[0]++;
  }
}

private:
  ((( t.struct_name ))) test_msg_{};
  uint8_t encoded_frame_[(((t.sbp.length))) + 8] = {
  ((*- for p in t.packet_as_byte_array *))(((p))),((*- endfor *))
};
  uint8_t encoded_payload_[((* if t.sbp.length == 0 *))1((* else *))(((t.sbp.length)))((* endif *))] = {
  ((*- for p in t.payload_as_byte_array *))(((p))),((*- endfor *))
  };
};

TEST_F( ((( fixture_name ))), EncodedLen) {
  auto info = get_test_msg_info();
  EXPECT_EQ( ((( t.fn_prefix )))_encoded_len(&info.test_msg), info.payload_len);

  EXPECT_EQ(sbp_message_encoded_len( (((t.enum_value))), &info.test_msg_wrapped),
            info.payload_len);
}

TEST_F( ((( fixture_name ))), EncodeToBuf) {
  auto info = get_test_msg_info();
  uint8_t buf[(((t.payload_len_for_encoding_buf)))];
  uint8_t n_written;

  EXPECT_EQ( ((( t.fn_prefix )))_encode(&buf[0], sizeof(buf), &n_written,
                                     &info.test_msg),
            SBP_OK);
  EXPECT_EQ(n_written, (((t.sbp.length))));
  EXPECT_EQ(memcmp(&buf[0], info.encoded_payload, (((t.sbp.length)))), 0);

  memset(&buf[0], 0, sizeof(buf));
  EXPECT_EQ(sbp_message_encode(&buf[0], sizeof(buf), &n_written, (((t.enum_value))),
                               &info.test_msg_wrapped),
            SBP_OK);
  EXPECT_EQ(n_written, (((t.sbp.length))));
  EXPECT_EQ(memcmp(&buf[0], info.encoded_payload, (((t.sbp.length)))), 0);
}

TEST_F( ((( fixture_name ))), EncodeToBufWithoutNwritten) {
  auto info = get_test_msg_info();
  uint8_t buf[(((t.payload_len_for_encoding_buf)))];

  EXPECT_EQ(
       ((( t.fn_prefix )))_encode(&buf[0], sizeof(buf), nullptr, &info.test_msg),
      SBP_OK);
  EXPECT_EQ(memcmp(&buf[0], info.encoded_payload, (((t.sbp.length)))), 0);
}

((*- if t.fields|length > 0 *))
TEST_F( ((( fixture_name ))), EncodedToBufUnderflow) {
  auto info = get_test_msg_info();
  uint8_t buf[(((t.payload_len_for_encoding_buf)))];

  for (uint8_t i = 0; i < (((t.sbp.length))); i++) {
    EXPECT_EQ( ((( t.fn_prefix )))_encode(&buf[0], i, nullptr, &info.test_msg),
              SBP_ENCODE_ERROR);
  }
}
((*- endif *))

TEST_F( ((( fixture_name ))), DecodeFromBuf) {
  auto info = get_test_msg_info();
  ((( t.struct_name ))) msg{};
  uint8_t n_read;

  EXPECT_EQ( (((t.fn_prefix)))_decode(&info.encoded_payload[0], info.payload_len,
                                     &n_read, &msg),
            SBP_OK);
  EXPECT_EQ(n_read, (((t.sbp.length))));
  EXPECT_EQ(msg, info.test_msg);

  sbp_msg_t wrapped_msg{};
  EXPECT_EQ(sbp_message_decode(&info.encoded_payload[0], info.payload_len,
                               &n_read, (((t.enum_value))), &wrapped_msg),
            SBP_OK);
  EXPECT_EQ(n_read, (((t.sbp.length))));
  EXPECT_EQ(msg, info.test_msg);
}

TEST_F( ((( fixture_name ))), DecodeFromBufWithoutNread) {
  auto info = get_test_msg_info();
  ((( t.struct_name ))) msg{};

  EXPECT_EQ( (((t.fn_prefix)))_decode(&info.encoded_payload[0], info.payload_len,
                                     nullptr, &msg),
            SBP_OK);
  EXPECT_EQ(msg, info.test_msg);
}

TEST_F( ((( fixture_name ))), ReceiveThroughSbpState) {
  auto info = get_test_msg_info();
  sbp_state_t state;
  sbp_state_init(&state);

  auto reader = info.get_frame_reader();
  sbp_state_set_io_context(&state, &reader);

  CHandler handler{&state};

  while (reader.remaining() > 0) {
    EXPECT_GE(sbp_process(&state, &Reader::read_static), SBP_OK);
  }

  EXPECT_EQ(handler.outputs.size(), 1);
  EXPECT_EQ(handler.outputs[0].sender_id, info.sender_id);
  EXPECT_EQ(handler.outputs[0].msg, info.test_msg);
}

TEST_F( ((( fixture_name ))), ReceiveThroughSbpStateUnderflow) {
  auto info = get_test_msg_info();

  for (uint32_t i = 0; i < info.frame_len; i++) {
    sbp_state_t state;
    sbp_state_init(&state);

    auto reader = info.get_frame_reader(i);
    sbp_state_set_io_context(&state, &reader);

    CHandler handler(&state);

    int most_recent_return = sbp_process(&state, &Reader::read_static);
    while (most_recent_return == SBP_OK || reader.remaining() > 0) {
      most_recent_return = sbp_process(&state, &Reader::read_static);
    }

    EXPECT_NE(most_recent_return, SBP_OK);
    EXPECT_EQ(reader.remaining(), 0);

    EXPECT_EQ(handler.outputs.size(), 0);
  }
}

TEST_F( (((fixture_name))), SlowRead) {
  auto info = get_test_msg_info();
  sbp_state_t state;
  sbp_state_init(&state);

  auto reader = info.get_slow_frame_reader();
  sbp_state_set_io_context(&state, &reader);

  CHandler handler{&state};

  while (reader.remaining() > 0) {
    EXPECT_GE(sbp_process(&state, &SlowReader::read_static), SBP_OK);
  }

  EXPECT_EQ(handler.outputs.size(), 1);
  EXPECT_EQ(handler.outputs[0].sender_id, info.sender_id);
  EXPECT_EQ(handler.outputs[0].msg, info.test_msg);
}

TEST_F( (((fixture_name))), BadCRC) {
  auto info = get_test_msg_info();
  uint8_t buf[SBP_MAX_FRAME_LEN];
  memcpy(&buf[0], info.encoded_frame, info.frame_len);

  // Introduce a CRC error which should cause an error return and no callback
  buf[info.frame_len - 1]++;

  sbp_state_t state;
  sbp_state_init(&state);

  Reader reader{buf, info.frame_len};
  sbp_state_set_io_context(&state, &reader);

  CHandler handler{&state};

  while (reader.remaining() > 0) {
    int res = sbp_process(&state, &Reader::read_static);
    EXPECT_EQ(res, reader.remaining() == 0 ? SBP_CRC_ERROR : SBP_OK);
  }

  EXPECT_EQ(handler.outputs.size(), 0);
}

TEST_F( ((( fixture_name ))), SendThroughSbpState) {
  auto info = get_test_msg_info();
  sbp_state_t state;
  sbp_state_init(&state);

  auto writer = info.get_frame_writer();
  sbp_state_set_io_context(&state, &writer);

  EXPECT_EQ( (((t.fn_prefix)))_send(&state, info.sender_id, &info.test_msg,
                                   &Writer::write_c),
            SBP_OK);
  EXPECT_EQ(writer.len(), info.frame_len);
  EXPECT_EQ(memcmp(writer.data(), &info.encoded_frame[0], writer.len()), 0);
}

TEST_F( ((( fixture_name ))), SendWrappedThroughSbpState) {
  auto info = get_test_msg_info();
  sbp_state_t state;
  sbp_state_init(&state);

  auto writer = info.get_frame_writer();
  sbp_state_set_io_context(&state, &writer);

  EXPECT_EQ(sbp_message_send(&state, (((t.enum_value))), info.sender_id,
                             &info.test_msg_wrapped, &Writer::write_c),
            SBP_OK);
  EXPECT_EQ(writer.len(), info.frame_len);
  EXPECT_EQ(memcmp(writer.data(), info.encoded_frame, info.frame_len), 0);
}

TEST_F( ((( fixture_name ))), SendThroughSbpStateUnderflow) {
  auto info = get_test_msg_info();

  for (uint32_t i = 0; i < info.frame_len; i++) {
    sbp_state_t state;
    sbp_state_init(&state);

    auto writer = info.get_frame_writer(i);
    sbp_state_set_io_context(&state, &writer);

    EXPECT_NE(sbp_message_send(&state, ((( t.enum_value ))), info.sender_id, &info.test_msg_wrapped, &Writer::write_c), SBP_OK);
    EXPECT_EQ(writer.len(), i);
    EXPECT_EQ(memcmp(writer.data(), info.encoded_frame, i), 0);
  }
}

TEST_F( ((( fixture_name ))), DISABLED_SlowWrite) {
  auto info = get_test_msg_info();
  sbp_state_t state;
  sbp_state_init(&state);

  auto writer= info.get_slow_frame_writer();
  sbp_state_set_io_context(&state, &writer);

  EXPECT_EQ(sbp_message_send(&state, (((t.enum_value))), info.sender_id, &info.test_msg_wrapped, &SlowWriter::write_c), SBP_OK);
  EXPECT_EQ(writer.len(), info.frame_len);
  EXPECT_EQ(memcmp(writer.data(), info.encoded_frame, info.frame_len), 0);
}

((* if t.c_decoded_fields|length > 0 *))
TEST_F( ((( fixture_name ))), Comparison) {
  auto info = get_test_msg_info();

  ((*- macro compare_field(root_path, path, value) *))
  ((*- if value is array_type *))
  ((*- for ff in value *))
  ((( compare_field(root_path, path ~ '[' ~ loop.index0 ~ ']', ff) )))
  ((*- endfor *))
  ((*- elif value is dict_type and not value.handle_as *))
  ((*- for k in value|sorted *))(((compare_field(root_path, path + "." + k, value[k]))))((*- endfor *))
  ((*- else *))
  {
    (((t.struct_name))) lesser = info.test_msg;
    (((t.struct_name))) greater = info.test_msg;
    make_lesser_greater(lesser.(((path))), greater.(((path))));
    comparison_tests(lesser, greater);
  }
  ((*- endif *))
  ((*- endmacro *))

  ((*- if t.c_decoded_fields *))
  ((*- for f in t.c_decoded_fieldskeys *))(((compare_field("", "" ~ f, t.c_decoded_fields[f]))))((*- endfor *))
  ((*- endif *))
}
((*- endif *))

TEST_F( ((( fixture_name ))), CppTraitsProperties) {
  // EXPECT_EQ(sbp::MessageTraits<(((t.struct_name)))>::id, (((t.enum_value))));
  EXPECT_STREQ(sbp::MessageTraits<(((t.struct_name)))>::name, "(((t.canonical_name)))");
}

TEST_F( ((( fixture_name ))), CppTraitsFromSbpMsgT) {
  auto info = get_test_msg_info();

  const sbp_msg_t &const_sbp_msg_t = info.test_msg_wrapped;
  sbp_msg_t &non_const_sbp_msg_t = info.test_msg_wrapped;

  const (((t.struct_name))) &const_unwrapped =
      sbp::MessageTraits<(((t.struct_name)))>::get(const_sbp_msg_t);
  (((t.struct_name))) &non_const_unwrapped =
      sbp::MessageTraits<(((t.struct_name)))>::get(non_const_sbp_msg_t);

  EXPECT_EQ((const void *)&const_sbp_msg_t, (const void *)&const_unwrapped);
  EXPECT_EQ((void *)&non_const_sbp_msg_t, (void *)&non_const_unwrapped);
}

TEST_F( ((( fixture_name ))), CppTraitsToSbpMsgT) {
  auto info = get_test_msg_info();

  sbp_msg_t msg1 =
      sbp::MessageTraits<(((t.struct_name)))>::to_sbp_msg(info.test_msg);
  EXPECT_EQ(msg1.(((t.name_in_sbp_msg_t))), info.test_msg);

  sbp_msg_t msg2;
  sbp::MessageTraits<(((t.struct_name)))>::to_sbp_msg(info.test_msg, &msg2);
  EXPECT_EQ(msg2.(((t.name_in_sbp_msg_t))), info.test_msg);
}

TEST_F( ((( fixture_name ))), CppTraitsEncodedLen) {
  auto info = get_test_msg_info();
  EXPECT_EQ(sbp::MessageTraits<(((t.struct_name)))>::encoded_len(info.test_msg),
            info.payload_len);
}

TEST_F( ((( fixture_name ))), CppTraitsSendThroughSbpState) {
  auto info = get_test_msg_info();
  sbp_state_t state;
  sbp_state_init(&state);

  auto writer = info.get_frame_writer();
  sbp_state_set_io_context(&state, &writer);

  EXPECT_EQ(sbp::MessageTraits<(((t.struct_name)))>::send(
                &state, info.sender_id, info.test_msg, &Writer::write_c),
            SBP_OK);
  EXPECT_EQ(writer.len(), info.frame_len);
  EXPECT_EQ(memcmp(writer.data(), &info.encoded_frame[0], writer.len()), 0);
}

TEST_F( ((( fixture_name ))), CppTraitsEncodeToBuf) {
  auto info = get_test_msg_info();
  uint8_t buf[(((t.payload_len_for_encoding_buf)))];
  uint8_t n_written;

  EXPECT_EQ(sbp::MessageTraits<(((t.struct_name)))>::encode(
                &buf[0], sizeof(buf), &n_written, info.test_msg),
            SBP_OK);
  EXPECT_EQ(n_written, (((t.sbp.length))));
  EXPECT_EQ(memcmp(&buf[0], info.encoded_payload, (((t.sbp.length)))), 0);
}

TEST_F( ((( fixture_name ))), CppTraitsDecodeFromBuf) {
  auto info = get_test_msg_info();
  (((t.struct_name))) msg{};
  uint8_t n_read;

  EXPECT_EQ(sbp::MessageTraits<(((t.struct_name)))>::decode(
                &info.encoded_payload[0], info.payload_len, &n_read, &msg),
            SBP_OK);
  EXPECT_EQ(n_read, (((t.sbp.length))));
  EXPECT_EQ(msg, info.test_msg);
}

TEST_F( ((( fixture_name ))), ReceiveThroughMessageHandler) {
  auto info = get_test_msg_info();
  auto reader = info.get_frame_reader();

  sbp::State state{};
  state.set_reader(&reader);

  CppHandler handler{&state};

  while (reader.remaining() > 0) {
    EXPECT_GE(state.process(), SBP_OK);
  }

  EXPECT_EQ(handler.outputs.size(), 1);
  EXPECT_EQ(handler.outputs[0].sender_id, info.sender_id);
  EXPECT_EQ(handler.outputs[0].msg, info.test_msg);
}

TEST_F( ((( fixture_name ))), ProcessSbpMsgTThroughMessageHandler) {
  auto info = get_test_msg_info();
  sbp::State state{};
  CppHandler handler(&state);

  state.process_message(info.sender_id, (((t.enum_value))), &info.test_msg_wrapped);

  EXPECT_EQ(handler.outputs.size(), 1);
  EXPECT_EQ(handler.outputs[0].sender_id, info.sender_id);
  EXPECT_EQ(handler.outputs[0].msg, info.test_msg);
}

TEST_F( ((( fixture_name ))), SendThroughCppState) {
  auto info = get_test_msg_info();
  auto writer = info.get_frame_writer();

  sbp::State state{};
  state.set_writer(&writer);

  EXPECT_EQ(state.send_message(info.sender_id, info.test_msg), SBP_OK);
  EXPECT_EQ(writer.len(), info.frame_len);
  EXPECT_EQ(memcmp(writer.data(), info.encoded_frame, info.frame_len), 0);
}

TEST_F( ((( fixture_name ))), SendWrappedSbpMsgTThroughCppState) {
  auto info = get_test_msg_info();
  auto writer = info.get_frame_writer();

  sbp::State state{};
  state.set_writer(&writer);

  EXPECT_EQ(
      state.send_message(info.sender_id, (((t.enum_value))), info.test_msg_wrapped),
      SBP_OK);
  EXPECT_EQ(writer.len(), info.frame_len);
  EXPECT_EQ(memcmp(writer.data(), info.encoded_frame, info.frame_len), 0);
}

((* for f in t.c_decoded_fieldskeys *))
((* if t.c_decoded_fields[f].handle_as and t.c_decoded_fields[f].handle_as == "encoded-string" *))
((* set s = t.c_decoded_fields[f] *))
((* set is_simple_string = True *))
((* if s.sections *))((* set is_simple_string = False *))((* endif *))
class ((( fixture_name )))_((( f ))) : public ((( fixture_name ))) {};

TEST_F( ((( fixture_name)))_((( f ))), StringInit) {
  ((( t.struct_name ))) t{};
  ((( s.fn_prefix )))_init(&t);
 EXPECT_TRUE( ((( s.fn_prefix )))_valid(&t) );
}

 TEST_F( ((( fixture_name)))_((( f ))), IsValid) {
  ((( t.struct_name ))) t{};
 ((( assign_string('t', s) )))
  EXPECT_TRUE( ((( s.fn_prefix)))_valid(&t) );
 }

TEST_F( ((( fixture_name)))_((( f))), SpaceRemaining) {
  ((( t.struct_name ))) t{};
  size_t empty_space_remaining = ((( s.fn_prefix )))_space_remaining(&t);
  ((( assign_string('t', s) )))
  size_t assigned_space_remaining = ((( s.fn_prefix )))_space_remaining(&t);
  EXPECT_LT(assigned_space_remaining, empty_space_remaining);
}

((* if is_simple_string *))
TEST_F( ((( fixture_name)))_((( f ))), SetRaw) {
  auto info = get_test_msg_info();
  ((( t.struct_name ))) t{};

  size_t nwritten{};

  EXPECT_TRUE( (((s.fn_prefix)))_set_raw(&t, info.test_msg.((( f ))).data,
              ((( s.fn_prefix )))_strlen(&info.test_msg), false, &nwritten));
  EXPECT_EQ( (((s.fn_prefix)))_encoded_len(&info.test_msg), (((s.fn_prefix)))_encoded_len(&t));
}

TEST_F( ((( fixture_name)))_((( f ))), Set) {
  ((( t.struct_name ))) t{};
  size_t nwritten {};
  const char *text = "(((s.text)))";

  EXPECT_TRUE( (((s.fn_prefix)))_set(&t, text, false, &nwritten));
  EXPECT_EQ(nwritten, strlen(text));
  EXPECT_STREQ( (((s.fn_prefix)))_get(&t), text);
}

TEST_F( ((( fixture_name)))_(((f))), Printf) {
  ((( t.struct_name ))) t{};
  size_t nwritten {};
  const char *text = "(((s.text)))";

  EXPECT_TRUE( (((s.fn_prefix)))_printf(&t, false, &nwritten, "%s", text));
  EXPECT_EQ(nwritten, strlen(text));
  EXPECT_STREQ( (((s.fn_prefix)))_get(&t), text);
}

TEST_F( ((( fixture_name)))_(((f))), Vprintf) {
  ((( t.struct_name ))) t{};
  size_t nwritten {};
  const char *text = "(((s.text)))";

  auto lambda = [&t, &nwritten](const char *format, ...) -> bool {
    va_list ap;
    va_start(ap, format);
    bool ret =  (((s.fn_prefix)))_vprintf(&t, false, &nwritten, format, ap);
    va_end(ap);
    return ret;
  };

  EXPECT_TRUE(lambda("%s", text));
  EXPECT_EQ(nwritten, strlen(text));
  EXPECT_STREQ( (((s.fn_prefix)))_get(&t), text);
}

TEST_F( ((( fixture_name)))_(((f))), AppendPrintf) {
  ((( t.struct_name))) t{};
  size_t nwritten{};
  char part1[] = "(((s.text)))";
  char part2[] = "(((s.text)))";

  part1[1] = 0;

  EXPECT_TRUE( (((s.fn_prefix)))_printf(&t, false, &nwritten, "%s", &part1[0]));
  EXPECT_EQ(nwritten, 1);
  EXPECT_STREQ( (((s.fn_prefix)))_get(&t), &part1[0]);

  EXPECT_TRUE( (((s.fn_prefix)))_append_printf(&t, false, &nwritten, "%s", &part2[1]));
  EXPECT_EQ(nwritten, strlen(&part2[1]));
  EXPECT_STREQ( (((s.fn_prefix)))_get(&t), "(((s.text)))");
}

TEST_F( ((( fixture_name)))_(((f))), AppendVprintf) {
  ((( t.struct_name))) t{};
  size_t nwritten{};
  char part1[] = "(((s.text)))";
  char part2[] = "(((s.text)))";

  part1[1] = 0;

  EXPECT_TRUE( (((s.fn_prefix)))_printf(&t, false, &nwritten, "%s", &part1[0]));
  EXPECT_EQ(nwritten, 1);
  EXPECT_STREQ( (((s.fn_prefix)))_get(&t), &part1[0]);

  auto lambda = [&t, &nwritten](const char *format, ...) -> bool {
    va_list ap;
    va_start(ap, format);
    bool ret = (((s.fn_prefix)))_append_vprintf(&t, false, &nwritten, format, ap);
    va_end(ap);
    return ret;
  };

  EXPECT_TRUE(lambda("%s", &part2[1]));
  EXPECT_EQ(nwritten, strlen(&part2[1]));
  EXPECT_STREQ( (((s.fn_prefix)))_get(&t), "(((s.text)))");
}

((* else *))
TEST_F( ((( fixture_name)))_(((f))), CountSections) {
  auto info = get_test_msg_info();
  EXPECT_EQ( (((s.fn_prefix)))_count_sections(&info.test_msg), ((( s.sections|length ))) );
}

TEST_F( ((( fixture_name)))_(((f))), AddSectionPrintf) {
  ((( t.struct_name))) t{};

  ((* for i in s.sections *))
  EXPECT_TRUE( (((s.fn_prefix)))_add_section_printf(&t, "%s", "(((i)))"));
  ((* endfor *))

  EXPECT_EQ( (((s.fn_prefix)))_count_sections(&t), (((s.sections|length))));
  ((* for i in s.sections *))
  EXPECT_STREQ( (((s.fn_prefix)))_get_section(&t, (((loop.index0)))), "(((i)))");
  ((* endfor *))
}

TEST_F( ((( fixture_name)))_(((f))), AddSectionVprintf) {
  ((( t.struct_name))) t{};

  ((* for i in s.sections *))
  {
    auto lambda = [&t](const char *format, ...) -> bool {
      va_list ap;
      va_start(ap, format);
      bool ret = (((s.fn_prefix)))_add_section_vprintf(&t, format, ap);
      va_end(ap);
      return ret;
    };
    EXPECT_TRUE(lambda("%s", "(((i)))"));
  }
  ((* endfor *))

  EXPECT_EQ( (((s.fn_prefix)))_count_sections(&t), (((s.sections|length))));
  ((* for i in s.sections *))
  EXPECT_STREQ( (((s.fn_prefix)))_get_section(&t, (((loop.index0)))), "(((i)))");
  ((* endfor *))
}

TEST_F( ((( fixture_name)))_(((f))), Append) {
  ((( t.struct_name))) t{};

  char part1[] = "(((s.sections[0])))";
  char part2[] = "(((s.sections[0])))";
  part1[1] = 0;

  EXPECT_TRUE( (((s.fn_prefix)))_append(&t, part1));
  EXPECT_STREQ( (((s.fn_prefix)))_get_section(&t, 0), part1);
  EXPECT_TRUE( (((s.fn_prefix)))_append(&t, &part2[1]));
  EXPECT_STREQ( (((s.fn_prefix)))_get_section(&t, 0), "(((s.sections[0])))");
}

TEST_F( (((fixture_name)))_(((f))), AppendPrintf) {
  (((t.struct_name))) t{};

  char part1[] = "(((s.sections[0])))";
  char part2[] = "(((s.sections[0])))";
  part1[1] = 0;

  EXPECT_TRUE( (((s.fn_prefix)))_append_printf(&t, "%s", part1));
  EXPECT_STREQ( (((s.fn_prefix)))_get_section(&t, 0), part1);
  EXPECT_TRUE( (((s.fn_prefix)))_append_printf(&t, "%s", &part2[1]));
  EXPECT_STREQ( (((s.fn_prefix)))_get_section(&t, 0), "(((s.sections[0])))");
}

TEST_F( (((fixture_name)))_(((f))), AppendVprintf) {
  (((t.struct_name))) t{};

  char part1[] = "(((s.sections[0])))";
  char part2[] = "(((s.sections[0])))";
  part1[1] = 0;

  {
    auto lambda = [&t](const char *format, ...) -> bool {
      va_list ap;
      va_start(ap, format);
      bool ret = (((s.fn_prefix)))_append_vprintf(&t, format, ap);
      va_end(ap);
      return ret;
    };
    EXPECT_TRUE(lambda("%s", part1));
  }
  EXPECT_STREQ( (((s.fn_prefix)))_get_section(&t, 0), part1);
  {
    auto lambda = [&t](const char *format, ...) -> bool {
      va_list ap;
      va_start(ap, format);
      bool ret = (((s.fn_prefix)))_append_vprintf(&t, format, ap);
      va_end(ap);
      return ret;
    };
    EXPECT_TRUE(lambda("%s", &part2[1]));
  }
  EXPECT_STREQ( (((s.fn_prefix)))_get_section(&t, 0), "(((s.sections[0])))");
}

TEST_F( (((fixture_name)))_(((f))), SectionStrlen) {
  auto info = get_test_msg_info();

  ((* for i in s.sections *))
  EXPECT_EQ( (((s.fn_prefix)))_section_strlen(&info.test_msg, (((loop.index0)))), strlen("(((i)))"));
  ((* endfor *))
}

((* endif *))

((* endif *))
((* endfor *))

((* endfor *))

((* for t in s.test_structs *))
((*- set fixture_name = "Test_Struct_" ~ s.suite_name ~ loop.index0 *))
 class ((( fixture_name ))) : public ::testing::Test {
 public:
  (((fixture_name))) () {
    ((*- for f in t.c_decoded_fieldskeys *))(((assign_value("test_struct_", "test_struct_." + f, t.c_decoded_fields[f]))))((*- endfor *))
  }

  struct TestStructInfo {
    (((t.struct_name))) test_struct;
    const uint8_t *encoded_data;
    uint32_t encoded_len;
  };

  TestStructInfo get_test_struct_info() const noexcept {
    TestStructInfo info;
    memcpy(&info.test_struct, &test_struct_, sizeof(test_struct_));
    info.encoded_data = encoded_data_;
    info.encoded_len = sizeof(encoded_data_);
    return info;
  }

 private:
  ((( t.struct_name ))) test_struct_{};
  uint8_t encoded_data_[(((t.encoded_len)))] = {
 ((*- for p in t.encoded_data_as_byte_array *))(((p))),((*- endfor *))
 };
};

 TEST_F( (((fixture_name))), EncodedLen) {
  auto info = get_test_struct_info();
 EXPECT_EQ( (((t.fn_prefix)))_encoded_len(&info.test_struct), (((t.encoded_len))));
 }

 TEST_F( (((fixture_name))), FreeEncode) {
  auto info = get_test_struct_info();
  uint8_t nwritten = 0;
  uint8_t buf[(((t.encoded_len_for_buf)))];
  EXPECT_EQ( (((t.fn_prefix)))_encode(&buf[0], sizeof(buf), &nwritten, &info.test_struct), SBP_OK);
  EXPECT_EQ(nwritten, (((t.encoded_len))));
  EXPECT_EQ(memcmp(&buf[0], info.encoded_data, nwritten), 0);
 }

 TEST_F( (((fixture_name))), FreeEncodeWithoutNwritten) {
  auto info = get_test_struct_info();
  uint8_t buf[(((t.encoded_len_for_buf)))];
  EXPECT_EQ( (((t.fn_prefix)))_encode(&buf[0], sizeof(buf), nullptr, &info.test_struct), SBP_OK);
  EXPECT_EQ(memcmp(&buf[0], info.encoded_data, (((t.encoded_len)))), 0);
 }

 TEST_F( (((fixture_name))), FreeEncodeUnderflow) {
 auto info = get_test_struct_info();
 uint8_t buf[(((t.encoded_len)))];
 for (uint8_t i = 0; i < (((t.encoded_len))); i++) {
  EXPECT_EQ( (((t.fn_prefix)))_encode(&buf[0], i, nullptr, &info.test_struct), SBP_ENCODE_ERROR);
}
 }

 TEST_F( (((fixture_name))), FreeDecode) {
  auto info = get_test_struct_info();
 uint8_t nread = 0;
 (((t.struct_name))) t{};
 EXPECT_EQ( (((t.fn_prefix)))_decode(info.encoded_data, (((t.encoded_len))), &nread, &t), SBP_OK);
 EXPECT_EQ(nread, info.encoded_len);
 EXPECT_EQ( (((t.fn_prefix)))_cmp(&t, &info.test_struct), 0);
 }
  
 TEST_F( (((fixture_name))), FreeDecodeWithoutNread) {
  auto info = get_test_struct_info();
 (((t.struct_name))) t{};
 EXPECT_EQ( (((t.fn_prefix)))_decode(info.encoded_data, (((t.encoded_len))), nullptr, &t), SBP_OK);
 EXPECT_EQ( (((t.fn_prefix)))_cmp(&t, &info.test_struct), 0);
 }
  
TEST_F( (((fixture_name))), FreeDecodeUnderflow) {
  auto info = get_test_struct_info();
  (((t.struct_name))) t{};

for (uint8_t i = 0; i < (((t.encoded_len))); i++) {
  EXPECT_EQ( (((t.fn_prefix)))_decode(info.encoded_data, i, nullptr, &t), SBP_DECODE_ERROR);
 }
}

((* endfor *))

}
