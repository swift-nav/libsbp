#!/usr/bin/perl -w
#
# Copyright (C) 2015-2023 Swift Navigation Inc.
# Contact: https://support.swiftnav.com
#
# This source is subject to the license found in the file 'LICENSE' which must
# be be distributed together with this source. All other rights reserved.
#
# THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND,
# EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR PURPOSE.
#
# Test cases automatically generated from (((s.src_filename)))
# with generate.py.  Do not modify by hand!

use strict;

BEGIN {
    # add grandparent directory to include path
    use Cwd qw(realpath);
    use File::Basename;
    unshift @INC, realpath(dirname($0))."/../../";
}

use KaitaiSbp::Sbp;
use KaitaiSbp::ParseUtils;
use IO::KaitaiStruct;
use Test::More;
use JSON::PP;
use MIME::Base64;


((*- macro test_field(name, value) *))
  ((*- if name == "payload" *))
    is($msg->{'(((name)))'}, "(((value)))", "(((name)))");
  ((*- else *))
    is($msg->{'(((name)))'}, (((value))), "(((name)))");
  ((*- endif *))
((*- endmacro *))

((*- macro test_fieldskeys(name, value) *))
  ((*- if value is string_type *))
    is($msg->(((name)))(), "(((value|str_escape)))", "(((name)))");
  ((*- elif value is dict_type or value is array_type *))
    is($json->encode($msg->(((name)))()), $json->encode($json->decode(q{(((value|snake_case_keys|encode_json)))})), "(((name)))");
  ((*- else *))
    is($msg->(((name)))(), (((value))), "(((name)))");
  ((*- endif *))
((*- endmacro *))


((*- for t in s.tests *))
sub test_(((s.suite_name|snake_case)))_(((loop.index)))() {
    my $buf = decode_base64("(((t.raw_packet)))");
    my $stream = IO::KaitaiStruct::Stream->new($buf);
    my $msg = ParseUtils::get_flattened_msg(Sbp::SbpMessage->new($stream));

  ((*- for k in t.sbp *))
    (((test_field( (((k))), (((t.sbp[k]))) ))))
  ((*- endfor *))

    my $json = JSON::PP->new->convert_blessed->canonical;

  ((*- for f in t.fieldskeys *))
    (((test_fieldskeys( (((f|snake_case))), (((t.fields[f]))) ))))
  ((*- endfor *))

    is($json->encode($msg), $json->encode($json->decode(q{(((t.raw_json|decode_json|snake_case_keys|encode_json)))})), "raw_json");
}
((*- endfor *))

((*- for t in s.tests *))
test_(((s.suite_name|snake_case)))_(((loop.index)))();
((*- endfor *))

done_testing();
