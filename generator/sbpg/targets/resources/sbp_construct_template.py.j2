#!/usr/bin/env python
# Copyright (C) 2015 Swift Navigation Inc.
# Contact: Fergus Noble <fergus@swiftnav.com>
#
# This source is subject to the license found in the file 'LICENSE' which must
# be be distributed together with this source. All other rights reserved.
#
# THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND,
# EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR PURPOSE.

from construct import *
from sbp import SBP
from sbp.utils import fmt_repr

((*- for i in include *))
from (((module_path))).(((i))) import *
((*- endfor *))

# Automatically generated from piksi/yaml/(((filepath)))
# with generate.py at (((timestamp))). Please do not hand edit!

((* for m in msgs *))
  ((*- if m.static *))
    ((*- if not m.sbp_id *))
class ((( m.identifier )))(object):
  """(((m.identifier))).
  ((* if m.desc *))
  (((m.desc)))
  ((*- endif *))
  ((* if m.fields *))
  Parameters
  ----------
  ((*- for f in m.fields *))
  (((f.identifier))) : (((f.type_id|pydoc)))
  ((*- if f.desc *))
    (((f.desc)))
  ((*- endif *))
  ((*- endfor *))
  ((*- endif *))

  """
  ((*- if m.fields *))
  _parser = Struct("(((m.identifier )))",
                   ((*- for f in m.fields *))
                   ((( f | construct ))),
                   ((*- endfor *)))
  ((*- endif *))

  def __init__(self, payload):
      ((*- if m.fields *))
    self.from_binary(payload)
      ((*- else *))
    self.payload = payload
      ((*- endif *))

  def __repr__(self):
    return fmt_repr(self)
  ((* if m.fields *))
  def from_binary(self, d):
    p = ((( m.identifier )))._parser.parse(d)
    self.__dict__.update(dict(p.viewitems()))

  def to_binary(self):
    return ((( m.identifier ))).build(self.__dict__)
  ((*- endif *))
    ((* endif *))
  ((*- endif *))
((*- endfor *))

((*- for m in msgs *))
  ((*- if m.static *))
    ((*- if m.sbp_id *))
SBP_(((m.identifier))) = ((('0x%04X'|format(m.sbp_id))))
class ((( m.identifier | classnameify )))(SBP):
  """SBP class for message (((m.identifier))) ((('(0x%04X)'|format(m.sbp_id)))).
  ((* if m.desc *))
  (((m.desc)))
  ((*- endif *))

  ((*- if m.fields*))

  Parameters
  ----------
  ((*- for f in m.fields *))
  (((f.identifier))) : (((f.type_id|pydoc)))
  ((*- if f.desc *))
    (((f.desc)))
  ((*- endif *))
  ((*- endfor *))
  ((*- endif *))

  """
  ((*- if m.fields *))
  _parser = Struct("(((m.identifier | classnameify )))",
                   ((*- for f in m.fields *))
                   ((( f | construct ))),
                   ((*- endfor *)))
  ((*- endif *))

  def __init__(self, sbp):
    self.__dict__.update(sbp.__dict__)
      ((*- if m.fields *))
    self.from_binary(sbp.payload)
      ((*- else *))
    self.payload = sbp.payload
      ((*- endif *))

  def __repr__(self):
    return fmt_repr(self)
 ((* if m.fields *))
  def from_binary(self, d):
    p = ((( m.identifier | classnameify )))._parser.parse(d)
    self.__dict__.update(dict(p.viewitems()))

  def to_binary(self):
    return ((( m.identifier | classnameify ))).build(self.__dict__)
    ((*- endif *))
    ((* endif *))
  ((*- else *))
  ((*- endif *))

((*- endfor *))

msg_classes = {
((*- for m in msgs *))
  ((*- if m.sbp_id *))
  ((('0x%04X'|format(m.sbp_id)))): ((( m.identifier | classnameify ))),
  ((*- endif*))
((*- endfor *))
}
