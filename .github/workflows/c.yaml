name: C
on:
  workflow_dispatch:
  push:
    branches:
      - master
    tags:
      - "*"
  pull_request:
    paths:
      - "c/**"
      - .github/workflows/c.yaml
jobs:
  coverage:
    name: Code Coverage
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Setup
        run: |
          sudo apt-get -qq update
          sudo apt-get -qq install lcov libeigen3-dev libserialport-dev

      - name: Run tests
        run: make test-c
        env:
          CMAKEFLAGS: -DCODE_COVERAGE=ON -DCMAKE_BUILD_TYPE=Debug -DBUILD_EXAMPLES=true

      - name: Build examples
        run: make -C c/build examples

      - name: Upload coverage to codecov.io
        run: |
          bash <(curl -s https://codecov.io/bash) -s c/build || echo "Codecov did not collect coverage reports";


  ubuntu-lts:
    strategy:
      matrix:
        build_type: [ "Debug", "Release" ]
        compiler: [
          { c: "gcc-6", cxx: "g++-6", package: "gcc-6 g++-6" },
          { c: "clang-6.0", cxx: "clang++-6.0", package: "clang-6.0" }
        ]
        build_shared_libraries: [ true, false ]
        exclude: [
          { build_type: "Debug", compiler: { c: "gcc-6", cxx: "g++-6" }, build_shared_libraries: false }
        ]
    name: "Ubuntu 18.04 (Build: ${{ matrix.build_type }}, Compilers: ${{ matrix.compiler.c }}/${{ matrix.compiler.cxx }}, Shared Library: ${{ matrix.build_shared_libraries }})"
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Setup
        run: |
          sudo apt-get -qq update
          sudo apt-get -qq install libeigen3-dev libserialport-dev ${{ matrix.compiler.package }}

      - name: Configure
        run: |
          cmake -S c -B build \
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
            -DCMAKE_C_COMPILER=${{ matrix.compiler.c }} \
            -DCMAKE_CXX_COMPILER=${{ matrix.compiler.cxx }} \
            -DBUILD_SHARED_LIBS=${{ matrix.build_shared_libraries }} \
            -DCMAKE_INSTALL_PREFIX="${{ github.workspace }}/install" \
            -DINSTALL_GTEST=false \
            -DBUILD_EXAMPLES=true

      - name: Build
        run: cmake --build build

      - name: Example
        run: cmake --build build --target examples

      - name: Test
        run: cmake --build build --target do-all-tests

      - name: Install
        run: cmake --build build --target install

      - name: Test Package
        run: |
          cmake -S c/test_package -B c/test_package/build -DCMAKE_PREFIX_PATH="${{ github.workspace }}/install"
          cmake --build c/test_package/build


  macos:
    name: macOS Catalina
    runs-on: macos-10.15
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Configure
        run: |
          cmake -S c -B build \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_C_COMPILER=clang \
            -DCMAKE_CXX_COMPILER=clang++ \
            -DCMAKE_INSTALL_PREFIX="${{ github.workspace }}/install" \
            -DINSTALL_GTEST=false

      - name: Build
        run: cmake --build build

      - name: Test
        run: cmake --build build --target do-all-tests

      - name: Install
        run: cmake --build build --target install

      - name: Test Package
        run: |
          cmake -S c/test_package -B c/test_package/build -DCMAKE_PREFIX_PATH="${{ github.workspace }}/install"
          cmake --build c/test_package/build


  big-endian:
    name: Test Big Endian
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Setup
        run: |
          sudo apt-get -qq update
          sudo apt-get -qq install gcc-multilib-mips-linux-gnu gcc-mips-linux-gnu qemu-user g++-mips-linux-gnu

      - name: Run big endian tests
        run: make test-c-v4
        env:
          CC: mips-linux-gnu-gcc
          CXX: mips-linux-gnu-g++

          CMAKEFLAGS: -DCMAKE_EXE_LINKER_FLAGS_RELEASE="-static" -Dgtest_disable_pthreads=ON


  windows-2019:
    strategy:
      matrix:
        generator: [ "MinGW Makefiles", "Visual Studio 16 2019" ]
        build_shared_libraries: [ true, false ]
    name: "Windows 2019 (Generator: ${{ matrix.generator }}, Shared Library: ${{ matrix.build_shared_libraries }})"
    runs-on: windows-2019
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Configure
        run: |
          cmake -G "${{ matrix.generator }}" -S c -B build `
            -DCMAKE_BUILD_TYPE=Release `
            -DBUILD_SHARED_LIBS=${{ matrix.build_shared_libraries }} `
            -DCMAKE_INSTALL_PREFIX="${{ github.workspace }}/install" `
            -Dgtest_force_shared_crt=true `
            -DINSTALL_GTEST=false

      - name: Build
        run: cmake --build build

      - name: Build Test
        run: cmake --build build --target build-all-tests

      - name: Run Test
        run: cmake --build build --target do-all-tests
        if: ${{ !matrix.build_shared_libraries }}

      - name: Install
        run: cmake --build build --target install

      - name: Test Package
        run: |
          cmake -G "${{ matrix.generator }}" -S c/test_package -B c/test_package/build -DCMAKE_PREFIX_PATH="${{ github.workspace }}/install"
          cmake --build c/test_package/build

