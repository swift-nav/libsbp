// Code generated by kaitai-struct-compiler from a .ksy source file. DO NOT EDIT.

import "github.com/kaitai-io/kaitai_struct_go_runtime/kaitai"

type Ssr struct {
	_io *kaitai.Stream
	_root *Ssr
	_parent interface{}
}
func NewSsr() *Ssr {
	return &Ssr{
	}
}

func (this *Ssr) Read(io *kaitai.Stream, parent interface{}, root *Ssr) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	return err
}

/**
 * Defines the grid for MSG_SSR_GRIDDED_CORRECTION messages. Also includes
 * an RLE encoded validity list.
 */
type Ssr_GridDefinitionHeaderDepA struct {
	RegionSizeInverse uint8
	AreaWidth uint16
	LatNwCornerEnc uint16
	LonNwCornerEnc uint16
	NumMsgs uint8
	SeqNum uint8
	_io *kaitai.Stream
	_root *Ssr
	_parent *Ssr_MsgSsrGridDefinitionDepA
}
func NewSsr_GridDefinitionHeaderDepA() *Ssr_GridDefinitionHeaderDepA {
	return &Ssr_GridDefinitionHeaderDepA{
	}
}

func (this *Ssr_GridDefinitionHeaderDepA) Read(io *kaitai.Stream, parent *Ssr_MsgSsrGridDefinitionDepA, root *Ssr) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp1, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.RegionSizeInverse = tmp1
	tmp2, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.AreaWidth = uint16(tmp2)
	tmp3, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.LatNwCornerEnc = uint16(tmp3)
	tmp4, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.LonNwCornerEnc = uint16(tmp4)
	tmp5, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.NumMsgs = tmp5
	tmp6, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.SeqNum = tmp6
	return err
}

/**
 * region_size (deg) = 10 / region_size_inverse 0 is an invalid value.
 */

/**
 * grid height (deg) = grid width (deg) = area_width / region_size 0 is
 * an invalid value.
 */

/**
 * North-West corner latitude (deg) = region_size * lat_nw_corner_enc -
 * 90
 */

/**
 * North-West corner longitude (deg) = region_size * lon_nw_corner_enc
 * - 180
 */

/**
 * Number of messages in the dataset
 */

/**
 * Position of this message in the dataset
 */

/**
 * STEC residual for the given satellite at the grid point.
 */
type Ssr_StecResidualNoStd struct {
	SvId *Gnss_SvId
	Residual int16
	_io *kaitai.Stream
	_root *Ssr
	_parent *Ssr_MsgSsrGriddedCorrectionNoStdDepA
}
func NewSsr_StecResidualNoStd() *Ssr_StecResidualNoStd {
	return &Ssr_StecResidualNoStd{
	}
}

func (this *Ssr_StecResidualNoStd) Read(io *kaitai.Stream, parent *Ssr_MsgSsrGriddedCorrectionNoStdDepA, root *Ssr) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp7 := NewGnss_SvId()
	err = tmp7.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.SvId = tmp7
	tmp8, err := this._io.ReadS2le()
	if err != nil {
		return err
	}
	this.Residual = int16(tmp8)
	return err
}

/**
 * space vehicle identifier
 */

/**
 * STEC residual
 */

/**
 * Troposphere vertical delays at the grid point.
 */
type Ssr_TroposphericDelayCorrectionNoStd struct {
	Hydro int16
	Wet int8
	_io *kaitai.Stream
	_root *Ssr
	_parent *Ssr_MsgSsrGriddedCorrectionNoStdDepA
}
func NewSsr_TroposphericDelayCorrectionNoStd() *Ssr_TroposphericDelayCorrectionNoStd {
	return &Ssr_TroposphericDelayCorrectionNoStd{
	}
}

func (this *Ssr_TroposphericDelayCorrectionNoStd) Read(io *kaitai.Stream, parent *Ssr_MsgSsrGriddedCorrectionNoStdDepA, root *Ssr) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp9, err := this._io.ReadS2le()
	if err != nil {
		return err
	}
	this.Hydro = int16(tmp9)
	tmp10, err := this._io.ReadS1()
	if err != nil {
		return err
	}
	this.Wet = tmp10
	return err
}

/**
 * Hydrostatic vertical delay
 */

/**
 * Wet vertical delay
 */

/**
 * Deprecated.
 */
type Ssr_MsgSsrStecCorrectionDep struct {
	Header *Ssr_StecHeader
	StecSatList []*Ssr_StecSatElement
	_io *kaitai.Stream
	_root *Ssr
	_parent *Sbp_SbpMessage
}
func NewSsr_MsgSsrStecCorrectionDep() *Ssr_MsgSsrStecCorrectionDep {
	return &Ssr_MsgSsrStecCorrectionDep{
	}
}

func (this *Ssr_MsgSsrStecCorrectionDep) Read(io *kaitai.Stream, parent *Sbp_SbpMessage, root *Ssr) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp11 := NewSsr_StecHeader()
	err = tmp11.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.Header = tmp11
	for i := 1;; i++ {
		tmp12, err := this._io.EOF()
		if err != nil {
			return err
		}
		if tmp12 {
			break
		}
		tmp13 := NewSsr_StecSatElement()
		err = tmp13.Read(this._io, this, this._root)
		if err != nil {
			return err
		}
		this.StecSatList = append(this.StecSatList, tmp13)
	}
	return err
}

/**
 * Header of a STEC polynomial coefficient message.
 */

/**
 * Array of STEC polynomial coefficients for each space vehicle.
 */

/**
 * STEC polynomial and bounds for the given satellite.
 */
type Ssr_StecSatElementIntegrity struct {
	StecResidual *Ssr_StecResidual
	StecBoundMu uint8
	StecBoundSig uint8
	StecBoundMuDot uint8
	StecBoundSigDot uint8
	_io *kaitai.Stream
	_root *Ssr
	_parent *Ssr_MsgSsrGriddedCorrectionBounds
}
func NewSsr_StecSatElementIntegrity() *Ssr_StecSatElementIntegrity {
	return &Ssr_StecSatElementIntegrity{
	}
}

func (this *Ssr_StecSatElementIntegrity) Read(io *kaitai.Stream, parent *Ssr_MsgSsrGriddedCorrectionBounds, root *Ssr) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp14 := NewSsr_StecResidual()
	err = tmp14.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.StecResidual = tmp14
	tmp15, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.StecBoundMu = tmp15
	tmp16, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.StecBoundSig = tmp16
	tmp17, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.StecBoundMuDot = tmp17
	tmp18, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.StecBoundSigDot = tmp18
	return err
}

/**
 * STEC residuals (mean, stddev)
 */

/**
 * Error Bound Mean. See Note 1.
 */

/**
 * Error Bound StDev. See Note 1.
 */

/**
 * Error Bound Mean First derivative.
 */

/**
 * Error Bound StDev First derivative.
 */

/**
 * Deprecated.
 */
type Ssr_MsgSsrOrbitClockDepA struct {
	Time *Gnss_GpsTimeSec
	Sid *Gnss_GnssSignal
	UpdateInterval uint8
	IodSsr uint8
	Iod uint8
	Radial int32
	Along int32
	Cross int32
	DotRadial int32
	DotAlong int32
	DotCross int32
	C0 int32
	C1 int32
	C2 int32
	_io *kaitai.Stream
	_root *Ssr
	_parent *Sbp_SbpMessage
}
func NewSsr_MsgSsrOrbitClockDepA() *Ssr_MsgSsrOrbitClockDepA {
	return &Ssr_MsgSsrOrbitClockDepA{
	}
}

func (this *Ssr_MsgSsrOrbitClockDepA) Read(io *kaitai.Stream, parent *Sbp_SbpMessage, root *Ssr) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp19 := NewGnss_GpsTimeSec()
	err = tmp19.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.Time = tmp19
	tmp20 := NewGnss_GnssSignal()
	err = tmp20.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.Sid = tmp20
	tmp21, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.UpdateInterval = tmp21
	tmp22, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.IodSsr = tmp22
	tmp23, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Iod = tmp23
	tmp24, err := this._io.ReadS4le()
	if err != nil {
		return err
	}
	this.Radial = int32(tmp24)
	tmp25, err := this._io.ReadS4le()
	if err != nil {
		return err
	}
	this.Along = int32(tmp25)
	tmp26, err := this._io.ReadS4le()
	if err != nil {
		return err
	}
	this.Cross = int32(tmp26)
	tmp27, err := this._io.ReadS4le()
	if err != nil {
		return err
	}
	this.DotRadial = int32(tmp27)
	tmp28, err := this._io.ReadS4le()
	if err != nil {
		return err
	}
	this.DotAlong = int32(tmp28)
	tmp29, err := this._io.ReadS4le()
	if err != nil {
		return err
	}
	this.DotCross = int32(tmp29)
	tmp30, err := this._io.ReadS4le()
	if err != nil {
		return err
	}
	this.C0 = int32(tmp30)
	tmp31, err := this._io.ReadS4le()
	if err != nil {
		return err
	}
	this.C1 = int32(tmp31)
	tmp32, err := this._io.ReadS4le()
	if err != nil {
		return err
	}
	this.C2 = int32(tmp32)
	return err
}

/**
 * GNSS reference time of the correction
 */

/**
 * GNSS signal identifier (16 bit)
 */

/**
 * Update interval between consecutive corrections. Encoded following
 * RTCM DF391 specification.
 */

/**
 * IOD of the SSR correction. A change of Issue Of Data SSR is used to
 * indicate a change in the SSR generating configuration
 */

/**
 * Issue of broadcast ephemeris data
 */

/**
 * Orbit radial delta correction
 */

/**
 * Orbit along delta correction
 */

/**
 * Orbit along delta correction
 */

/**
 * Velocity of orbit radial delta correction
 */

/**
 * Velocity of orbit along delta correction
 */

/**
 * Velocity of orbit cross delta correction
 */

/**
 * C0 polynomial coefficient for correction of broadcast satellite
 * clock
 */

/**
 * C1 polynomial coefficient for correction of broadcast satellite
 * clock
 */

/**
 * C2 polynomial coefficient for correction of broadcast satellite
 * clock
 */
type Ssr_MsgSsrStecCorrection struct {
	Header *Ssr_BoundsHeader
	SsrIodAtmo uint8
	TileSetId uint16
	TileId uint16
	NSats uint8
	StecSatList []*Ssr_StecSatElement
	_io *kaitai.Stream
	_root *Ssr
	_parent *Sbp_SbpMessage
}
func NewSsr_MsgSsrStecCorrection() *Ssr_MsgSsrStecCorrection {
	return &Ssr_MsgSsrStecCorrection{
	}
}

func (this *Ssr_MsgSsrStecCorrection) Read(io *kaitai.Stream, parent *Sbp_SbpMessage, root *Ssr) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp33 := NewSsr_BoundsHeader()
	err = tmp33.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.Header = tmp33
	tmp34, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.SsrIodAtmo = tmp34
	tmp35, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.TileSetId = uint16(tmp35)
	tmp36, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.TileId = uint16(tmp36)
	tmp37, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.NSats = tmp37
	for i := 1;; i++ {
		tmp38, err := this._io.EOF()
		if err != nil {
			return err
		}
		if tmp38 {
			break
		}
		tmp39 := NewSsr_StecSatElement()
		err = tmp39.Read(this._io, this, this._root)
		if err != nil {
			return err
		}
		this.StecSatList = append(this.StecSatList, tmp39)
	}
	return err
}

/**
 * Header of a STEC correction with bounds message.
 */

/**
 * IOD of the SSR atmospheric correction
 */

/**
 * Tile set ID
 */

/**
 * Tile ID
 */

/**
 * Number of satellites.
 */

/**
 * Array of STEC polynomial coefficients for each space vehicle.
 */

/**
 * The precise orbit and clock correction message is to be applied as a
 * delta correction to broadcast ephemeris and is an equivalent to the 1060
 * /1066 RTCM message types.
 */
type Ssr_MsgSsrOrbitClock struct {
	Time *Gnss_GpsTimeSec
	Sid *Gnss_GnssSignal
	UpdateInterval uint8
	IodSsr uint8
	Iod uint32
	Radial int32
	Along int32
	Cross int32
	DotRadial int32
	DotAlong int32
	DotCross int32
	C0 int32
	C1 int32
	C2 int32
	_io *kaitai.Stream
	_root *Ssr
	_parent *Sbp_SbpMessage
}
func NewSsr_MsgSsrOrbitClock() *Ssr_MsgSsrOrbitClock {
	return &Ssr_MsgSsrOrbitClock{
	}
}

func (this *Ssr_MsgSsrOrbitClock) Read(io *kaitai.Stream, parent *Sbp_SbpMessage, root *Ssr) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp40 := NewGnss_GpsTimeSec()
	err = tmp40.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.Time = tmp40
	tmp41 := NewGnss_GnssSignal()
	err = tmp41.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.Sid = tmp41
	tmp42, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.UpdateInterval = tmp42
	tmp43, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.IodSsr = tmp43
	tmp44, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.Iod = uint32(tmp44)
	tmp45, err := this._io.ReadS4le()
	if err != nil {
		return err
	}
	this.Radial = int32(tmp45)
	tmp46, err := this._io.ReadS4le()
	if err != nil {
		return err
	}
	this.Along = int32(tmp46)
	tmp47, err := this._io.ReadS4le()
	if err != nil {
		return err
	}
	this.Cross = int32(tmp47)
	tmp48, err := this._io.ReadS4le()
	if err != nil {
		return err
	}
	this.DotRadial = int32(tmp48)
	tmp49, err := this._io.ReadS4le()
	if err != nil {
		return err
	}
	this.DotAlong = int32(tmp49)
	tmp50, err := this._io.ReadS4le()
	if err != nil {
		return err
	}
	this.DotCross = int32(tmp50)
	tmp51, err := this._io.ReadS4le()
	if err != nil {
		return err
	}
	this.C0 = int32(tmp51)
	tmp52, err := this._io.ReadS4le()
	if err != nil {
		return err
	}
	this.C1 = int32(tmp52)
	tmp53, err := this._io.ReadS4le()
	if err != nil {
		return err
	}
	this.C2 = int32(tmp53)
	return err
}

/**
 * GNSS reference time of the correction
 */

/**
 * GNSS signal identifier (16 bit)
 */

/**
 * Update interval between consecutive corrections. Encoded following
 * RTCM DF391 specification.
 */

/**
 * IOD of the SSR correction. A change of Issue Of Data SSR is used to
 * indicate a change in the SSR generating configuration
 */

/**
 * Issue of broadcast ephemeris data or IODCRC (Beidou)
 */

/**
 * Orbit radial delta correction
 */

/**
 * Orbit along delta correction
 */

/**
 * Orbit along delta correction
 */

/**
 * Velocity of orbit radial delta correction
 */

/**
 * Velocity of orbit along delta correction
 */

/**
 * Velocity of orbit cross delta correction
 */

/**
 * C0 polynomial coefficient for correction of broadcast satellite
 * clock
 */

/**
 * C1 polynomial coefficient for correction of broadcast satellite
 * clock
 */

/**
 * C2 polynomial coefficient for correction of broadcast satellite
 * clock
 */
type Ssr_BoundsHeader struct {
	Time *Gnss_GpsTimeSec
	NumMsgs uint8
	SeqNum uint8
	UpdateInterval uint8
	SolId uint8
	_io *kaitai.Stream
	_root *Ssr
	_parent interface{}
}
func NewSsr_BoundsHeader() *Ssr_BoundsHeader {
	return &Ssr_BoundsHeader{
	}
}

func (this *Ssr_BoundsHeader) Read(io *kaitai.Stream, parent interface{}, root *Ssr) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp54 := NewGnss_GpsTimeSec()
	err = tmp54.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.Time = tmp54
	tmp55, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.NumMsgs = tmp55
	tmp56, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.SeqNum = tmp56
	tmp57, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.UpdateInterval = tmp57
	tmp58, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.SolId = tmp58
	return err
}

/**
 * GNSS reference time of the bound
 */

/**
 * Number of messages in the dataset
 */

/**
 * Position of this message in the dataset
 */

/**
 * Update interval between consecutive bounds. Similar to RTCM DF391.
 */

/**
 * SSR Solution ID.
 */

/**
 * STEC residuals are per space vehicle, troposphere is not.
 * 
 * It is typically equivalent to the QZSS CLAS Sub Type 9 messages.
 */
type Ssr_MsgSsrGriddedCorrection struct {
	Header *Ssr_GriddedCorrectionHeader
	Index uint16
	TropoDelayCorrection *Ssr_TroposphericDelayCorrection
	StecResiduals []*Ssr_StecResidual
	_io *kaitai.Stream
	_root *Ssr
	_parent *Sbp_SbpMessage
}
func NewSsr_MsgSsrGriddedCorrection() *Ssr_MsgSsrGriddedCorrection {
	return &Ssr_MsgSsrGriddedCorrection{
	}
}

func (this *Ssr_MsgSsrGriddedCorrection) Read(io *kaitai.Stream, parent *Sbp_SbpMessage, root *Ssr) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp59 := NewSsr_GriddedCorrectionHeader()
	err = tmp59.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.Header = tmp59
	tmp60, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.Index = uint16(tmp60)
	tmp61 := NewSsr_TroposphericDelayCorrection()
	err = tmp61.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.TropoDelayCorrection = tmp61
	for i := 1;; i++ {
		tmp62, err := this._io.EOF()
		if err != nil {
			return err
		}
		if tmp62 {
			break
		}
		tmp63 := NewSsr_StecResidual()
		err = tmp63.Read(this._io, this, this._root)
		if err != nil {
			return err
		}
		this.StecResiduals = append(this.StecResiduals, tmp63)
	}
	return err
}

/**
 * Header of a gridded correction message
 */

/**
 * Index of the grid point.
 */

/**
 * Wet and hydrostatic vertical delays (mean, stddev).
 */

/**
 * STEC residuals for each satellite (mean, stddev).
 */

/**
 * STEC residual (mean and standard deviation) for the given satellite at
 * the grid point.
 */
type Ssr_StecResidual struct {
	SvId *Gnss_SvId
	Residual int16
	Stddev uint8
	_io *kaitai.Stream
	_root *Ssr
	_parent interface{}
}
func NewSsr_StecResidual() *Ssr_StecResidual {
	return &Ssr_StecResidual{
	}
}

func (this *Ssr_StecResidual) Read(io *kaitai.Stream, parent interface{}, root *Ssr) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp64 := NewGnss_SvId()
	err = tmp64.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.SvId = tmp64
	tmp65, err := this._io.ReadS2le()
	if err != nil {
		return err
	}
	this.Residual = int16(tmp65)
	tmp66, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Stddev = tmp66
	return err
}

/**
 * space vehicle identifier
 */

/**
 * STEC residual
 */

/**
 * Modified DF389. class 3 MSB, value 5 LSB. stddev = (3^class * (1 +
 * value/16) - 1) * 10
 */
type Ssr_CodePhaseBiasesSatSig struct {
	SatId uint8
	SignalId uint8
	CodeBiasBoundMu uint8
	CodeBiasBoundSig uint8
	PhaseBiasBoundMu uint8
	PhaseBiasBoundSig uint8
	_io *kaitai.Stream
	_root *Ssr
	_parent *Ssr_MsgSsrCodePhaseBiasesBounds
}
func NewSsr_CodePhaseBiasesSatSig() *Ssr_CodePhaseBiasesSatSig {
	return &Ssr_CodePhaseBiasesSatSig{
	}
}

func (this *Ssr_CodePhaseBiasesSatSig) Read(io *kaitai.Stream, parent *Ssr_MsgSsrCodePhaseBiasesBounds, root *Ssr) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp67, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.SatId = tmp67
	tmp68, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.SignalId = tmp68
	tmp69, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.CodeBiasBoundMu = tmp69
	tmp70, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.CodeBiasBoundSig = tmp70
	tmp71, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.PhaseBiasBoundMu = tmp71
	tmp72, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.PhaseBiasBoundSig = tmp72
	return err
}

/**
 * Satellite ID. Similar to either RTCM DF068 (GPS), DF252 (Galileo),
 * or DF488 (BDS) depending on the constellation.
 */

/**
 * Signal and Tracking Mode Identifier. Similar to either RTCM DF380
 * (GPS), DF382 (Galileo) or DF467 (BDS) depending on the
 * constellation.
 */

/**
 * Code Bias Mean. Range: 0-1.275 m
 */

/**
 * Code Bias Standard Deviation. Range: 0-1.275 m
 */

/**
 * Phase Bias Mean. Range: 0-1.275 m
 */

/**
 * Phase Bias Standard Deviation. Range: 0-1.275 m
 */

/**
 * Contains phase center offset and elevation variation corrections for one
 * signal on a satellite.
 */
type Ssr_SatelliteApc struct {
	Sid *Gnss_GnssSignal
	SatInfo uint8
	Svn uint16
	Pco []int16
	Pcv []int8
	_io *kaitai.Stream
	_root *Ssr
	_parent interface{}
}
func NewSsr_SatelliteApc() *Ssr_SatelliteApc {
	return &Ssr_SatelliteApc{
	}
}

func (this *Ssr_SatelliteApc) Read(io *kaitai.Stream, parent interface{}, root *Ssr) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp73 := NewGnss_GnssSignal()
	err = tmp73.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.Sid = tmp73
	tmp74, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.SatInfo = tmp74
	tmp75, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.Svn = uint16(tmp75)
	for i := 0; i < int(3); i++ {
		_ = i
		tmp76, err := this._io.ReadS2le()
		if err != nil {
			return err
		}
		this.Pco = append(this.Pco, tmp76)
	}
	for i := 0; i < int(21); i++ {
		_ = i
		tmp77, err := this._io.ReadS1()
		if err != nil {
			return err
		}
		this.Pcv = append(this.Pcv, tmp77)
	}
	return err
}

/**
 * GNSS signal identifier (16 bit)
 */

/**
 * Additional satellite information
 */

/**
 * Satellite Code, as defined by IGS. Typically the space vehicle
 * number.
 */

/**
 * Mean phase center offset, X Y and Z axes. See IGS ANTEX file format
 * description for coordinate system definition.
 */

/**
 * Elevation dependent phase center variations. First element is 0
 * degrees separation from the Z axis, subsequent elements represent
 * elevation variations in 1 degree increments.
 */

/**
 * The LPP message contains nested variable length arrays which are not
 * supported in SBP, so each grid point will be identified by the index.
 */
type Ssr_GriddedCorrectionHeader struct {
	TileSetId uint16
	TileId uint16
	Time *Gnss_GpsTimeSec
	NumMsgs uint16
	SeqNum uint16
	UpdateInterval uint8
	IodAtmo uint8
	TropoQualityIndicator uint8
	_io *kaitai.Stream
	_root *Ssr
	_parent *Ssr_MsgSsrGriddedCorrection
}
func NewSsr_GriddedCorrectionHeader() *Ssr_GriddedCorrectionHeader {
	return &Ssr_GriddedCorrectionHeader{
	}
}

func (this *Ssr_GriddedCorrectionHeader) Read(io *kaitai.Stream, parent *Ssr_MsgSsrGriddedCorrection, root *Ssr) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp78, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.TileSetId = uint16(tmp78)
	tmp79, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.TileId = uint16(tmp79)
	tmp80 := NewGnss_GpsTimeSec()
	err = tmp80.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.Time = tmp80
	tmp81, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.NumMsgs = uint16(tmp81)
	tmp82, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.SeqNum = uint16(tmp82)
	tmp83, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.UpdateInterval = tmp83
	tmp84, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.IodAtmo = tmp84
	tmp85, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.TropoQualityIndicator = tmp85
	return err
}

/**
 * Unique identifier of the tile set this tile belongs to.
 */

/**
 * Unique identifier of this tile in the tile set.
 */

/**
 * GNSS reference time of the correction
 */

/**
 * Number of messages in the dataset
 */

/**
 * Position of this message in the dataset
 */

/**
 * Update interval between consecutive corrections. Encoded following
 * RTCM DF391 specification.
 */

/**
 * IOD of the SSR atmospheric correction
 */

/**
 * Quality of the troposphere data. Encoded following RTCM DF389
 * specification in units of m.
 */

/**
 * STEC polynomial for the given satellite.
 */
type Ssr_StecSatElement struct {
	SvId *Gnss_SvId
	StecQualityIndicator uint8
	StecCoeff []int16
	_io *kaitai.Stream
	_root *Ssr
	_parent interface{}
}
func NewSsr_StecSatElement() *Ssr_StecSatElement {
	return &Ssr_StecSatElement{
	}
}

func (this *Ssr_StecSatElement) Read(io *kaitai.Stream, parent interface{}, root *Ssr) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp86 := NewGnss_SvId()
	err = tmp86.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.SvId = tmp86
	tmp87, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.StecQualityIndicator = tmp87
	for i := 0; i < int(4); i++ {
		_ = i
		tmp88, err := this._io.ReadS2le()
		if err != nil {
			return err
		}
		this.StecCoeff = append(this.StecCoeff, tmp88)
	}
	return err
}

/**
 * Unique space vehicle identifier
 */

/**
 * Quality of the STEC data. Encoded following RTCM DF389 specification
 * but in units of TECU instead of m.
 */

/**
 * Coefficients of the STEC polynomial in the order of C00, C01, C10,
 * C11. C00 = 0.05 TECU, C01/C10 = 0.02 TECU/deg, C11 0.02 TECU/deg^2
 */

/**
 * A full set of STEC information will likely span multiple SBP messages,
 * since SBP message a limited to 255 bytes.  The header is used to tie
 * multiple SBP messages into a sequence.
 */
type Ssr_StecHeaderDepA struct {
	Time *Gnss_GpsTimeSec
	NumMsgs uint8
	SeqNum uint8
	UpdateInterval uint8
	IodAtmo uint8
	_io *kaitai.Stream
	_root *Ssr
	_parent *Ssr_MsgSsrStecCorrectionDepA
}
func NewSsr_StecHeaderDepA() *Ssr_StecHeaderDepA {
	return &Ssr_StecHeaderDepA{
	}
}

func (this *Ssr_StecHeaderDepA) Read(io *kaitai.Stream, parent *Ssr_MsgSsrStecCorrectionDepA, root *Ssr) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp89 := NewGnss_GpsTimeSec()
	err = tmp89.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.Time = tmp89
	tmp90, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.NumMsgs = tmp90
	tmp91, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.SeqNum = tmp91
	tmp92, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.UpdateInterval = tmp92
	tmp93, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.IodAtmo = tmp93
	return err
}

/**
 * GNSS reference time of the correction
 */

/**
 * Number of messages in the dataset
 */

/**
 * Position of this message in the dataset
 */

/**
 * Update interval between consecutive corrections. Encoded following
 * RTCM DF391 specification.
 */

/**
 * IOD of the SSR atmospheric correction
 */

/**
 * A full set of STEC information will likely span multiple SBP messages,
 * since SBP message a limited to 255 bytes.  The header is used to tie
 * multiple SBP messages into a sequence.
 */
type Ssr_StecHeader struct {
	TileSetId uint16
	TileId uint16
	Time *Gnss_GpsTimeSec
	NumMsgs uint8
	SeqNum uint8
	UpdateInterval uint8
	IodAtmo uint8
	_io *kaitai.Stream
	_root *Ssr
	_parent *Ssr_MsgSsrStecCorrectionDep
}
func NewSsr_StecHeader() *Ssr_StecHeader {
	return &Ssr_StecHeader{
	}
}

func (this *Ssr_StecHeader) Read(io *kaitai.Stream, parent *Ssr_MsgSsrStecCorrectionDep, root *Ssr) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp94, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.TileSetId = uint16(tmp94)
	tmp95, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.TileId = uint16(tmp95)
	tmp96 := NewGnss_GpsTimeSec()
	err = tmp96.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.Time = tmp96
	tmp97, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.NumMsgs = tmp97
	tmp98, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.SeqNum = tmp98
	tmp99, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.UpdateInterval = tmp99
	tmp100, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.IodAtmo = tmp100
	return err
}

/**
 * Unique identifier of the tile set this tile belongs to.
 */

/**
 * Unique identifier of this tile in the tile set.
 */

/**
 * GNSS reference time of the correction
 */

/**
 * Number of messages in the dataset
 */

/**
 * Position of this message in the dataset
 */

/**
 * Update interval between consecutive corrections. Encoded following
 * RTCM DF391 specification.
 */

/**
 * IOD of the SSR atmospheric correction
 */

/**
 * Deprecated.
 */
type Ssr_MsgSsrStecCorrectionDepA struct {
	Header *Ssr_StecHeaderDepA
	StecSatList []*Ssr_StecSatElement
	_io *kaitai.Stream
	_root *Ssr
	_parent *Sbp_SbpMessage
}
func NewSsr_MsgSsrStecCorrectionDepA() *Ssr_MsgSsrStecCorrectionDepA {
	return &Ssr_MsgSsrStecCorrectionDepA{
	}
}

func (this *Ssr_MsgSsrStecCorrectionDepA) Read(io *kaitai.Stream, parent *Sbp_SbpMessage, root *Ssr) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp101 := NewSsr_StecHeaderDepA()
	err = tmp101.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.Header = tmp101
	for i := 1;; i++ {
		tmp102, err := this._io.EOF()
		if err != nil {
			return err
		}
		if tmp102 {
			break
		}
		tmp103 := NewSsr_StecSatElement()
		err = tmp103.Read(this._io, this, this._root)
		if err != nil {
			return err
		}
		this.StecSatList = append(this.StecSatList, tmp103)
	}
	return err
}

/**
 * Header of a STEC message
 */

/**
 * Array of STEC information for each space vehicle
 */

/**
 * The 3GPP message contains nested variable length arrays which are not
 * supported in SBP, so each grid point will be identified by the index.
 */
type Ssr_GriddedCorrectionHeaderDepA struct {
	Time *Gnss_GpsTimeSec
	NumMsgs uint16
	SeqNum uint16
	UpdateInterval uint8
	IodAtmo uint8
	TropoQualityIndicator uint8
	_io *kaitai.Stream
	_root *Ssr
	_parent interface{}
}
func NewSsr_GriddedCorrectionHeaderDepA() *Ssr_GriddedCorrectionHeaderDepA {
	return &Ssr_GriddedCorrectionHeaderDepA{
	}
}

func (this *Ssr_GriddedCorrectionHeaderDepA) Read(io *kaitai.Stream, parent interface{}, root *Ssr) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp104 := NewGnss_GpsTimeSec()
	err = tmp104.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.Time = tmp104
	tmp105, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.NumMsgs = uint16(tmp105)
	tmp106, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.SeqNum = uint16(tmp106)
	tmp107, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.UpdateInterval = tmp107
	tmp108, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.IodAtmo = tmp108
	tmp109, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.TropoQualityIndicator = tmp109
	return err
}

/**
 * GNSS reference time of the correction
 */

/**
 * Number of messages in the dataset
 */

/**
 * Position of this message in the dataset
 */

/**
 * Update interval between consecutive corrections. Encoded following
 * RTCM DF391 specification.
 */

/**
 * IOD of the SSR atmospheric correction
 */

/**
 * Quality of the troposphere data. Encoded following RTCM DF389
 * specification in units of m.
 */

/**
 * Note 1: Range: 0-17.5 m. i<=200, mean=0.01i; 200<i<=230,
 * mean=2+0.1(i-200); i>230, mean=5+0.5(i-230).
 * 
 * Note 2: Range: 0-17.5 m. i<=200, std=0.01i; 200<i<=230, std=2+0.1(i-200)
 * i>230, std=5+0.5(i-230).
 */
type Ssr_MsgSsrOrbitClockBounds struct {
	Header *Ssr_BoundsHeader
	SsrIod uint8
	ConstId uint8
	NSats uint8
	OrbitClockBounds []*Ssr_OrbitClockBound
	_io *kaitai.Stream
	_root *Ssr
	_parent *Sbp_SbpMessage
}
func NewSsr_MsgSsrOrbitClockBounds() *Ssr_MsgSsrOrbitClockBounds {
	return &Ssr_MsgSsrOrbitClockBounds{
	}
}

func (this *Ssr_MsgSsrOrbitClockBounds) Read(io *kaitai.Stream, parent *Sbp_SbpMessage, root *Ssr) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp110 := NewSsr_BoundsHeader()
	err = tmp110.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.Header = tmp110
	tmp111, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.SsrIod = tmp111
	tmp112, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.ConstId = tmp112
	tmp113, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.NSats = tmp113
	for i := 1;; i++ {
		tmp114, err := this._io.EOF()
		if err != nil {
			return err
		}
		if tmp114 {
			break
		}
		tmp115 := NewSsr_OrbitClockBound()
		err = tmp115.Read(this._io, this, this._root)
		if err != nil {
			return err
		}
		this.OrbitClockBounds = append(this.OrbitClockBounds, tmp115)
	}
	return err
}

/**
 * Header of a bounds message.
 */

/**
 * IOD of the SSR bound.
 */

/**
 * Constellation ID to which the SVs belong.
 */

/**
 * Number of satellites.
 */

/**
 * Orbit and Clock Bounds per Satellite
 */

/**
 * Note 1: Range: 0-17.5 m. i<= 200, mean = 0.01i; 200<i<=230,
 * mean=2+0.1(i-200); i>230, mean=5+0.5(i-230).
 */
type Ssr_MsgSsrGriddedCorrectionBounds struct {
	Header *Ssr_BoundsHeader
	SsrIodAtmo uint8
	TileSetId uint16
	TileId uint16
	TropoQi uint8
	GridPointId uint16
	TropoDelayCorrection *Ssr_TroposphericDelayCorrection
	TropoVHydroBoundMu uint8
	TropoVHydroBoundSig uint8
	TropoVWetBoundMu uint8
	TropoVWetBoundSig uint8
	NSats uint8
	StecSatList []*Ssr_StecSatElementIntegrity
	_io *kaitai.Stream
	_root *Ssr
	_parent *Sbp_SbpMessage
}
func NewSsr_MsgSsrGriddedCorrectionBounds() *Ssr_MsgSsrGriddedCorrectionBounds {
	return &Ssr_MsgSsrGriddedCorrectionBounds{
	}
}

func (this *Ssr_MsgSsrGriddedCorrectionBounds) Read(io *kaitai.Stream, parent *Sbp_SbpMessage, root *Ssr) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp116 := NewSsr_BoundsHeader()
	err = tmp116.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.Header = tmp116
	tmp117, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.SsrIodAtmo = tmp117
	tmp118, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.TileSetId = uint16(tmp118)
	tmp119, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.TileId = uint16(tmp119)
	tmp120, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.TropoQi = tmp120
	tmp121, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.GridPointId = uint16(tmp121)
	tmp122 := NewSsr_TroposphericDelayCorrection()
	err = tmp122.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.TropoDelayCorrection = tmp122
	tmp123, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.TropoVHydroBoundMu = tmp123
	tmp124, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.TropoVHydroBoundSig = tmp124
	tmp125, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.TropoVWetBoundMu = tmp125
	tmp126, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.TropoVWetBoundSig = tmp126
	tmp127, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.NSats = tmp127
	for i := 1;; i++ {
		tmp128, err := this._io.EOF()
		if err != nil {
			return err
		}
		if tmp128 {
			break
		}
		tmp129 := NewSsr_StecSatElementIntegrity()
		err = tmp129.Read(this._io, this, this._root)
		if err != nil {
			return err
		}
		this.StecSatList = append(this.StecSatList, tmp129)
	}
	return err
}

/**
 * Header of a bounds message.
 */

/**
 * IOD of the correction.
 */

/**
 * Set this tile belongs to.
 */

/**
 * Unique identifier of this tile in the tile set.
 */

/**
 * Tropo Quality Indicator. Similar to RTCM DF389.
 */

/**
 * Index of the Grid Point.
 */

/**
 * Tropospheric delay at grid point.
 */

/**
 * Vertical Hydrostatic Error Bound Mean.
 */

/**
 * Vertical Hydrostatic Error Bound StDev.
 */

/**
 * Vertical Wet Error Bound Mean.
 */

/**
 * Vertical Wet Error Bound StDev.
 */

/**
 * Number of satellites.
 */

/**
 * Array of STEC polynomial coefficients and its bounds for each space
 * vehicle.
 */

/**
 * Deprecated.
 */
type Ssr_MsgSsrGridDefinitionDepA struct {
	Header *Ssr_GridDefinitionHeaderDepA
	RleList []uint8
	_io *kaitai.Stream
	_root *Ssr
	_parent *Sbp_SbpMessage
}
func NewSsr_MsgSsrGridDefinitionDepA() *Ssr_MsgSsrGridDefinitionDepA {
	return &Ssr_MsgSsrGridDefinitionDepA{
	}
}

func (this *Ssr_MsgSsrGridDefinitionDepA) Read(io *kaitai.Stream, parent *Sbp_SbpMessage, root *Ssr) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp130 := NewSsr_GridDefinitionHeaderDepA()
	err = tmp130.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.Header = tmp130
	for i := 1;; i++ {
		tmp131, err := this._io.EOF()
		if err != nil {
			return err
		}
		if tmp131 {
			break
		}
		tmp132, err := this._io.ReadU1()
		if err != nil {
			return err
		}
		this.RleList = append(this.RleList, tmp132)
	}
	return err
}

/**
 * Header of a Gridded Correction message
 */

/**
 * Run Length Encode list of quadrants that contain valid data. The
 * spec describes the encoding scheme in detail, but essentially the
 * index of the quadrants that contain transitions between valid and
 * invalid (and vice versa) are encoded as u8 integers.
 */

/**
 * Code biases are to be added to pseudorange. The corrections conform with
 * RTCMv3 MT 1059 / 1065.
 */
type Ssr_CodeBiasesContent struct {
	Code uint8
	Value int16
	_io *kaitai.Stream
	_root *Ssr
	_parent *Ssr_MsgSsrCodeBiases
}
func NewSsr_CodeBiasesContent() *Ssr_CodeBiasesContent {
	return &Ssr_CodeBiasesContent{
	}
}

func (this *Ssr_CodeBiasesContent) Read(io *kaitai.Stream, parent *Ssr_MsgSsrCodeBiases, root *Ssr) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp133, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Code = tmp133
	tmp134, err := this._io.ReadS2le()
	if err != nil {
		return err
	}
	this.Value = int16(tmp134)
	return err
}

/**
 * Signal encoded following RTCM specifications (DF380, DF381, DF382
 * and DF467).
 */

/**
 * Code bias value
 */
type Ssr_MsgSsrSatelliteApc struct {
	Time *Gnss_GpsTimeSec
	UpdateInterval uint8
	SolId uint8
	IodSsr uint8
	Apc []*Ssr_SatelliteApc
	_io *kaitai.Stream
	_root *Ssr
	_parent *Sbp_SbpMessage
}
func NewSsr_MsgSsrSatelliteApc() *Ssr_MsgSsrSatelliteApc {
	return &Ssr_MsgSsrSatelliteApc{
	}
}

func (this *Ssr_MsgSsrSatelliteApc) Read(io *kaitai.Stream, parent *Sbp_SbpMessage, root *Ssr) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp135 := NewGnss_GpsTimeSec()
	err = tmp135.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.Time = tmp135
	tmp136, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.UpdateInterval = tmp136
	tmp137, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.SolId = tmp137
	tmp138, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.IodSsr = tmp138
	for i := 1;; i++ {
		tmp139, err := this._io.EOF()
		if err != nil {
			return err
		}
		if tmp139 {
			break
		}
		tmp140 := NewSsr_SatelliteApc()
		err = tmp140.Read(this._io, this, this._root)
		if err != nil {
			return err
		}
		this.Apc = append(this.Apc, tmp140)
	}
	return err
}

/**
 * GNSS reference time of the correction
 */

/**
 * Update interval between consecutive corrections. Encoded following
 * RTCM DF391 specification.
 */

/**
 * SSR Solution ID. Similar to RTCM DF415.
 */

/**
 * IOD of the SSR correction. A change of Issue Of Data SSR is used to
 * indicate a change in the SSR generating configuration
 */

/**
 * Satellite antenna phase center corrections
 */

/**
 * Phase biases are to be added to carrier phase measurements.
 */
type Ssr_PhaseBiasesContent struct {
	Code uint8
	IntegerIndicator uint8
	WidelaneIntegerIndicator uint8
	DiscontinuityCounter uint8
	Bias int32
	_io *kaitai.Stream
	_root *Ssr
	_parent *Ssr_MsgSsrPhaseBiases
}
func NewSsr_PhaseBiasesContent() *Ssr_PhaseBiasesContent {
	return &Ssr_PhaseBiasesContent{
	}
}

func (this *Ssr_PhaseBiasesContent) Read(io *kaitai.Stream, parent *Ssr_MsgSsrPhaseBiases, root *Ssr) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp141, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Code = tmp141
	tmp142, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.IntegerIndicator = tmp142
	tmp143, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.WidelaneIntegerIndicator = tmp143
	tmp144, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.DiscontinuityCounter = tmp144
	tmp145, err := this._io.ReadS4le()
	if err != nil {
		return err
	}
	this.Bias = int32(tmp145)
	return err
}

/**
 * Signal encoded following RTCM specifications (DF380, DF381, DF382
 * and DF467)
 */

/**
 * Indicator for integer property
 */

/**
 * Indicator for two groups of Wide-Lane(s) integer property
 */

/**
 * Signal phase discontinuity counter. Increased for every
 * discontinuity in phase.
 */

/**
 * Phase bias for specified signal
 */

/**
 * Deprecated.
 */
type Ssr_MsgSsrTileDefinitionDepA struct {
	TileSetId uint16
	TileId uint16
	CornerNwLat int16
	CornerNwLon int16
	SpacingLat uint16
	SpacingLon uint16
	Rows uint16
	Cols uint16
	Bitmask uint64
	_io *kaitai.Stream
	_root *Ssr
	_parent *Sbp_SbpMessage
}
func NewSsr_MsgSsrTileDefinitionDepA() *Ssr_MsgSsrTileDefinitionDepA {
	return &Ssr_MsgSsrTileDefinitionDepA{
	}
}

func (this *Ssr_MsgSsrTileDefinitionDepA) Read(io *kaitai.Stream, parent *Sbp_SbpMessage, root *Ssr) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp146, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.TileSetId = uint16(tmp146)
	tmp147, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.TileId = uint16(tmp147)
	tmp148, err := this._io.ReadS2le()
	if err != nil {
		return err
	}
	this.CornerNwLat = int16(tmp148)
	tmp149, err := this._io.ReadS2le()
	if err != nil {
		return err
	}
	this.CornerNwLon = int16(tmp149)
	tmp150, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.SpacingLat = uint16(tmp150)
	tmp151, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.SpacingLon = uint16(tmp151)
	tmp152, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.Rows = uint16(tmp152)
	tmp153, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.Cols = uint16(tmp153)
	tmp154, err := this._io.ReadU8le()
	if err != nil {
		return err
	}
	this.Bitmask = uint64(tmp154)
	return err
}

/**
 * Unique identifier of the tile set this tile belongs to.
 */

/**
 * Unique identifier of this tile in the tile set.
 * See GNSS-SSR-ArrayOfCorrectionPoints field correctionPointSetID.
 */

/**
 * North-West corner correction point latitude.
 * 
 * The relation between the latitude X in the range [-90, 90] and the
 * coded number N is:
 * 
 * N = floor((X / 90) * 2^14)
 * 
 * See GNSS-SSR-ArrayOfCorrectionPoints field referencePointLatitude.
 */

/**
 * North-West corner correction point longitude.
 * 
 * The relation between the longitude X in the range [-180, 180] and
 * the coded number N is:
 * 
 * N = floor((X / 180) * 2^15)
 * 
 * See GNSS-SSR-ArrayOfCorrectionPoints field referencePointLongitude.
 */

/**
 * Spacing of the correction points in the latitude direction.
 * 
 * See GNSS-SSR-ArrayOfCorrectionPoints field stepOfLatitude.
 */

/**
 * Spacing of the correction points in the longitude direction.
 * 
 * See GNSS-SSR-ArrayOfCorrectionPoints field stepOfLongitude.
 */

/**
 * Number of steps in the latitude direction.
 * 
 * See GNSS-SSR-ArrayOfCorrectionPoints field numberOfStepsLatitude.
 */

/**
 * Number of steps in the longitude direction.
 * 
 * See GNSS-SSR-ArrayOfCorrectionPoints field numberOfStepsLongitude.
 */

/**
 * Specifies the availability of correction data at the correction
 * points in the array.
 * 
 * If a specific bit is enabled (set to 1), the correction is not
 * available. Only the first rows * cols bits are used, the remainder
 * are set to 0. If there are more then 64 correction points the
 * remaining corrections are always available.
 * 
 * Starting with the northwest corner of the array (top left on a north
 * oriented map) the correction points are enumerated with row
 * precedence - first row west to east, second row west to east, until
 * last row west to east - ending with the southeast corner of the
 * array.
 * 
 * See GNSS-SSR-ArrayOfCorrectionPoints field bitmaskOfGrids but note
 * the definition of the bits is inverted.
 */

/**
 * Orbit and clock bound.
 */
type Ssr_OrbitClockBound struct {
	SatId uint8
	OrbRadialBoundMu uint8
	OrbAlongBoundMu uint8
	OrbCrossBoundMu uint8
	OrbRadialBoundSig uint8
	OrbAlongBoundSig uint8
	OrbCrossBoundSig uint8
	ClockBoundMu uint8
	ClockBoundSig uint8
	_io *kaitai.Stream
	_root *Ssr
	_parent *Ssr_MsgSsrOrbitClockBounds
}
func NewSsr_OrbitClockBound() *Ssr_OrbitClockBound {
	return &Ssr_OrbitClockBound{
	}
}

func (this *Ssr_OrbitClockBound) Read(io *kaitai.Stream, parent *Ssr_MsgSsrOrbitClockBounds, root *Ssr) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp155, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.SatId = tmp155
	tmp156, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.OrbRadialBoundMu = tmp156
	tmp157, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.OrbAlongBoundMu = tmp157
	tmp158, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.OrbCrossBoundMu = tmp158
	tmp159, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.OrbRadialBoundSig = tmp159
	tmp160, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.OrbAlongBoundSig = tmp160
	tmp161, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.OrbCrossBoundSig = tmp161
	tmp162, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.ClockBoundMu = tmp162
	tmp163, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.ClockBoundSig = tmp163
	return err
}

/**
 * Satellite ID. Similar to either RTCM DF068 (GPS), DF252 (Galileo),
 * or DF488 (BDS) depending on the constellation.
 */

/**
 * Mean Radial. See Note 1.
 */

/**
 * Mean Along-Track. See Note 1.
 */

/**
 * Mean Cross-Track. See Note 1.
 */

/**
 * Standard Deviation Radial. See Note 2.
 */

/**
 * Standard Deviation Along-Track. See Note 2.
 */

/**
 * Standard Deviation Cross-Track. See Note 2.
 */

/**
 * Clock Bound Mean. See Note 1.
 */

/**
 * Clock Bound Standard Deviation. See Note 2.
 */

/**
 * Deprecated.
 */
type Ssr_MsgSsrGriddedCorrectionDepA struct {
	Header *Ssr_GriddedCorrectionHeaderDepA
	Index uint16
	TropoDelayCorrection *Ssr_TroposphericDelayCorrection
	StecResiduals []*Ssr_StecResidual
	_io *kaitai.Stream
	_root *Ssr
	_parent *Sbp_SbpMessage
}
func NewSsr_MsgSsrGriddedCorrectionDepA() *Ssr_MsgSsrGriddedCorrectionDepA {
	return &Ssr_MsgSsrGriddedCorrectionDepA{
	}
}

func (this *Ssr_MsgSsrGriddedCorrectionDepA) Read(io *kaitai.Stream, parent *Sbp_SbpMessage, root *Ssr) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp164 := NewSsr_GriddedCorrectionHeaderDepA()
	err = tmp164.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.Header = tmp164
	tmp165, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.Index = uint16(tmp165)
	tmp166 := NewSsr_TroposphericDelayCorrection()
	err = tmp166.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.TropoDelayCorrection = tmp166
	for i := 1;; i++ {
		tmp167, err := this._io.EOF()
		if err != nil {
			return err
		}
		if tmp167 {
			break
		}
		tmp168 := NewSsr_StecResidual()
		err = tmp168.Read(this._io, this, this._root)
		if err != nil {
			return err
		}
		this.StecResiduals = append(this.StecResiduals, tmp168)
	}
	return err
}

/**
 * Header of a Gridded Correction message
 */

/**
 * Index of the grid point
 */

/**
 * Wet and hydrostatic vertical delays (mean, stddev)
 */

/**
 * STEC residuals for each satellite (mean, stddev)
 */
type Ssr_MsgSsrOrbitClockBoundsDegradation struct {
	Header *Ssr_BoundsHeader
	SsrIod uint8
	ConstId uint8
	SatBitmask uint64
	OrbitClockBoundsDegradation *Ssr_OrbitClockBoundDegradation
	_io *kaitai.Stream
	_root *Ssr
	_parent *Sbp_SbpMessage
}
func NewSsr_MsgSsrOrbitClockBoundsDegradation() *Ssr_MsgSsrOrbitClockBoundsDegradation {
	return &Ssr_MsgSsrOrbitClockBoundsDegradation{
	}
}

func (this *Ssr_MsgSsrOrbitClockBoundsDegradation) Read(io *kaitai.Stream, parent *Sbp_SbpMessage, root *Ssr) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp169 := NewSsr_BoundsHeader()
	err = tmp169.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.Header = tmp169
	tmp170, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.SsrIod = tmp170
	tmp171, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.ConstId = tmp171
	tmp172, err := this._io.ReadU8le()
	if err != nil {
		return err
	}
	this.SatBitmask = uint64(tmp172)
	tmp173 := NewSsr_OrbitClockBoundDegradation()
	err = tmp173.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.OrbitClockBoundsDegradation = tmp173
	return err
}

/**
 * Header of a bounds message.
 */

/**
 * IOD of the SSR bound degradation parameter.
 */

/**
 * Constellation ID to which the SVs belong.
 */

/**
 * Satellite Bit Mask. Put 1 for each satellite where the following
 * degradation parameters are applicable, 0 otherwise. Encoded
 * following RTCM DF394 specification.
 */

/**
 * Orbit and Clock Bounds Degradation Parameters
 */

/**
 * Deprecated.
 */
type Ssr_MsgSsrGriddedCorrectionNoStdDepA struct {
	Header *Ssr_GriddedCorrectionHeaderDepA
	Index uint16
	TropoDelayCorrection *Ssr_TroposphericDelayCorrectionNoStd
	StecResiduals []*Ssr_StecResidualNoStd
	_io *kaitai.Stream
	_root *Ssr
	_parent *Sbp_SbpMessage
}
func NewSsr_MsgSsrGriddedCorrectionNoStdDepA() *Ssr_MsgSsrGriddedCorrectionNoStdDepA {
	return &Ssr_MsgSsrGriddedCorrectionNoStdDepA{
	}
}

func (this *Ssr_MsgSsrGriddedCorrectionNoStdDepA) Read(io *kaitai.Stream, parent *Sbp_SbpMessage, root *Ssr) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp174 := NewSsr_GriddedCorrectionHeaderDepA()
	err = tmp174.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.Header = tmp174
	tmp175, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.Index = uint16(tmp175)
	tmp176 := NewSsr_TroposphericDelayCorrectionNoStd()
	err = tmp176.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.TropoDelayCorrection = tmp176
	for i := 1;; i++ {
		tmp177, err := this._io.EOF()
		if err != nil {
			return err
		}
		if tmp177 {
			break
		}
		tmp178 := NewSsr_StecResidualNoStd()
		err = tmp178.Read(this._io, this, this._root)
		if err != nil {
			return err
		}
		this.StecResiduals = append(this.StecResiduals, tmp178)
	}
	return err
}

/**
 * Header of a Gridded Correction message
 */

/**
 * Index of the grid point
 */

/**
 * Wet and hydrostatic vertical delays
 */

/**
 * STEC residuals for each satellite
 */
type Ssr_MsgSsrCodePhaseBiasesBounds struct {
	Header *Ssr_BoundsHeader
	SsrIod uint8
	ConstId uint8
	NSatsSignals uint8
	SatellitesSignals []*Ssr_CodePhaseBiasesSatSig
	_io *kaitai.Stream
	_root *Ssr
	_parent *Sbp_SbpMessage
}
func NewSsr_MsgSsrCodePhaseBiasesBounds() *Ssr_MsgSsrCodePhaseBiasesBounds {
	return &Ssr_MsgSsrCodePhaseBiasesBounds{
	}
}

func (this *Ssr_MsgSsrCodePhaseBiasesBounds) Read(io *kaitai.Stream, parent *Sbp_SbpMessage, root *Ssr) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp179 := NewSsr_BoundsHeader()
	err = tmp179.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.Header = tmp179
	tmp180, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.SsrIod = tmp180
	tmp181, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.ConstId = tmp181
	tmp182, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.NSatsSignals = tmp182
	for i := 1;; i++ {
		tmp183, err := this._io.EOF()
		if err != nil {
			return err
		}
		if tmp183 {
			break
		}
		tmp184 := NewSsr_CodePhaseBiasesSatSig()
		err = tmp184.Read(this._io, this, this._root)
		if err != nil {
			return err
		}
		this.SatellitesSignals = append(this.SatellitesSignals, tmp184)
	}
	return err
}

/**
 * Header of a bounds message.
 */

/**
 * IOD of the SSR bound.
 */

/**
 * Constellation ID to which the SVs belong.
 */

/**
 * Number of satellite-signal couples.
 */

/**
 * Code and Phase Biases Bounds per Satellite-Signal couple.
 */

/**
 * The precise code biases message is to be added to the pseudorange of the
 * corresponding signal to get corrected pseudorange. It is an equivalent
 * to the 1059 / 1065 RTCM message types.
 */
type Ssr_MsgSsrCodeBiases struct {
	Time *Gnss_GpsTimeSec
	Sid *Gnss_GnssSignal
	UpdateInterval uint8
	IodSsr uint8
	Biases []*Ssr_CodeBiasesContent
	_io *kaitai.Stream
	_root *Ssr
	_parent *Sbp_SbpMessage
}
func NewSsr_MsgSsrCodeBiases() *Ssr_MsgSsrCodeBiases {
	return &Ssr_MsgSsrCodeBiases{
	}
}

func (this *Ssr_MsgSsrCodeBiases) Read(io *kaitai.Stream, parent *Sbp_SbpMessage, root *Ssr) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp185 := NewGnss_GpsTimeSec()
	err = tmp185.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.Time = tmp185
	tmp186 := NewGnss_GnssSignal()
	err = tmp186.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.Sid = tmp186
	tmp187, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.UpdateInterval = tmp187
	tmp188, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.IodSsr = tmp188
	for i := 1;; i++ {
		tmp189, err := this._io.EOF()
		if err != nil {
			return err
		}
		if tmp189 {
			break
		}
		tmp190 := NewSsr_CodeBiasesContent()
		err = tmp190.Read(this._io, this, this._root)
		if err != nil {
			return err
		}
		this.Biases = append(this.Biases, tmp190)
	}
	return err
}

/**
 * GNSS reference time of the correction
 */

/**
 * GNSS signal identifier (16 bit)
 */

/**
 * Update interval between consecutive corrections. Encoded following
 * RTCM DF391 specification.
 */

/**
 * IOD of the SSR correction. A change of Issue Of Data SSR is used to
 * indicate a change in the SSR generating configuration
 */

/**
 * Code biases for the different satellite signals
 */

/**
 * Provides the correction point coordinates for the atmospheric correction
 * values in the MSG_SSR_STEC_CORRECTION and MSG_SSR_GRIDDED_CORRECTION
 * messages.
 * 
 * Based on ETSI TS 137 355 V16.1.0 (LTE Positioning Protocol) information
 * element GNSS-SSR-CorrectionPoints. SBP only supports gridded arrays of
 * correction points, not lists of points.
 */
type Ssr_MsgSsrTileDefinition struct {
	Time *Gnss_GpsTimeSec
	UpdateInterval uint8
	SolId uint8
	IodAtmo uint8
	TileSetId uint16
	TileId uint16
	CornerNwLat int16
	CornerNwLon int16
	SpacingLat uint16
	SpacingLon uint16
	Rows uint16
	Cols uint16
	Bitmask uint64
	_io *kaitai.Stream
	_root *Ssr
	_parent *Sbp_SbpMessage
}
func NewSsr_MsgSsrTileDefinition() *Ssr_MsgSsrTileDefinition {
	return &Ssr_MsgSsrTileDefinition{
	}
}

func (this *Ssr_MsgSsrTileDefinition) Read(io *kaitai.Stream, parent *Sbp_SbpMessage, root *Ssr) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp191 := NewGnss_GpsTimeSec()
	err = tmp191.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.Time = tmp191
	tmp192, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.UpdateInterval = tmp192
	tmp193, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.SolId = tmp193
	tmp194, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.IodAtmo = tmp194
	tmp195, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.TileSetId = uint16(tmp195)
	tmp196, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.TileId = uint16(tmp196)
	tmp197, err := this._io.ReadS2le()
	if err != nil {
		return err
	}
	this.CornerNwLat = int16(tmp197)
	tmp198, err := this._io.ReadS2le()
	if err != nil {
		return err
	}
	this.CornerNwLon = int16(tmp198)
	tmp199, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.SpacingLat = uint16(tmp199)
	tmp200, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.SpacingLon = uint16(tmp200)
	tmp201, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.Rows = uint16(tmp201)
	tmp202, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.Cols = uint16(tmp202)
	tmp203, err := this._io.ReadU8le()
	if err != nil {
		return err
	}
	this.Bitmask = uint64(tmp203)
	return err
}

/**
 * GNSS reference time of the correction
 */

/**
 * Update interval between consecutive corrections. Encoded following
 * RTCM DF391 specification.
 */

/**
 * SSR Solution ID. Similar to RTCM DF415.
 */

/**
 * IOD of the SSR atmospheric correction.
 */

/**
 * Unique identifier of the tile set this tile belongs to.
 */

/**
 * Unique identifier of this tile in the tile set.
 * See GNSS-SSR-ArrayOfCorrectionPoints field correctionPointSetID.
 */

/**
 * North-West corner correction point latitude.
 * 
 * The relation between the latitude X in the range [-90, 90] and the
 * coded number N is:  N = floor((X / 90) * 2^14)
 * 
 * See GNSS-SSR-ArrayOfCorrectionPoints field referencePointLatitude.
 */

/**
 * North-West corner correction point longitude.
 * 
 * The relation between the longitude X in the range [-180, 180] and
 * the coded number N is: N = floor((X / 180) * 2^15)
 * 
 * See GNSS-SSR-ArrayOfCorrectionPoints field referencePointLongitude.
 */

/**
 * Spacing of the correction points in the latitude direction.
 * 
 * See GNSS-SSR-ArrayOfCorrectionPoints field stepOfLatitude.
 */

/**
 * Spacing of the correction points in the longitude direction.
 * 
 * See GNSS-SSR-ArrayOfCorrectionPoints field stepOfLongitude.
 */

/**
 * Number of steps in the latitude direction.
 * 
 * See GNSS-SSR-ArrayOfCorrectionPoints field numberOfStepsLatitude.
 */

/**
 * Number of steps in the longitude direction.
 * 
 * See GNSS-SSR-ArrayOfCorrectionPoints field numberOfStepsLongitude.
 */

/**
 * Specifies the absence of correction data at the correction points in
 * the array (grid).
 * 
 * Only the first rows * cols bits are used, and if a specific bit is
 * enabled (set to 1), the correction is not available. If there are
 * more than 64 correction points the remaining corrections are always
 * available.
 * 
 * The correction points are packed by rows, starting with the
 * northwest corner of the array (top-left on a north oriented map),
 * with each row spanning west to east, ending with the southeast
 * corner of the array.
 * 
 * See GNSS-SSR-ArrayOfCorrectionPoints field bitmaskOfGrids but note
 * the definition of the bits is inverted.
 */

/**
 * Orbit and clock bound degradation.
 */
type Ssr_OrbitClockBoundDegradation struct {
	OrbRadialBoundMuDot uint8
	OrbAlongBoundMuDot uint8
	OrbCrossBoundMuDot uint8
	OrbRadialBoundSigDot uint8
	OrbAlongBoundSigDot uint8
	OrbCrossBoundSigDot uint8
	ClockBoundMuDot uint8
	ClockBoundSigDot uint8
	_io *kaitai.Stream
	_root *Ssr
	_parent *Ssr_MsgSsrOrbitClockBoundsDegradation
}
func NewSsr_OrbitClockBoundDegradation() *Ssr_OrbitClockBoundDegradation {
	return &Ssr_OrbitClockBoundDegradation{
	}
}

func (this *Ssr_OrbitClockBoundDegradation) Read(io *kaitai.Stream, parent *Ssr_MsgSsrOrbitClockBoundsDegradation, root *Ssr) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp204, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.OrbRadialBoundMuDot = tmp204
	tmp205, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.OrbAlongBoundMuDot = tmp205
	tmp206, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.OrbCrossBoundMuDot = tmp206
	tmp207, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.OrbRadialBoundSigDot = tmp207
	tmp208, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.OrbAlongBoundSigDot = tmp208
	tmp209, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.OrbCrossBoundSigDot = tmp209
	tmp210, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.ClockBoundMuDot = tmp210
	tmp211, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.ClockBoundSigDot = tmp211
	return err
}

/**
 * Orbit Bound Mean Radial First derivative. Range: 0-0.255 m/s
 */

/**
 * Orbit Bound Mean Along-Track First derivative. Range: 0-0.255 m/s
 */

/**
 * Orbit Bound Mean Cross-Track First derivative. Range: 0-0.255 m/s
 */

/**
 * Orbit Bound Standard Deviation Radial First derivative. Range:
 * 0-0.255 m/s
 */

/**
 * Orbit Bound Standard Deviation Along-Track First derivative. Range:
 * 0-0.255 m/s
 */

/**
 * Orbit Bound Standard Deviation Cross-Track First derivative. Range:
 * 0-0.255 m/s
 */

/**
 * Clock Bound Mean First derivative. Range: 0-0.255 m/s
 */

/**
 * Clock Bound Standard Deviation First derivative. Range: 0-0.255 m/s
 */

/**
 * Deprecated.
 */
type Ssr_MsgSsrSatelliteApcDep struct {
	Apc []*Ssr_SatelliteApc
	_io *kaitai.Stream
	_root *Ssr
	_parent *Sbp_SbpMessage
}
func NewSsr_MsgSsrSatelliteApcDep() *Ssr_MsgSsrSatelliteApcDep {
	return &Ssr_MsgSsrSatelliteApcDep{
	}
}

func (this *Ssr_MsgSsrSatelliteApcDep) Read(io *kaitai.Stream, parent *Sbp_SbpMessage, root *Ssr) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	for i := 1;; i++ {
		tmp212, err := this._io.EOF()
		if err != nil {
			return err
		}
		if tmp212 {
			break
		}
		tmp213 := NewSsr_SatelliteApc()
		err = tmp213.Read(this._io, this, this._root)
		if err != nil {
			return err
		}
		this.Apc = append(this.Apc, tmp213)
	}
	return err
}

/**
 * Satellite antenna phase center corrections
 */

/**
 * Troposphere vertical delays (mean and standard deviation) at the grid
 * point.
 */
type Ssr_TroposphericDelayCorrection struct {
	Hydro int16
	Wet int8
	Stddev uint8
	_io *kaitai.Stream
	_root *Ssr
	_parent interface{}
}
func NewSsr_TroposphericDelayCorrection() *Ssr_TroposphericDelayCorrection {
	return &Ssr_TroposphericDelayCorrection{
	}
}

func (this *Ssr_TroposphericDelayCorrection) Read(io *kaitai.Stream, parent interface{}, root *Ssr) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp214, err := this._io.ReadS2le()
	if err != nil {
		return err
	}
	this.Hydro = int16(tmp214)
	tmp215, err := this._io.ReadS1()
	if err != nil {
		return err
	}
	this.Wet = tmp215
	tmp216, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Stddev = tmp216
	return err
}

/**
 * Hydrostatic vertical delay. Add 2.3 m to get actual value.
 */

/**
 * Wet vertical delay. Add 0.252 m to get actual value.
 */

/**
 * Modified DF389. class 3 MSB, value 5 LSB. stddev = (3^class * (1 +
 * value/16) - 1)
 */

/**
 * Deprecated.
 */
type Ssr_MsgSsrTileDefinitionDepB struct {
	SsrSolId uint8
	TileSetId uint16
	TileId uint16
	CornerNwLat int16
	CornerNwLon int16
	SpacingLat uint16
	SpacingLon uint16
	Rows uint16
	Cols uint16
	Bitmask uint64
	_io *kaitai.Stream
	_root *Ssr
	_parent *Sbp_SbpMessage
}
func NewSsr_MsgSsrTileDefinitionDepB() *Ssr_MsgSsrTileDefinitionDepB {
	return &Ssr_MsgSsrTileDefinitionDepB{
	}
}

func (this *Ssr_MsgSsrTileDefinitionDepB) Read(io *kaitai.Stream, parent *Sbp_SbpMessage, root *Ssr) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp217, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.SsrSolId = tmp217
	tmp218, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.TileSetId = uint16(tmp218)
	tmp219, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.TileId = uint16(tmp219)
	tmp220, err := this._io.ReadS2le()
	if err != nil {
		return err
	}
	this.CornerNwLat = int16(tmp220)
	tmp221, err := this._io.ReadS2le()
	if err != nil {
		return err
	}
	this.CornerNwLon = int16(tmp221)
	tmp222, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.SpacingLat = uint16(tmp222)
	tmp223, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.SpacingLon = uint16(tmp223)
	tmp224, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.Rows = uint16(tmp224)
	tmp225, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.Cols = uint16(tmp225)
	tmp226, err := this._io.ReadU8le()
	if err != nil {
		return err
	}
	this.Bitmask = uint64(tmp226)
	return err
}

/**
 * SSR Solution ID.
 */

/**
 * Unique identifier of the tile set this tile belongs to.
 */

/**
 * Unique identifier of this tile in the tile set.
 * See GNSS-SSR-ArrayOfCorrectionPoints field correctionPointSetID.
 */

/**
 * North-West corner correction point latitude.
 * 
 * The relation between the latitude X in the range [-90, 90] and the
 * coded number N is:
 * 
 * N = floor((X / 90) * 2^14)
 * 
 * See GNSS-SSR-ArrayOfCorrectionPoints field referencePointLatitude.
 */

/**
 * North-West corner correction point longitude.
 * 
 * The relation between the longitude X in the range [-180, 180] and
 * the coded number N is:
 * 
 * N = floor((X / 180) * 2^15)
 * 
 * See GNSS-SSR-ArrayOfCorrectionPoints field referencePointLongitude.
 */

/**
 * Spacing of the correction points in the latitude direction.
 * 
 * See GNSS-SSR-ArrayOfCorrectionPoints field stepOfLatitude.
 */

/**
 * Spacing of the correction points in the longitude direction.
 * 
 * See GNSS-SSR-ArrayOfCorrectionPoints field stepOfLongitude.
 */

/**
 * Number of steps in the latitude direction.
 * 
 * See GNSS-SSR-ArrayOfCorrectionPoints field numberOfStepsLatitude.
 */

/**
 * Number of steps in the longitude direction.
 * 
 * See GNSS-SSR-ArrayOfCorrectionPoints field numberOfStepsLongitude.
 */

/**
 * Specifies the availability of correction data at the correction
 * points in the array.
 * 
 * If a specific bit is enabled (set to 1), the correction is not
 * available. Only the first rows * cols bits are used, the remainder
 * are set to 0. If there are more then 64 correction points the
 * remaining corrections are always available.
 * 
 * Starting with the northwest corner of the array (top left on a north
 * oriented map) the correction points are enumerated with row
 * precedence - first row west to east, second row west to east, until
 * last row west to east - ending with the southeast corner of the
 * array.
 * 
 * See GNSS-SSR-ArrayOfCorrectionPoints field bitmaskOfGrids but note
 * the definition of the bits is inverted.
 */

/**
 * The precise phase biases message contains the biases to be added to the
 * carrier phase of the corresponding signal to get corrected carrier phase
 * measurement, as well as the satellite yaw angle to be applied to compute
 * the phase wind-up correction. It is typically an equivalent to the 1265
 * RTCM message types.
 */
type Ssr_MsgSsrPhaseBiases struct {
	Time *Gnss_GpsTimeSec
	Sid *Gnss_GnssSignal
	UpdateInterval uint8
	IodSsr uint8
	DispersiveBias uint8
	MwConsistency uint8
	Yaw uint16
	YawRate int8
	Biases []*Ssr_PhaseBiasesContent
	_io *kaitai.Stream
	_root *Ssr
	_parent *Sbp_SbpMessage
}
func NewSsr_MsgSsrPhaseBiases() *Ssr_MsgSsrPhaseBiases {
	return &Ssr_MsgSsrPhaseBiases{
	}
}

func (this *Ssr_MsgSsrPhaseBiases) Read(io *kaitai.Stream, parent *Sbp_SbpMessage, root *Ssr) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp227 := NewGnss_GpsTimeSec()
	err = tmp227.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.Time = tmp227
	tmp228 := NewGnss_GnssSignal()
	err = tmp228.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.Sid = tmp228
	tmp229, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.UpdateInterval = tmp229
	tmp230, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.IodSsr = tmp230
	tmp231, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.DispersiveBias = tmp231
	tmp232, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.MwConsistency = tmp232
	tmp233, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.Yaw = uint16(tmp233)
	tmp234, err := this._io.ReadS1()
	if err != nil {
		return err
	}
	this.YawRate = tmp234
	for i := 1;; i++ {
		tmp235, err := this._io.EOF()
		if err != nil {
			return err
		}
		if tmp235 {
			break
		}
		tmp236 := NewSsr_PhaseBiasesContent()
		err = tmp236.Read(this._io, this, this._root)
		if err != nil {
			return err
		}
		this.Biases = append(this.Biases, tmp236)
	}
	return err
}

/**
 * GNSS reference time of the correction
 */

/**
 * GNSS signal identifier (16 bit)
 */

/**
 * Update interval between consecutive corrections. Encoded following
 * RTCM DF391 specification.
 */

/**
 * IOD of the SSR correction. A change of Issue Of Data SSR is used to
 * indicate a change in the SSR generating configuration
 */

/**
 * Indicator for the dispersive phase biases property.
 */

/**
 * Consistency indicator for Melbourne-Wubbena linear combinations
 */

/**
 * Satellite yaw angle
 */

/**
 * Satellite yaw angle rate
 */

/**
 * Phase biases corrections for a satellite being tracked.
 */
