// Code generated by kaitai-struct-compiler from a .ksy source file. DO NOT EDIT.

import "github.com/kaitai-io/kaitai_struct_go_runtime/kaitai"

type Telemetry struct {
	_io *kaitai.Stream
	_root *Telemetry
	_parent interface{}
}
func NewTelemetry() *Telemetry {
	return &Telemetry{
	}
}

func (this *Telemetry) Read(io *kaitai.Stream, parent interface{}, root *Telemetry) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	return err
}
type Telemetry_TelemetrySv struct {
	Az uint8
	El int8
	AvailabilityFlags uint8
	PseudorangeResidual int16
	PhaseResidual int16
	OutlierFlags uint8
	EphemerisFlags uint8
	CorrectionFlags uint8
	Sid *Gnss_GnssSignal
	_io *kaitai.Stream
	_root *Telemetry
	_parent *Telemetry_MsgTelSv
}
func NewTelemetry_TelemetrySv() *Telemetry_TelemetrySv {
	return &Telemetry_TelemetrySv{
	}
}

func (this *Telemetry_TelemetrySv) Read(io *kaitai.Stream, parent *Telemetry_MsgTelSv, root *Telemetry) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp1, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Az = tmp1
	tmp2, err := this._io.ReadS1()
	if err != nil {
		return err
	}
	this.El = tmp2
	tmp3, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.AvailabilityFlags = tmp3
	tmp4, err := this._io.ReadS2le()
	if err != nil {
		return err
	}
	this.PseudorangeResidual = int16(tmp4)
	tmp5, err := this._io.ReadS2le()
	if err != nil {
		return err
	}
	this.PhaseResidual = int16(tmp5)
	tmp6, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.OutlierFlags = tmp6
	tmp7, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.EphemerisFlags = tmp7
	tmp8, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.CorrectionFlags = tmp8
	tmp9 := NewGnss_GnssSignal()
	err = tmp9.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.Sid = tmp9
	return err
}

/**
 * Azimuth angle (range 0..179)
 */

/**
 * Elevation angle (range -90..90)
 */

/**
 * Observation availability at filter update
 */

/**
 * Pseudorange observation residual
 */

/**
 * Carrier-phase or carrier-phase-derived observation residual
 */

/**
 * Reports if observation is marked as an outlier and is excluded from
 * the update
 */

/**
 * Ephemeris metadata
 */

/**
 * Reserved
 */

/**
 * GNSS signal identifier (16 bit)
 */

/**
 * This message includes telemetry pertinent to satellite signals available
 * to Starling.
 */
type Telemetry_MsgTelSv struct {
	Wn uint16
	Tow uint32
	NObs uint8
	OriginFlags uint8
	SvTel []*Telemetry_TelemetrySv
	_io *kaitai.Stream
	_root *Telemetry
	_parent *Sbp_Message
}
func NewTelemetry_MsgTelSv() *Telemetry_MsgTelSv {
	return &Telemetry_MsgTelSv{
	}
}

func (this *Telemetry_MsgTelSv) Read(io *kaitai.Stream, parent *Sbp_Message, root *Telemetry) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp10, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.Wn = uint16(tmp10)
	tmp11, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.Tow = uint32(tmp11)
	tmp12, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.NObs = tmp12
	tmp13, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.OriginFlags = tmp13
	for i := 1;; i++ {
		tmp14, err := this._io.EOF()
		if err != nil {
			return err
		}
		if tmp14 {
			break
		}
		tmp15 := NewTelemetry_TelemetrySv()
		err = tmp15.Read(this._io, this, this._root)
		if err != nil {
			return err
		}
		this.SvTel = append(this.SvTel, tmp15)
	}
	return err
}

/**
 * GPS week number
 */

/**
 * GPS Time of Week
 */

/**
 * Total number of observations. First nibble is the size of the
 * sequence (n), second nibble is the zero-indexed counter (ith packet
 * of n)
 */

/**
 * Flags to identify the filter type from which the telemetry is
 * reported from
 */

/**
 * Array of per-signal telemetry entries
 */
