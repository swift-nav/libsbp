// Code generated by kaitai-struct-compiler from a .ksy source file. DO NOT EDIT.

import "github.com/kaitai-io/kaitai_struct_go_runtime/kaitai"

type Piksi struct {
	_io *kaitai.Stream
	_root *Piksi
	_parent interface{}
}
func NewPiksi() *Piksi {
	return &Piksi{
	}
}

func (this *Piksi) Read(io *kaitai.Stream, parent interface{}, root *Piksi) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	return err
}

/**
 * The state of a network interface on the Piksi. Data is made to reflect
 * output of ifaddrs struct returned by getifaddrs in c.
 */
type Piksi_MsgNetworkStateResp struct {
	Ipv4Address []uint8
	Ipv4MaskSize uint8
	Ipv6Address []uint8
	Ipv6MaskSize uint8
	RxBytes uint32
	TxBytes uint32
	InterfaceName string
	Flags uint32
	_io *kaitai.Stream
	_root *Piksi
	_parent *Sbp_Message
}
func NewPiksi_MsgNetworkStateResp() *Piksi_MsgNetworkStateResp {
	return &Piksi_MsgNetworkStateResp{
	}
}

func (this *Piksi_MsgNetworkStateResp) Read(io *kaitai.Stream, parent *Sbp_Message, root *Piksi) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	for i := 0; i < int(4); i++ {
		_ = i
		tmp1, err := this._io.ReadU1()
		if err != nil {
			return err
		}
		this.Ipv4Address = append(this.Ipv4Address, tmp1)
	}
	tmp2, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Ipv4MaskSize = tmp2
	for i := 0; i < int(16); i++ {
		_ = i
		tmp3, err := this._io.ReadU1()
		if err != nil {
			return err
		}
		this.Ipv6Address = append(this.Ipv6Address, tmp3)
	}
	tmp4, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Ipv6MaskSize = tmp4
	tmp5, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.RxBytes = uint32(tmp5)
	tmp6, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.TxBytes = uint32(tmp6)
	tmp7, err := this._io.ReadBytes(int(16))
	if err != nil {
		return err
	}
	tmp7 = tmp7
	this.InterfaceName = string(tmp7)
	tmp8, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.Flags = uint32(tmp8)
	return err
}

/**
 * IPv4 address (all zero when unavailable)
 */

/**
 * IPv4 netmask CIDR notation
 */

/**
 * IPv6 address (all zero when unavailable)
 */

/**
 * IPv6 netmask CIDR notation
 */

/**
 * Number of Rx bytes
 */

/**
 * Number of Tx bytes
 */

/**
 * Interface Name
 */

/**
 * Interface flags from SIOCGIFFLAGS
 */

/**
 * The bandwidth usage for each interface can be reported within this
 * struct and utilize multiple fields to fully specify the type of traffic
 * that is being tracked. As either the interval of collection or the
 * collection time may vary, both a timestamp and period field is provided,
 * though may not necessarily be populated with a value.
 */
type Piksi_NetworkUsage struct {
	Duration uint64
	TotalBytes uint64
	RxBytes uint32
	TxBytes uint32
	InterfaceName string
	_io *kaitai.Stream
	_root *Piksi
	_parent *Piksi_MsgNetworkBandwidthUsage
}
func NewPiksi_NetworkUsage() *Piksi_NetworkUsage {
	return &Piksi_NetworkUsage{
	}
}

func (this *Piksi_NetworkUsage) Read(io *kaitai.Stream, parent *Piksi_MsgNetworkBandwidthUsage, root *Piksi) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp9, err := this._io.ReadU8le()
	if err != nil {
		return err
	}
	this.Duration = uint64(tmp9)
	tmp10, err := this._io.ReadU8le()
	if err != nil {
		return err
	}
	this.TotalBytes = uint64(tmp10)
	tmp11, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.RxBytes = uint32(tmp11)
	tmp12, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.TxBytes = uint32(tmp12)
	tmp13, err := this._io.ReadBytes(int(16))
	if err != nil {
		return err
	}
	tmp13 = tmp13
	this.InterfaceName = string(tmp13)
	return err
}

/**
 * Duration over which the measurement was collected
 */

/**
 * Number of bytes handled in total within period
 */

/**
 * Number of bytes transmitted within period
 */

/**
 * Number of bytes received within period
 */

/**
 * Interface Name
 */

/**
 * The response to MSG_COMMAND_REQ with the return code of the command.  A
 * return code of zero indicates success.
 */
type Piksi_MsgCommandResp struct {
	Sequence uint32
	Code int32
	_io *kaitai.Stream
	_root *Piksi
	_parent *Sbp_Message
}
func NewPiksi_MsgCommandResp() *Piksi_MsgCommandResp {
	return &Piksi_MsgCommandResp{
	}
}

func (this *Piksi_MsgCommandResp) Read(io *kaitai.Stream, parent *Sbp_Message, root *Piksi) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp14, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.Sequence = uint32(tmp14)
	tmp15, err := this._io.ReadS4le()
	if err != nil {
		return err
	}
	this.Code = int32(tmp15)
	return err
}

/**
 * Sequence number
 */

/**
 * Exit code
 */

/**
 * Returns the standard output and standard error of the command requested
 * by MSG_COMMAND_REQ. The sequence number can be used to filter for
 * filtering the correct command.
 */
type Piksi_MsgCommandOutput struct {
	Sequence uint32
	Line string
	_io *kaitai.Stream
	_root *Piksi
	_parent *Sbp_Message
}
func NewPiksi_MsgCommandOutput() *Piksi_MsgCommandOutput {
	return &Piksi_MsgCommandOutput{
	}
}

func (this *Piksi_MsgCommandOutput) Read(io *kaitai.Stream, parent *Sbp_Message, root *Piksi) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp16, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.Sequence = uint32(tmp16)
	tmp17, err := this._io.ReadBytesFull()
	if err != nil {
		return err
	}
	tmp17 = tmp17
	this.Line = string(tmp17)
	return err
}

/**
 * Sequence number
 */

/**
 * Line of standard output or standard error
 */

/**
 * Statistics on the latency of observations received from the base
 * station. As observation packets are received their GPS time is compared
 * to the current GPS time calculated locally by the receiver to give a
 * precise measurement of the end-to-end communication latency in the
 * system.
 */
type Piksi_Latency struct {
	Avg int32
	Lmin int32
	Lmax int32
	Current int32
	_io *kaitai.Stream
	_root *Piksi
	_parent interface{}
}
func NewPiksi_Latency() *Piksi_Latency {
	return &Piksi_Latency{
	}
}

func (this *Piksi_Latency) Read(io *kaitai.Stream, parent interface{}, root *Piksi) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp18, err := this._io.ReadS4le()
	if err != nil {
		return err
	}
	this.Avg = int32(tmp18)
	tmp19, err := this._io.ReadS4le()
	if err != nil {
		return err
	}
	this.Lmin = int32(tmp19)
	tmp20, err := this._io.ReadS4le()
	if err != nil {
		return err
	}
	this.Lmax = int32(tmp20)
	tmp21, err := this._io.ReadS4le()
	if err != nil {
		return err
	}
	this.Current = int32(tmp21)
	return err
}

/**
 * Average latency
 */

/**
 * Minimum latency
 */

/**
 * Maximum latency
 */

/**
 * Smoothed estimate of the current latency
 */

/**
 * The thread usage message from the device reports real-time operating
 * system (RTOS) thread usage statistics for the named thread. The reported
 * percentage values must be normalized.
 */
type Piksi_MsgThreadState struct {
	Name string
	Cpu uint16
	StackFree uint32
	_io *kaitai.Stream
	_root *Piksi
	_parent *Sbp_Message
}
func NewPiksi_MsgThreadState() *Piksi_MsgThreadState {
	return &Piksi_MsgThreadState{
	}
}

func (this *Piksi_MsgThreadState) Read(io *kaitai.Stream, parent *Sbp_Message, root *Piksi) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp22, err := this._io.ReadBytes(int(20))
	if err != nil {
		return err
	}
	tmp22 = tmp22
	this.Name = string(tmp22)
	tmp23, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.Cpu = uint16(tmp23)
	tmp24, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.StackFree = uint32(tmp24)
	return err
}

/**
 * Thread name (NULL terminated)
 */

/**
 * Percentage cpu use for this thread. Values range from 0 - 1000 and
 * needs to be renormalized to 100
 */

/**
 * Free stack space for this thread
 */

/**
 * Deprecated
 */
type Piksi_MsgUartStateDepa struct {
	UartA *Piksi_UartChannel
	UartB *Piksi_UartChannel
	UartFtdi *Piksi_UartChannel
	Latency *Piksi_Latency
	_io *kaitai.Stream
	_root *Piksi
	_parent *Sbp_Message
}
func NewPiksi_MsgUartStateDepa() *Piksi_MsgUartStateDepa {
	return &Piksi_MsgUartStateDepa{
	}
}

func (this *Piksi_MsgUartStateDepa) Read(io *kaitai.Stream, parent *Sbp_Message, root *Piksi) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp25 := NewPiksi_UartChannel()
	err = tmp25.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.UartA = tmp25
	tmp26 := NewPiksi_UartChannel()
	err = tmp26.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.UartB = tmp26
	tmp27 := NewPiksi_UartChannel()
	err = tmp27.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.UartFtdi = tmp27
	tmp28 := NewPiksi_Latency()
	err = tmp28.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.Latency = tmp28
	return err
}

/**
 * State of UART A
 */

/**
 * State of UART B
 */

/**
 * State of UART FTDI (USB logger)
 */

/**
 * UART communication latency
 */

/**
 * Request state of Piksi network interfaces. Output will be sent in
 * MSG_NETWORK_STATE_RESP messages.
 */
type Piksi_MsgNetworkStateReq struct {
	_io *kaitai.Stream
	_root *Piksi
	_parent *Sbp_Message
}
func NewPiksi_MsgNetworkStateReq() *Piksi_MsgNetworkStateReq {
	return &Piksi_MsgNetworkStateReq{
	}
}

func (this *Piksi_MsgNetworkStateReq) Read(io *kaitai.Stream, parent *Sbp_Message, root *Piksi) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	return err
}

/**
 * This message contains temperature and voltage level measurements from
 * the processor's monitoring system and the RF frontend die temperature if
 * available.
 */
type Piksi_MsgDeviceMonitor struct {
	DevVin int16
	CpuVint int16
	CpuVaux int16
	CpuTemperature int16
	FeTemperature int16
	_io *kaitai.Stream
	_root *Piksi
	_parent *Sbp_Message
}
func NewPiksi_MsgDeviceMonitor() *Piksi_MsgDeviceMonitor {
	return &Piksi_MsgDeviceMonitor{
	}
}

func (this *Piksi_MsgDeviceMonitor) Read(io *kaitai.Stream, parent *Sbp_Message, root *Piksi) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp29, err := this._io.ReadS2le()
	if err != nil {
		return err
	}
	this.DevVin = int16(tmp29)
	tmp30, err := this._io.ReadS2le()
	if err != nil {
		return err
	}
	this.CpuVint = int16(tmp30)
	tmp31, err := this._io.ReadS2le()
	if err != nil {
		return err
	}
	this.CpuVaux = int16(tmp31)
	tmp32, err := this._io.ReadS2le()
	if err != nil {
		return err
	}
	this.CpuTemperature = int16(tmp32)
	tmp33, err := this._io.ReadS2le()
	if err != nil {
		return err
	}
	this.FeTemperature = int16(tmp33)
	return err
}

/**
 * Device V_in
 */

/**
 * Processor V_int
 */

/**
 * Processor V_aux
 */

/**
 * Processor temperature
 */

/**
 * Frontend temperature (if available)
 */

/**
 * Deprecated.
 */
type Piksi_MsgMaskSatelliteDep struct {
	Mask uint8
	Sid *Gnss_GnssSignalDep
	_io *kaitai.Stream
	_root *Piksi
	_parent *Sbp_Message
}
func NewPiksi_MsgMaskSatelliteDep() *Piksi_MsgMaskSatelliteDep {
	return &Piksi_MsgMaskSatelliteDep{
	}
}

func (this *Piksi_MsgMaskSatelliteDep) Read(io *kaitai.Stream, parent *Sbp_Message, root *Piksi) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp34, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Mask = tmp34
	tmp35 := NewGnss_GnssSignalDep()
	err = tmp35.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.Sid = tmp35
	return err
}

/**
 * Mask of systems that should ignore this satellite.
 */

/**
 * GNSS signal for which the mask is applied
 */

/**
 * The UART message reports data latency and throughput of the UART
 * channels providing SBP I/O. On the default Piksi configuration, UARTs A
 * and B are used for telemetry radios, but can also be host access ports
 * for embedded hosts, or other interfaces in future. The reported
 * percentage values must be normalized. Observations latency and period
 * can be used to assess the health of the differential corrections link.
 * Latency provides the timeliness of received base observations while the
 * period indicates their likelihood of transmission.
 */
type Piksi_MsgUartState struct {
	UartA *Piksi_UartChannel
	UartB *Piksi_UartChannel
	UartFtdi *Piksi_UartChannel
	Latency *Piksi_Latency
	ObsPeriod *Piksi_Period
	_io *kaitai.Stream
	_root *Piksi
	_parent *Sbp_Message
}
func NewPiksi_MsgUartState() *Piksi_MsgUartState {
	return &Piksi_MsgUartState{
	}
}

func (this *Piksi_MsgUartState) Read(io *kaitai.Stream, parent *Sbp_Message, root *Piksi) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp36 := NewPiksi_UartChannel()
	err = tmp36.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.UartA = tmp36
	tmp37 := NewPiksi_UartChannel()
	err = tmp37.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.UartB = tmp37
	tmp38 := NewPiksi_UartChannel()
	err = tmp38.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.UartFtdi = tmp38
	tmp39 := NewPiksi_Latency()
	err = tmp39.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.Latency = tmp39
	tmp40 := NewPiksi_Period()
	err = tmp40.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.ObsPeriod = tmp40
	return err
}

/**
 * State of UART A
 */

/**
 * State of UART B
 */

/**
 * State of UART FTDI (USB logger)
 */

/**
 * UART communication latency
 */

/**
 * Observation receipt period
 */

/**
 * Spectrum analyzer packet.
 */
type Piksi_MsgSpecan struct {
	ChannelTag uint16
	T *Gnss_GpsTime
	FreqRef float32
	FreqStep float32
	AmplitudeRef float32
	AmplitudeUnit float32
	AmplitudeValue []uint8
	_io *kaitai.Stream
	_root *Piksi
	_parent *Sbp_Message
}
func NewPiksi_MsgSpecan() *Piksi_MsgSpecan {
	return &Piksi_MsgSpecan{
	}
}

func (this *Piksi_MsgSpecan) Read(io *kaitai.Stream, parent *Sbp_Message, root *Piksi) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp41, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.ChannelTag = uint16(tmp41)
	tmp42 := NewGnss_GpsTime()
	err = tmp42.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.T = tmp42
	tmp43, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.FreqRef = float32(tmp43)
	tmp44, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.FreqStep = float32(tmp44)
	tmp45, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.AmplitudeRef = float32(tmp45)
	tmp46, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.AmplitudeUnit = float32(tmp46)
	for i := 1;; i++ {
		tmp47, err := this._io.EOF()
		if err != nil {
			return err
		}
		if tmp47 {
			break
		}
		tmp48, err := this._io.ReadU1()
		if err != nil {
			return err
		}
		this.AmplitudeValue = append(this.AmplitudeValue, tmp48)
	}
	return err
}

/**
 * Channel ID
 */

/**
 * Receiver time of this observation
 */

/**
 * Reference frequency of this packet
 */

/**
 * Frequency step of points in this packet
 */

/**
 * Reference amplitude of this packet
 */

/**
 * Amplitude unit value of points in this packet
 */

/**
 * Amplitude values (in the above units) of points in this packet
 */

/**
 * This message reports the state of the Integer Ambiguity Resolution (IAR)
 * process, which resolves unknown integer ambiguities from double-
 * differenced carrier-phase measurements from satellite observations.
 */
type Piksi_MsgIarState struct {
	NumHyps uint32
	_io *kaitai.Stream
	_root *Piksi
	_parent *Sbp_Message
}
func NewPiksi_MsgIarState() *Piksi_MsgIarState {
	return &Piksi_MsgIarState{
	}
}

func (this *Piksi_MsgIarState) Read(io *kaitai.Stream, parent *Sbp_Message, root *Piksi) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp49, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.NumHyps = uint32(tmp49)
	return err
}

/**
 * Number of integer ambiguity hypotheses remaining
 */

/**
 * This is a legacy message for sending and loading a satellite alamanac
 * onto the Piksi's flash memory from the host.
 */
type Piksi_MsgAlmanac struct {
	_io *kaitai.Stream
	_root *Piksi
	_parent *Sbp_Message
}
func NewPiksi_MsgAlmanac() *Piksi_MsgAlmanac {
	return &Piksi_MsgAlmanac{
	}
}

func (this *Piksi_MsgAlmanac) Read(io *kaitai.Stream, parent *Sbp_Message, root *Piksi) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	return err
}

/**
 * This message resets either the DGNSS Kalman filters or Integer Ambiguity
 * Resolution (IAR) process.
 */
type Piksi_MsgResetFilters struct {
	Filter uint8
	_io *kaitai.Stream
	_root *Piksi
	_parent *Sbp_Message
}
func NewPiksi_MsgResetFilters() *Piksi_MsgResetFilters {
	return &Piksi_MsgResetFilters{
	}
}

func (this *Piksi_MsgResetFilters) Read(io *kaitai.Stream, parent *Sbp_Message, root *Piksi) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp50, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Filter = tmp50
	return err
}

/**
 * Filter flags
 */

/**
 * Throughput, utilization, and error counts on the RX/TX buffers of this
 * UART channel. The reported percentage values must be normalized.
 */
type Piksi_UartChannel struct {
	TxThroughput float32
	RxThroughput float32
	CrcErrorCount uint16
	IoErrorCount uint16
	TxBufferLevel uint8
	RxBufferLevel uint8
	_io *kaitai.Stream
	_root *Piksi
	_parent interface{}
}
func NewPiksi_UartChannel() *Piksi_UartChannel {
	return &Piksi_UartChannel{
	}
}

func (this *Piksi_UartChannel) Read(io *kaitai.Stream, parent interface{}, root *Piksi) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp51, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.TxThroughput = float32(tmp51)
	tmp52, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.RxThroughput = float32(tmp52)
	tmp53, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.CrcErrorCount = uint16(tmp53)
	tmp54, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.IoErrorCount = uint16(tmp54)
	tmp55, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.TxBufferLevel = tmp55
	tmp56, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.RxBufferLevel = tmp56
	return err
}

/**
 * UART transmit throughput
 */

/**
 * UART receive throughput
 */

/**
 * UART CRC error count
 */

/**
 * UART IO error count
 */

/**
 * UART transmit buffer percentage utilization (ranges from 0 to 255)
 */

/**
 * UART receive buffer percentage utilization (ranges from 0 to 255)
 */

/**
 * Request the recipient to execute an command. Output will be sent in
 * MSG_LOG messages, and the exit code will be returned with
 * MSG_COMMAND_RESP.
 */
type Piksi_MsgCommandReq struct {
	Sequence uint32
	Command string
	_io *kaitai.Stream
	_root *Piksi
	_parent *Sbp_Message
}
func NewPiksi_MsgCommandReq() *Piksi_MsgCommandReq {
	return &Piksi_MsgCommandReq{
	}
}

func (this *Piksi_MsgCommandReq) Read(io *kaitai.Stream, parent *Sbp_Message, root *Piksi) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp57, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.Sequence = uint32(tmp57)
	tmp58, err := this._io.ReadBytesFull()
	if err != nil {
		return err
	}
	tmp58 = tmp58
	this.Command = string(tmp58)
	return err
}

/**
 * Sequence number
 */

/**
 * Command line to execute
 */

/**
 * This message allows setting a mask to prevent a particular satellite
 * from being used in various Piksi subsystems.
 */
type Piksi_MsgMaskSatellite struct {
	Mask uint8
	Sid *Gnss_GnssSignal
	_io *kaitai.Stream
	_root *Piksi
	_parent *Sbp_Message
}
func NewPiksi_MsgMaskSatellite() *Piksi_MsgMaskSatellite {
	return &Piksi_MsgMaskSatellite{
	}
}

func (this *Piksi_MsgMaskSatellite) Read(io *kaitai.Stream, parent *Sbp_Message, root *Piksi) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp59, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Mask = tmp59
	tmp60 := NewGnss_GnssSignal()
	err = tmp60.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.Sid = tmp60
	return err
}

/**
 * Mask of systems that should ignore this satellite.
 */

/**
 * GNSS signal for which the mask is applied
 */

/**
 * The bandwidth usage, a list of usage by interface.
 */
type Piksi_MsgNetworkBandwidthUsage struct {
	Interfaces []*Piksi_NetworkUsage
	_io *kaitai.Stream
	_root *Piksi
	_parent *Sbp_Message
}
func NewPiksi_MsgNetworkBandwidthUsage() *Piksi_MsgNetworkBandwidthUsage {
	return &Piksi_MsgNetworkBandwidthUsage{
	}
}

func (this *Piksi_MsgNetworkBandwidthUsage) Read(io *kaitai.Stream, parent *Sbp_Message, root *Piksi) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	for i := 1;; i++ {
		tmp61, err := this._io.EOF()
		if err != nil {
			return err
		}
		if tmp61 {
			break
		}
		tmp62 := NewPiksi_NetworkUsage()
		err = tmp62.Read(this._io, this, this._root)
		if err != nil {
			return err
		}
		this.Interfaces = append(this.Interfaces, tmp62)
	}
	return err
}

/**
 * Usage measurement array
 */

/**
 * This message from the host resets the Piksi back into the bootloader.
 */
type Piksi_MsgReset struct {
	Flags uint32
	_io *kaitai.Stream
	_root *Piksi
	_parent *Sbp_Message
}
func NewPiksi_MsgReset() *Piksi_MsgReset {
	return &Piksi_MsgReset{
	}
}

func (this *Piksi_MsgReset) Read(io *kaitai.Stream, parent *Sbp_Message, root *Piksi) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp63, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.Flags = uint32(tmp63)
	return err
}

/**
 * Reset flags
 */

/**
 * If a cell modem is present on a piksi device, this message will be send
 * periodically to update the host on the status of the modem and its
 * various parameters.
 */
type Piksi_MsgCellModemStatus struct {
	SignalStrength int8
	SignalErrorRate float32
	Reserved []uint8
	_io *kaitai.Stream
	_root *Piksi
	_parent *Sbp_Message
}
func NewPiksi_MsgCellModemStatus() *Piksi_MsgCellModemStatus {
	return &Piksi_MsgCellModemStatus{
	}
}

func (this *Piksi_MsgCellModemStatus) Read(io *kaitai.Stream, parent *Sbp_Message, root *Piksi) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp64, err := this._io.ReadS1()
	if err != nil {
		return err
	}
	this.SignalStrength = tmp64
	tmp65, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.SignalErrorRate = float32(tmp65)
	for i := 1;; i++ {
		tmp66, err := this._io.EOF()
		if err != nil {
			return err
		}
		if tmp66 {
			break
		}
		tmp67, err := this._io.ReadU1()
		if err != nil {
			return err
		}
		this.Reserved = append(this.Reserved, tmp67)
	}
	return err
}

/**
 * Received cell signal strength in dBm, zero translates to unknown
 */

/**
 * BER as reported by the modem, zero translates to unknown
 */

/**
 * Unspecified data TBD for this schema
 */

/**
 * This message describes the gain of each channel in the receiver
 * frontend. Each gain is encoded as a non-dimensional percentage relative
 * to the maximum range possible for the gain stage of the frontend. By
 * convention, each gain array has 8 entries and the index of the array
 * corresponding to the index of the rf channel in the frontend. A gain of
 * 127 percent encodes that rf channel is not present in the hardware. A
 * negative value implies an error for the particular gain stage as
 * reported by the frontend.
 */
type Piksi_MsgFrontEndGain struct {
	RfGain []int8
	IfGain []int8
	_io *kaitai.Stream
	_root *Piksi
	_parent *Sbp_Message
}
func NewPiksi_MsgFrontEndGain() *Piksi_MsgFrontEndGain {
	return &Piksi_MsgFrontEndGain{
	}
}

func (this *Piksi_MsgFrontEndGain) Read(io *kaitai.Stream, parent *Sbp_Message, root *Piksi) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	for i := 0; i < int(8); i++ {
		_ = i
		tmp68, err := this._io.ReadS1()
		if err != nil {
			return err
		}
		this.RfGain = append(this.RfGain, tmp68)
	}
	for i := 0; i < int(8); i++ {
		_ = i
		tmp69, err := this._io.ReadS1()
		if err != nil {
			return err
		}
		this.IfGain = append(this.IfGain, tmp69)
	}
	return err
}

/**
 * RF gain for each frontend channel
 */

/**
 * Intermediate frequency gain for each frontend channel
 */

/**
 * This message from the host resets the Piksi back into the bootloader.
 */
type Piksi_MsgResetDep struct {
	_io *kaitai.Stream
	_root *Piksi
	_parent *Sbp_Message
}
func NewPiksi_MsgResetDep() *Piksi_MsgResetDep {
	return &Piksi_MsgResetDep{
	}
}

func (this *Piksi_MsgResetDep) Read(io *kaitai.Stream, parent *Sbp_Message, root *Piksi) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	return err
}

/**
 * This message sets up timing functionality using a coarse GPS time
 * estimate sent by the host.
 */
type Piksi_MsgSetTime struct {
	_io *kaitai.Stream
	_root *Piksi
	_parent *Sbp_Message
}
func NewPiksi_MsgSetTime() *Piksi_MsgSetTime {
	return &Piksi_MsgSetTime{
	}
}

func (this *Piksi_MsgSetTime) Read(io *kaitai.Stream, parent *Sbp_Message, root *Piksi) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	return err
}

/**
 * This is an unused legacy message for result reporting from the CW
 * interference channel on the SwiftNAP. This message will be removed in a
 * future release.
 */
type Piksi_MsgCwResults struct {
	_io *kaitai.Stream
	_root *Piksi
	_parent *Sbp_Message
}
func NewPiksi_MsgCwResults() *Piksi_MsgCwResults {
	return &Piksi_MsgCwResults{
	}
}

func (this *Piksi_MsgCwResults) Read(io *kaitai.Stream, parent *Sbp_Message, root *Piksi) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	return err
}

/**
 * Deprecated.
 */
type Piksi_MsgSpecanDep struct {
	ChannelTag uint16
	T *Gnss_GpsTimeDep
	FreqRef float32
	FreqStep float32
	AmplitudeRef float32
	AmplitudeUnit float32
	AmplitudeValue []uint8
	_io *kaitai.Stream
	_root *Piksi
	_parent *Sbp_Message
}
func NewPiksi_MsgSpecanDep() *Piksi_MsgSpecanDep {
	return &Piksi_MsgSpecanDep{
	}
}

func (this *Piksi_MsgSpecanDep) Read(io *kaitai.Stream, parent *Sbp_Message, root *Piksi) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp70, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.ChannelTag = uint16(tmp70)
	tmp71 := NewGnss_GpsTimeDep()
	err = tmp71.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.T = tmp71
	tmp72, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.FreqRef = float32(tmp72)
	tmp73, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.FreqStep = float32(tmp73)
	tmp74, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.AmplitudeRef = float32(tmp74)
	tmp75, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.AmplitudeUnit = float32(tmp75)
	for i := 1;; i++ {
		tmp76, err := this._io.EOF()
		if err != nil {
			return err
		}
		if tmp76 {
			break
		}
		tmp77, err := this._io.ReadU1()
		if err != nil {
			return err
		}
		this.AmplitudeValue = append(this.AmplitudeValue, tmp77)
	}
	return err
}

/**
 * Channel ID
 */

/**
 * Receiver time of this observation
 */

/**
 * Reference frequency of this packet
 */

/**
 * Frequency step of points in this packet
 */

/**
 * Reference amplitude of this packet
 */

/**
 * Amplitude unit value of points in this packet
 */

/**
 * Amplitude values (in the above units) of points in this packet
 */

/**
 * Deprecated
 */
type Piksi_MsgInitBaseDep struct {
	_io *kaitai.Stream
	_root *Piksi
	_parent *Sbp_Message
}
func NewPiksi_MsgInitBaseDep() *Piksi_MsgInitBaseDep {
	return &Piksi_MsgInitBaseDep{
	}
}

func (this *Piksi_MsgInitBaseDep) Read(io *kaitai.Stream, parent *Sbp_Message, root *Piksi) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	return err
}

/**
 * Statistics on the period of observations received from the base station.
 * As complete observation sets are received, their time of reception is
 * compared with the prior set''s time of reception. This measurement
 * provides a proxy for link quality as incomplete or missing sets will
 * increase the period.  Long periods can cause momentary RTK solution
 * outages.
 */
type Piksi_Period struct {
	Avg int32
	Pmin int32
	Pmax int32
	Current int32
	_io *kaitai.Stream
	_root *Piksi
	_parent *Piksi_MsgUartState
}
func NewPiksi_Period() *Piksi_Period {
	return &Piksi_Period{
	}
}

func (this *Piksi_Period) Read(io *kaitai.Stream, parent *Piksi_MsgUartState, root *Piksi) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp78, err := this._io.ReadS4le()
	if err != nil {
		return err
	}
	this.Avg = int32(tmp78)
	tmp79, err := this._io.ReadS4le()
	if err != nil {
		return err
	}
	this.Pmin = int32(tmp79)
	tmp80, err := this._io.ReadS4le()
	if err != nil {
		return err
	}
	this.Pmax = int32(tmp80)
	tmp81, err := this._io.ReadS4le()
	if err != nil {
		return err
	}
	this.Current = int32(tmp81)
	return err
}

/**
 * Average period
 */

/**
 * Minimum period
 */

/**
 * Maximum period
 */

/**
 * Smoothed estimate of the current period
 */

/**
 * This is an unused legacy message from the host for starting the CW
 * interference channel on the SwiftNAP. This message will be removed in a
 * future release.
 */
type Piksi_MsgCwStart struct {
	_io *kaitai.Stream
	_root *Piksi
	_parent *Sbp_Message
}
func NewPiksi_MsgCwStart() *Piksi_MsgCwStart {
	return &Piksi_MsgCwStart{
	}
}

func (this *Piksi_MsgCwStart) Read(io *kaitai.Stream, parent *Sbp_Message, root *Piksi) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	return err
}
