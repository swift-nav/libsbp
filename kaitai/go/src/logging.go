// Code generated by kaitai-struct-compiler from a .ksy source file. DO NOT EDIT.

import "github.com/kaitai-io/kaitai_struct_go_runtime/kaitai"

type Logging struct {
	_io *kaitai.Stream
	_root *Logging
	_parent interface{}
}
func NewLogging() *Logging {
	return &Logging{
	}
}

func (this *Logging) Read(io *kaitai.Stream, parent interface{}, root *Logging) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	return err
}

/**
 * This message contains a human-readable payload string from the device
 * containing errors, warnings and informational messages at ERROR,
 * WARNING, DEBUG, INFO logging levels.
 */
type Logging_MsgLog struct {
	Level uint8
	Text string
	_io *kaitai.Stream
	_root *Logging
	_parent *Sbp_Message
}
func NewLogging_MsgLog() *Logging_MsgLog {
	return &Logging_MsgLog{
	}
}

func (this *Logging_MsgLog) Read(io *kaitai.Stream, parent *Sbp_Message, root *Logging) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp1, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Level = tmp1
	tmp2, err := this._io.ReadBytesFull()
	if err != nil {
		return err
	}
	tmp2 = tmp2
	this.Text = string(tmp2)
	return err
}

/**
 * Logging level
 */

/**
 * Human-readable string
 */

/**
 * This message provides the ability to forward messages over SBP.  This
 * may take the form of wrapping up SBP messages received by Piksi for
 * logging purposes or wrapping another protocol with SBP.
 * 
 * The source identifier indicates from what interface a forwarded stream
 * derived. The protocol identifier identifies what the expected protocol
 * the forwarded msg contains. Protocol 0 represents SBP and the remaining
 * values are implementation defined.
 */
type Logging_MsgFwd struct {
	Source uint8
	Protocol uint8
	FwdPayload []uint8
	_io *kaitai.Stream
	_root *Logging
	_parent *Sbp_Message
}
func NewLogging_MsgFwd() *Logging_MsgFwd {
	return &Logging_MsgFwd{
	}
}

func (this *Logging_MsgFwd) Read(io *kaitai.Stream, parent *Sbp_Message, root *Logging) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp3, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Source = tmp3
	tmp4, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Protocol = tmp4
	for i := 1;; i++ {
		tmp5, err := this._io.EOF()
		if err != nil {
			return err
		}
		if tmp5 {
			break
		}
		tmp6, err := this._io.ReadU1()
		if err != nil {
			return err
		}
		this.FwdPayload = append(this.FwdPayload, tmp6)
	}
	return err
}

/**
 * source identifier
 */

/**
 * protocol identifier
 */

/**
 * variable length wrapped binary message
 */

/**
 * Deprecated.
 */
type Logging_MsgPrintDep struct {
	Text string
	_io *kaitai.Stream
	_root *Logging
	_parent *Sbp_Message
}
func NewLogging_MsgPrintDep() *Logging_MsgPrintDep {
	return &Logging_MsgPrintDep{
	}
}

func (this *Logging_MsgPrintDep) Read(io *kaitai.Stream, parent *Sbp_Message, root *Logging) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp7, err := this._io.ReadBytesFull()
	if err != nil {
		return err
	}
	tmp7 = tmp7
	this.Text = string(tmp7)
	return err
}

/**
 * Human-readable string
 */
