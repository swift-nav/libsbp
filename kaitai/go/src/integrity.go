// Code generated by kaitai-struct-compiler from a .ksy source file. DO NOT EDIT.

import "github.com/kaitai-io/kaitai_struct_go_runtime/kaitai"

type Integrity struct {
	_io *kaitai.Stream
	_root *Integrity
	_parent interface{}
}
func NewIntegrity() *Integrity {
	return &Integrity{
	}
}

func (this *Integrity) Read(io *kaitai.Stream, parent interface{}, root *Integrity) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	return err
}
type Integrity_MsgSsrFlagSatellites struct {
	ObsTime *Gnss_GpsTimeSec
	NumMsgs uint8
	SeqNum uint8
	SsrSolId uint8
	ChainId uint8
	ConstId uint8
	NFaultySats uint8
	FaultySats []uint8
	_io *kaitai.Stream
	_root *Integrity
	_parent *Sbp_Message
}
func NewIntegrity_MsgSsrFlagSatellites() *Integrity_MsgSsrFlagSatellites {
	return &Integrity_MsgSsrFlagSatellites{
	}
}

func (this *Integrity_MsgSsrFlagSatellites) Read(io *kaitai.Stream, parent *Sbp_Message, root *Integrity) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp1 := NewGnss_GpsTimeSec()
	err = tmp1.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.ObsTime = tmp1
	tmp2, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.NumMsgs = tmp2
	tmp3, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.SeqNum = tmp3
	tmp4, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.SsrSolId = tmp4
	tmp5, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.ChainId = tmp5
	tmp6, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.ConstId = tmp6
	tmp7, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.NFaultySats = tmp7
	for i := 1;; i++ {
		tmp8, err := this._io.EOF()
		if err != nil {
			return err
		}
		if tmp8 {
			break
		}
		tmp9, err := this._io.ReadU1()
		if err != nil {
			return err
		}
		this.FaultySats = append(this.FaultySats, tmp9)
	}
	return err
}

/**
 * GNSS reference time of the observation used to generate the flag.
 */

/**
 * Number of messages in the dataset
 */

/**
 * Position of this message in the dataset
 */

/**
 * SSR Solution ID.
 */

/**
 * Chain and type of flag.
 */

/**
 * Constellation ID.
 */

/**
 * Number of faulty satellites.
 */

/**
 * List of faulty satellites.
 */
type Integrity_MsgSsrFlagIonoTileSatLos struct {
	Header *Integrity_IntegritySsrHeader
	NFaultyLos uint8
	FaultyLos []*Gnss_SvId
	_io *kaitai.Stream
	_root *Integrity
	_parent *Sbp_Message
}
func NewIntegrity_MsgSsrFlagIonoTileSatLos() *Integrity_MsgSsrFlagIonoTileSatLos {
	return &Integrity_MsgSsrFlagIonoTileSatLos{
	}
}

func (this *Integrity_MsgSsrFlagIonoTileSatLos) Read(io *kaitai.Stream, parent *Sbp_Message, root *Integrity) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp10 := NewIntegrity_IntegritySsrHeader()
	err = tmp10.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.Header = tmp10
	tmp11, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.NFaultyLos = tmp11
	for i := 1;; i++ {
		tmp12, err := this._io.EOF()
		if err != nil {
			return err
		}
		if tmp12 {
			break
		}
		tmp13 := NewGnss_SvId()
		err = tmp13.Read(this._io, this, this._root)
		if err != nil {
			return err
		}
		this.FaultyLos = append(this.FaultyLos, tmp13)
	}
	return err
}

/**
 * Header of an integrity message.
 */

/**
 * Number of faulty LOS.
 */

/**
 * List of faulty LOS
 */
type Integrity_MsgSsrFlagIonoGridPointSatLos struct {
	Header *Integrity_IntegritySsrHeader
	GridPointId uint16
	NFaultyLos uint8
	FaultyLos []*Gnss_SvId
	_io *kaitai.Stream
	_root *Integrity
	_parent *Sbp_Message
}
func NewIntegrity_MsgSsrFlagIonoGridPointSatLos() *Integrity_MsgSsrFlagIonoGridPointSatLos {
	return &Integrity_MsgSsrFlagIonoGridPointSatLos{
	}
}

func (this *Integrity_MsgSsrFlagIonoGridPointSatLos) Read(io *kaitai.Stream, parent *Sbp_Message, root *Integrity) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp14 := NewIntegrity_IntegritySsrHeader()
	err = tmp14.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.Header = tmp14
	tmp15, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.GridPointId = uint16(tmp15)
	tmp16, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.NFaultyLos = tmp16
	for i := 1;; i++ {
		tmp17, err := this._io.EOF()
		if err != nil {
			return err
		}
		if tmp17 {
			break
		}
		tmp18 := NewGnss_SvId()
		err = tmp18.Read(this._io, this, this._root)
		if err != nil {
			return err
		}
		this.FaultyLos = append(this.FaultyLos, tmp18)
	}
	return err
}

/**
 * Header of an integrity message.
 */

/**
 * Index of the grid point.
 */

/**
 * Number of faulty LOS.
 */

/**
 * List of faulty LOS
 */
type Integrity_IntegritySsrHeader struct {
	ObsTime *Gnss_GpsTimeSec
	NumMsgs uint8
	SeqNum uint8
	SsrSolId uint8
	TileSetId uint16
	TileId uint16
	ChainId uint8
	_io *kaitai.Stream
	_root *Integrity
	_parent interface{}
}
func NewIntegrity_IntegritySsrHeader() *Integrity_IntegritySsrHeader {
	return &Integrity_IntegritySsrHeader{
	}
}

func (this *Integrity_IntegritySsrHeader) Read(io *kaitai.Stream, parent interface{}, root *Integrity) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp19 := NewGnss_GpsTimeSec()
	err = tmp19.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.ObsTime = tmp19
	tmp20, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.NumMsgs = tmp20
	tmp21, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.SeqNum = tmp21
	tmp22, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.SsrSolId = tmp22
	tmp23, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.TileSetId = uint16(tmp23)
	tmp24, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.TileId = uint16(tmp24)
	tmp25, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.ChainId = tmp25
	return err
}

/**
 * GNSS reference time of the observation used to generate the flag.
 */

/**
 * Number of messages in the dataset
 */

/**
 * Position of this message in the dataset
 */

/**
 * SSR Solution ID.
 */

/**
 * Unique identifier of the set this tile belongs to.
 */

/**
 * Unique identifier of this tile in the tile set.
 */

/**
 * Chain and type of flag.
 */
type Integrity_MsgAcknowledge struct {
	RequestId uint8
	AreaId uint32
	ResponseCode uint8
	CorrectionMaskOnDemand uint16
	CorrectionMaskStream uint16
	SolutionId uint8
	_io *kaitai.Stream
	_root *Integrity
	_parent *Sbp_Message
}
func NewIntegrity_MsgAcknowledge() *Integrity_MsgAcknowledge {
	return &Integrity_MsgAcknowledge{
	}
}

func (this *Integrity_MsgAcknowledge) Read(io *kaitai.Stream, parent *Sbp_Message, root *Integrity) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp26, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.RequestId = tmp26
	tmp27, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.AreaId = uint32(tmp27)
	tmp28, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.ResponseCode = tmp28
	tmp29, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.CorrectionMaskOnDemand = uint16(tmp29)
	tmp30, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.CorrectionMaskStream = uint16(tmp30)
	tmp31, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.SolutionId = tmp31
	return err
}

/**
 * Echo of the request ID field from the corresponding CRA message, or
 * 255 if no request ID was provided.
 */

/**
 * Echo of the Area ID field from the corresponding CRA message.
 */

/**
 * Reported status of the request.
 */

/**
 * Contains the message group(s) that will be sent in response from the
 * corresponding CRA correction mask. An echo of the correction mask
 * field from the corresponding CRA message.
 */

/**
 * For future expansion. Always set to 0.
 */

/**
 * The solution ID of the instance providing the corrections.
 */
type Integrity_MsgSsrFlagIonoGridPoints struct {
	Header *Integrity_IntegritySsrHeader
	NFaultyPoints uint8
	FaultyPoints []uint16
	_io *kaitai.Stream
	_root *Integrity
	_parent *Sbp_Message
}
func NewIntegrity_MsgSsrFlagIonoGridPoints() *Integrity_MsgSsrFlagIonoGridPoints {
	return &Integrity_MsgSsrFlagIonoGridPoints{
	}
}

func (this *Integrity_MsgSsrFlagIonoGridPoints) Read(io *kaitai.Stream, parent *Sbp_Message, root *Integrity) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp32 := NewIntegrity_IntegritySsrHeader()
	err = tmp32.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.Header = tmp32
	tmp33, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.NFaultyPoints = tmp33
	for i := 1;; i++ {
		tmp34, err := this._io.EOF()
		if err != nil {
			return err
		}
		if tmp34 {
			break
		}
		tmp35, err := this._io.ReadU2le()
		if err != nil {
			return err
		}
		this.FaultyPoints = append(this.FaultyPoints, tmp35)
	}
	return err
}

/**
 * Header of an integrity message.
 */

/**
 * Number of faulty grid points.
 */

/**
 * List of faulty grid points.
 */
type Integrity_MsgSsrFlagTropoGridPoints struct {
	Header *Integrity_IntegritySsrHeader
	NFaultyPoints uint8
	FaultyPoints []uint16
	_io *kaitai.Stream
	_root *Integrity
	_parent *Sbp_Message
}
func NewIntegrity_MsgSsrFlagTropoGridPoints() *Integrity_MsgSsrFlagTropoGridPoints {
	return &Integrity_MsgSsrFlagTropoGridPoints{
	}
}

func (this *Integrity_MsgSsrFlagTropoGridPoints) Read(io *kaitai.Stream, parent *Sbp_Message, root *Integrity) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp36 := NewIntegrity_IntegritySsrHeader()
	err = tmp36.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.Header = tmp36
	tmp37, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.NFaultyPoints = tmp37
	for i := 1;; i++ {
		tmp38, err := this._io.EOF()
		if err != nil {
			return err
		}
		if tmp38 {
			break
		}
		tmp39, err := this._io.ReadU2le()
		if err != nil {
			return err
		}
		this.FaultyPoints = append(this.FaultyPoints, tmp39)
	}
	return err
}

/**
 * Header of an integrity message.
 */

/**
 * Number of faulty grid points.
 */

/**
 * List of faulty grid points.
 */

/**
 * Integrity monitoring flags for multiple aggregated elements. An element
 * could be a satellite, SSR grid point, or SSR tile. A group of aggregated
 * elements being monitored for integrity could refer to:
 * 
 * - Satellites in a particular {GPS, GAL, BDS} constellation.
 * 
 * - Satellites in the line-of-sight of a particular SSR tile.
 * 
 * - Satellites in the line-of-sight of a particular SSR grid point.
 * 
 * The integrity usage for a group of aggregated elements varies according
 * to the integrity flag of the satellites comprising that group.
 * 
 * SSR_INTEGRITY_USAGE_NOMINAL: All satellites received passed the
 * integrity check and have flag INTEGRITY_FLAG_OK.
 * 
 * SSR_INTEGRITY_USAGE_WARNING: A limited number of elements in the group
 * failed the integrity check. Refer to more granular integrity messages
 * for details on the specific failing elements.
 * 
 * SSR_INTEGRITY_USAGE_ALERT: Most elements in the group failed the
 * integrity check, do not use for positioning.
 * 
 * SSR_INTEGRITY_USAGE_NOT_MONITORED: Unable to verify the integrity flag
 * of elements in the group.
 */
type Integrity_MsgSsrFlagHighLevel struct {
	ObsTime *Gnss_GpsTimeSec
	CorrTime *Gnss_GpsTimeSec
	SsrSolId uint8
	TileSetId uint16
	TileId uint16
	ChainId uint8
	UseGpsSat uint8
	UseGalSat uint8
	UseBdsSat uint8
	Reserved []uint8
	UseTropoGridPoints uint8
	UseIonoGridPoints uint8
	UseIonoTileSatLos uint8
	UseIonoGridPointSatLos uint8
	_io *kaitai.Stream
	_root *Integrity
	_parent *Sbp_Message
}
func NewIntegrity_MsgSsrFlagHighLevel() *Integrity_MsgSsrFlagHighLevel {
	return &Integrity_MsgSsrFlagHighLevel{
	}
}

func (this *Integrity_MsgSsrFlagHighLevel) Read(io *kaitai.Stream, parent *Sbp_Message, root *Integrity) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp40 := NewGnss_GpsTimeSec()
	err = tmp40.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.ObsTime = tmp40
	tmp41 := NewGnss_GpsTimeSec()
	err = tmp41.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.CorrTime = tmp41
	tmp42, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.SsrSolId = tmp42
	tmp43, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.TileSetId = uint16(tmp43)
	tmp44, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.TileId = uint16(tmp44)
	tmp45, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.ChainId = tmp45
	tmp46, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.UseGpsSat = tmp46
	tmp47, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.UseGalSat = tmp47
	tmp48, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.UseBdsSat = tmp48
	for i := 0; i < int(6); i++ {
		_ = i
		tmp49, err := this._io.ReadU1()
		if err != nil {
			return err
		}
		this.Reserved = append(this.Reserved, tmp49)
	}
	tmp50, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.UseTropoGridPoints = tmp50
	tmp51, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.UseIonoGridPoints = tmp51
	tmp52, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.UseIonoTileSatLos = tmp52
	tmp53, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.UseIonoGridPointSatLos = tmp53
	return err
}

/**
 * GNSS reference time of the observation used to generate the flag.
 */

/**
 * GNSS reference time of the correction associated to the flag.
 */

/**
 * SSR Solution ID.
 */

/**
 * Unique identifier of the set this tile belongs to.
 */

/**
 * Unique identifier of this tile in the tile set.
 */

/**
 * Chain and type of flag.
 */

/**
 * Use GPS satellites.
 */

/**
 * Use GAL satellites.
 */

/**
 * Use BDS satellites.
 */

/**
 * Reserved
 */

/**
 * Use tropo grid points.
 */

/**
 * Use iono grid points.
 */

/**
 * Use iono tile satellite LoS.
 */

/**
 * Use iono grid point satellite LoS.
 */
