// Code generated by kaitai-struct-compiler from a .ksy source file. DO NOT EDIT.

import "github.com/kaitai-io/kaitai_struct_go_runtime/kaitai"

type Tracking struct {
	_io *kaitai.Stream
	_root *Tracking
	_parent interface{}
}
func NewTracking() *Tracking {
	return &Tracking{
	}
}

func (this *Tracking) Read(io *kaitai.Stream, parent interface{}, root *Tracking) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	return err
}

/**
 * Deprecated.
 */
type Tracking_MsgTrackingStateDetailedDep struct {
	RecvTime uint64
	Tot *Gnss_GpsTimeDep
	P uint32
	PStd uint16
	L *Gnss_CarrierPhase
	Cn0 uint8
	Lock uint16
	Sid *Gnss_GnssSignalDep
	Doppler int32
	DopplerStd uint16
	Uptime uint32
	ClockOffset int16
	ClockDrift int16
	CorrSpacing uint16
	Acceleration int8
	SyncFlags uint8
	TowFlags uint8
	TrackFlags uint8
	NavFlags uint8
	PsetFlags uint8
	MiscFlags uint8
	_io *kaitai.Stream
	_root *Tracking
	_parent *Sbp_SbpMessage
}
func NewTracking_MsgTrackingStateDetailedDep() *Tracking_MsgTrackingStateDetailedDep {
	return &Tracking_MsgTrackingStateDetailedDep{
	}
}

func (this *Tracking_MsgTrackingStateDetailedDep) Read(io *kaitai.Stream, parent *Sbp_SbpMessage, root *Tracking) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp1, err := this._io.ReadU8le()
	if err != nil {
		return err
	}
	this.RecvTime = uint64(tmp1)
	tmp2 := NewGnss_GpsTimeDep()
	err = tmp2.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.Tot = tmp2
	tmp3, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.P = uint32(tmp3)
	tmp4, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.PStd = uint16(tmp4)
	tmp5 := NewGnss_CarrierPhase()
	err = tmp5.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.L = tmp5
	tmp6, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Cn0 = tmp6
	tmp7, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.Lock = uint16(tmp7)
	tmp8 := NewGnss_GnssSignalDep()
	err = tmp8.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.Sid = tmp8
	tmp9, err := this._io.ReadS4le()
	if err != nil {
		return err
	}
	this.Doppler = int32(tmp9)
	tmp10, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.DopplerStd = uint16(tmp10)
	tmp11, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.Uptime = uint32(tmp11)
	tmp12, err := this._io.ReadS2le()
	if err != nil {
		return err
	}
	this.ClockOffset = int16(tmp12)
	tmp13, err := this._io.ReadS2le()
	if err != nil {
		return err
	}
	this.ClockDrift = int16(tmp13)
	tmp14, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.CorrSpacing = uint16(tmp14)
	tmp15, err := this._io.ReadS1()
	if err != nil {
		return err
	}
	this.Acceleration = tmp15
	tmp16, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.SyncFlags = tmp16
	tmp17, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.TowFlags = tmp17
	tmp18, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.TrackFlags = tmp18
	tmp19, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.NavFlags = tmp19
	tmp20, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.PsetFlags = tmp20
	tmp21, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.MiscFlags = tmp21
	return err
}

/**
 * Receiver clock time.
 */

/**
 * Time of transmission of signal from satellite. TOW only valid when
 * TOW status is decoded or propagated. WN only valid when week number
 * valid flag is set.
 */

/**
 * Pseudorange observation. Valid only when pseudorange valid flag is
 * set.
 */

/**
 * Pseudorange observation standard deviation. Valid only when
 * pseudorange valid flag is set.
 */

/**
 * Carrier phase observation with typical sign convention. Valid only
 * when PLL pessimistic lock is achieved.
 */

/**
 * Carrier-to-Noise density
 */

/**
 * Lock time. It is encoded according to DF402 from the RTCM 10403.2
 * Amendment 2 specification. Valid values range from 0 to 15.
 */

/**
 * GNSS signal identifier.
 */

/**
 * Carrier Doppler frequency.
 */

/**
 * Carrier Doppler frequency standard deviation.
 */

/**
 * Number of seconds of continuous tracking. Specifies how much time
 * signal is in continuous track.
 */

/**
 * TCXO clock offset. Valid only when valid clock valid flag is set.
 */

/**
 * TCXO clock drift. Valid only when valid clock valid flag is set.
 */

/**
 * Early-Prompt (EP) and Prompt-Late (PL) correlators spacing.
 */

/**
 * Acceleration. Valid only when acceleration valid flag is set.
 */

/**
 * Synchronization status flags.
 */

/**
 * TOW status flags.
 */

/**
 * Tracking loop status flags.
 */

/**
 * Navigation data status flags.
 */

/**
 * Parameters sets flags.
 */

/**
 * Miscellaneous flags.
 */

/**
 * Deprecated.
 */
type Tracking_TrackingChannelStateDepB struct {
	State uint8
	Sid *Gnss_GnssSignalDep
	Cn0 float32
	_io *kaitai.Stream
	_root *Tracking
	_parent *Tracking_MsgTrackingStateDepB
}
func NewTracking_TrackingChannelStateDepB() *Tracking_TrackingChannelStateDepB {
	return &Tracking_TrackingChannelStateDepB{
	}
}

func (this *Tracking_TrackingChannelStateDepB) Read(io *kaitai.Stream, parent *Tracking_MsgTrackingStateDepB, root *Tracking) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp22, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.State = tmp22
	tmp23 := NewGnss_GnssSignalDep()
	err = tmp23.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.Sid = tmp23
	tmp24, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.Cn0 = float32(tmp24)
	return err
}

/**
 * Status of tracking channel
 */

/**
 * GNSS signal being tracked
 */

/**
 * Carrier-to-noise density
 */

/**
 * Tracking channel state for a specific satellite signal and measured
 * signal power.
 */
type Tracking_TrackingChannelState struct {
	Sid *Gnss_GnssSignal
	Fcn uint8
	Cn0 uint8
	_io *kaitai.Stream
	_root *Tracking
	_parent *Tracking_MsgTrackingState
}
func NewTracking_TrackingChannelState() *Tracking_TrackingChannelState {
	return &Tracking_TrackingChannelState{
	}
}

func (this *Tracking_TrackingChannelState) Read(io *kaitai.Stream, parent *Tracking_MsgTrackingState, root *Tracking) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp25 := NewGnss_GnssSignal()
	err = tmp25.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.Sid = tmp25
	tmp26, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Fcn = tmp26
	tmp27, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Cn0 = tmp27
	return err
}

/**
 * GNSS signal being tracked
 */

/**
 * Frequency channel number (GLONASS only)
 */

/**
 * Carrier-to-Noise density.  Zero implies invalid cn0.
 */

/**
 * The tracking message returns a variable-length array of tracking channel
 * states. It reports status and carrier-to-noise density measurements for
 * all tracked satellites.
 */
type Tracking_MsgTrackingState struct {
	States []*Tracking_TrackingChannelState
	_io *kaitai.Stream
	_root *Tracking
	_parent *Sbp_SbpMessage
}
func NewTracking_MsgTrackingState() *Tracking_MsgTrackingState {
	return &Tracking_MsgTrackingState{
	}
}

func (this *Tracking_MsgTrackingState) Read(io *kaitai.Stream, parent *Sbp_SbpMessage, root *Tracking) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	for i := 1;; i++ {
		tmp28, err := this._io.EOF()
		if err != nil {
			return err
		}
		if tmp28 {
			break
		}
		tmp29 := NewTracking_TrackingChannelState()
		err = tmp29.Read(this._io, this, this._root)
		if err != nil {
			return err
		}
		this.States = append(this.States, tmp29)
	}
	return err
}

/**
 * Signal tracking channel state
 */

/**
 * Deprecated.
 */
type Tracking_TrackingChannelStateDepA struct {
	State uint8
	Prn uint8
	Cn0 float32
	_io *kaitai.Stream
	_root *Tracking
	_parent *Tracking_MsgTrackingStateDepA
}
func NewTracking_TrackingChannelStateDepA() *Tracking_TrackingChannelStateDepA {
	return &Tracking_TrackingChannelStateDepA{
	}
}

func (this *Tracking_TrackingChannelStateDepA) Read(io *kaitai.Stream, parent *Tracking_MsgTrackingStateDepA, root *Tracking) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp30, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.State = tmp30
	tmp31, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Prn = tmp31
	tmp32, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.Cn0 = float32(tmp32)
	return err
}

/**
 * Status of tracking channel
 */

/**
 * PRN-1 being tracked
 */

/**
 * Carrier-to-noise density
 */

/**
 * Deprecated.
 */
type Tracking_MsgTrackingIqDepA struct {
	Channel uint8
	Sid *Gnss_GnssSignalDep
	Corrs []uint64
	_io *kaitai.Stream
	_root *Tracking
	_parent *Sbp_SbpMessage
}
func NewTracking_MsgTrackingIqDepA() *Tracking_MsgTrackingIqDepA {
	return &Tracking_MsgTrackingIqDepA{
	}
}

func (this *Tracking_MsgTrackingIqDepA) Read(io *kaitai.Stream, parent *Sbp_SbpMessage, root *Tracking) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp33, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Channel = tmp33
	tmp34 := NewGnss_GnssSignalDep()
	err = tmp34.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.Sid = tmp34
	for i := 0; i < int(3); i++ {
		_ = i
		tmp35, err := this._io.ReadU8le()
		if err != nil {
			return err
		}
		this.Corrs = append(this.Corrs, tmp35)
	}
	return err
}

/**
 * Tracking channel of origin
 */

/**
 * GNSS signal identifier
 */

/**
 * Early, Prompt and Late correlations
 */

/**
 * Structure containing in-phase and quadrature correlation components.
 */
type Tracking_TrackingChannelCorrelationDep struct {
	I int32
	Q int32
	_io *kaitai.Stream
	_root *Tracking
	_parent interface{}
}
func NewTracking_TrackingChannelCorrelationDep() *Tracking_TrackingChannelCorrelationDep {
	return &Tracking_TrackingChannelCorrelationDep{
	}
}

func (this *Tracking_TrackingChannelCorrelationDep) Read(io *kaitai.Stream, parent interface{}, root *Tracking) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp36, err := this._io.ReadS4le()
	if err != nil {
		return err
	}
	this.I = int32(tmp36)
	tmp37, err := this._io.ReadS4le()
	if err != nil {
		return err
	}
	this.Q = int32(tmp37)
	return err
}

/**
 * In-phase correlation
 */

/**
 * Quadrature correlation
 */

/**
 * Deprecated.
 */
type Tracking_MsgTrackingStateDepA struct {
	States []*Tracking_TrackingChannelStateDepA
	_io *kaitai.Stream
	_root *Tracking
	_parent *Sbp_SbpMessage
}
func NewTracking_MsgTrackingStateDepA() *Tracking_MsgTrackingStateDepA {
	return &Tracking_MsgTrackingStateDepA{
	}
}

func (this *Tracking_MsgTrackingStateDepA) Read(io *kaitai.Stream, parent *Sbp_SbpMessage, root *Tracking) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	for i := 1;; i++ {
		tmp38, err := this._io.EOF()
		if err != nil {
			return err
		}
		if tmp38 {
			break
		}
		tmp39 := NewTracking_TrackingChannelStateDepA()
		err = tmp39.Read(this._io, this, this._root)
		if err != nil {
			return err
		}
		this.States = append(this.States, tmp39)
	}
	return err
}

/**
 * Satellite tracking channel state
 */

/**
 * The tracking message returns a variable-length array of tracking channel
 * states. It reports status and carrier-to-noise density measurements for
 * all tracked satellites.
 */
type Tracking_MsgMeasurementState struct {
	States []*Tracking_MeasurementState
	_io *kaitai.Stream
	_root *Tracking
	_parent *Sbp_SbpMessage
}
func NewTracking_MsgMeasurementState() *Tracking_MsgMeasurementState {
	return &Tracking_MsgMeasurementState{
	}
}

func (this *Tracking_MsgMeasurementState) Read(io *kaitai.Stream, parent *Sbp_SbpMessage, root *Tracking) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	for i := 1;; i++ {
		tmp40, err := this._io.EOF()
		if err != nil {
			return err
		}
		if tmp40 {
			break
		}
		tmp41 := NewTracking_MeasurementState()
		err = tmp41.Read(this._io, this, this._root)
		if err != nil {
			return err
		}
		this.States = append(this.States, tmp41)
	}
	return err
}

/**
 * ME signal tracking channel state
 */

/**
 * Structure containing in-phase and quadrature correlation components.
 */
type Tracking_TrackingChannelCorrelation struct {
	I int16
	Q int16
	_io *kaitai.Stream
	_root *Tracking
	_parent interface{}
}
func NewTracking_TrackingChannelCorrelation() *Tracking_TrackingChannelCorrelation {
	return &Tracking_TrackingChannelCorrelation{
	}
}

func (this *Tracking_TrackingChannelCorrelation) Read(io *kaitai.Stream, parent interface{}, root *Tracking) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp42, err := this._io.ReadS2le()
	if err != nil {
		return err
	}
	this.I = int16(tmp42)
	tmp43, err := this._io.ReadS2le()
	if err != nil {
		return err
	}
	this.Q = int16(tmp43)
	return err
}

/**
 * In-phase correlation
 */

/**
 * Quadrature correlation
 */

/**
 * When enabled, a tracking channel can output the correlations at each
 * update interval.
 */
type Tracking_MsgTrackingIq struct {
	Channel uint8
	Sid *Gnss_GnssSignal
	Corrs []uint64
	_io *kaitai.Stream
	_root *Tracking
	_parent *Sbp_SbpMessage
}
func NewTracking_MsgTrackingIq() *Tracking_MsgTrackingIq {
	return &Tracking_MsgTrackingIq{
	}
}

func (this *Tracking_MsgTrackingIq) Read(io *kaitai.Stream, parent *Sbp_SbpMessage, root *Tracking) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp44, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Channel = tmp44
	tmp45 := NewGnss_GnssSignal()
	err = tmp45.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.Sid = tmp45
	for i := 0; i < int(3); i++ {
		_ = i
		tmp46, err := this._io.ReadU8le()
		if err != nil {
			return err
		}
		this.Corrs = append(this.Corrs, tmp46)
	}
	return err
}

/**
 * Tracking channel of origin
 */

/**
 * GNSS signal identifier
 */

/**
 * Early, Prompt and Late correlations
 */

/**
 * The tracking message returns a set tracking channel parameters for a
 * single tracking channel useful for debugging issues.
 */
type Tracking_MsgTrackingStateDetailedDepA struct {
	RecvTime uint64
	Tot *Gnss_GpsTime
	P uint32
	PStd uint16
	L *Gnss_CarrierPhase
	Cn0 uint8
	Lock uint16
	Sid *Gnss_GnssSignal
	Doppler int32
	DopplerStd uint16
	Uptime uint32
	ClockOffset int16
	ClockDrift int16
	CorrSpacing uint16
	Acceleration int8
	SyncFlags uint8
	TowFlags uint8
	TrackFlags uint8
	NavFlags uint8
	PsetFlags uint8
	MiscFlags uint8
	_io *kaitai.Stream
	_root *Tracking
	_parent *Sbp_SbpMessage
}
func NewTracking_MsgTrackingStateDetailedDepA() *Tracking_MsgTrackingStateDetailedDepA {
	return &Tracking_MsgTrackingStateDetailedDepA{
	}
}

func (this *Tracking_MsgTrackingStateDetailedDepA) Read(io *kaitai.Stream, parent *Sbp_SbpMessage, root *Tracking) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp47, err := this._io.ReadU8le()
	if err != nil {
		return err
	}
	this.RecvTime = uint64(tmp47)
	tmp48 := NewGnss_GpsTime()
	err = tmp48.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.Tot = tmp48
	tmp49, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.P = uint32(tmp49)
	tmp50, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.PStd = uint16(tmp50)
	tmp51 := NewGnss_CarrierPhase()
	err = tmp51.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.L = tmp51
	tmp52, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Cn0 = tmp52
	tmp53, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.Lock = uint16(tmp53)
	tmp54 := NewGnss_GnssSignal()
	err = tmp54.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.Sid = tmp54
	tmp55, err := this._io.ReadS4le()
	if err != nil {
		return err
	}
	this.Doppler = int32(tmp55)
	tmp56, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.DopplerStd = uint16(tmp56)
	tmp57, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.Uptime = uint32(tmp57)
	tmp58, err := this._io.ReadS2le()
	if err != nil {
		return err
	}
	this.ClockOffset = int16(tmp58)
	tmp59, err := this._io.ReadS2le()
	if err != nil {
		return err
	}
	this.ClockDrift = int16(tmp59)
	tmp60, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.CorrSpacing = uint16(tmp60)
	tmp61, err := this._io.ReadS1()
	if err != nil {
		return err
	}
	this.Acceleration = tmp61
	tmp62, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.SyncFlags = tmp62
	tmp63, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.TowFlags = tmp63
	tmp64, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.TrackFlags = tmp64
	tmp65, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.NavFlags = tmp65
	tmp66, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.PsetFlags = tmp66
	tmp67, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.MiscFlags = tmp67
	return err
}

/**
 * Receiver clock time.
 */

/**
 * Time of transmission of signal from satellite. TOW only valid when
 * TOW status is decoded or propagated. WN only valid when week number
 * valid flag is set.
 */

/**
 * Pseudorange observation. Valid only when pseudorange valid flag is
 * set.
 */

/**
 * Pseudorange observation standard deviation. Valid only when
 * pseudorange valid flag is set.
 */

/**
 * Carrier phase observation with typical sign convention. Valid only
 * when PLL pessimistic lock is achieved.
 */

/**
 * Carrier-to-Noise density
 */

/**
 * Lock time. It is encoded according to DF402 from the RTCM 10403.2
 * Amendment 2 specification. Valid values range from 0 to 15.
 */

/**
 * GNSS signal identifier.
 */

/**
 * Carrier Doppler frequency.
 */

/**
 * Carrier Doppler frequency standard deviation.
 */

/**
 * Number of seconds of continuous tracking. Specifies how much time
 * signal is in continuous track.
 */

/**
 * TCXO clock offset. Valid only when valid clock valid flag is set.
 */

/**
 * TCXO clock drift. Valid only when valid clock valid flag is set.
 */

/**
 * Early-Prompt (EP) and Prompt-Late (PL) correlators spacing.
 */

/**
 * Acceleration. Valid only when acceleration valid flag is set.
 */

/**
 * Synchronization status flags.
 */

/**
 * TOW status flags.
 */

/**
 * Tracking loop status flags.
 */

/**
 * Navigation data status flags.
 */

/**
 * Parameters sets flags.
 */

/**
 * Miscellaneous flags.
 */

/**
 * Deprecated.
 */
type Tracking_MsgTrackingStateDepB struct {
	States []*Tracking_TrackingChannelStateDepB
	_io *kaitai.Stream
	_root *Tracking
	_parent *Sbp_SbpMessage
}
func NewTracking_MsgTrackingStateDepB() *Tracking_MsgTrackingStateDepB {
	return &Tracking_MsgTrackingStateDepB{
	}
}

func (this *Tracking_MsgTrackingStateDepB) Read(io *kaitai.Stream, parent *Sbp_SbpMessage, root *Tracking) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	for i := 1;; i++ {
		tmp68, err := this._io.EOF()
		if err != nil {
			return err
		}
		if tmp68 {
			break
		}
		tmp69 := NewTracking_TrackingChannelStateDepB()
		err = tmp69.Read(this._io, this, this._root)
		if err != nil {
			return err
		}
		this.States = append(this.States, tmp69)
	}
	return err
}

/**
 * Signal tracking channel state
 */

/**
 * Measurement Engine tracking channel state for a specific satellite
 * signal and measured signal power. The mesid field for Glonass can either
 * carry the FCN as 100 + FCN where FCN is in [-7, +6] or the Slot ID (from
 * 1 to 28).
 */
type Tracking_MeasurementState struct {
	Mesid *Gnss_GnssSignal
	Cn0 uint8
	_io *kaitai.Stream
	_root *Tracking
	_parent *Tracking_MsgMeasurementState
}
func NewTracking_MeasurementState() *Tracking_MeasurementState {
	return &Tracking_MeasurementState{
	}
}

func (this *Tracking_MeasurementState) Read(io *kaitai.Stream, parent *Tracking_MsgMeasurementState, root *Tracking) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp70 := NewGnss_GnssSignal()
	err = tmp70.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.Mesid = tmp70
	tmp71, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Cn0 = tmp71
	return err
}

/**
 * Measurement Engine GNSS signal being tracked (carries either Glonass
 * FCN or SLOT)
 */

/**
 * Carrier-to-Noise density.  Zero implies invalid cn0.
 */

/**
 * Deprecated.
 */
type Tracking_MsgTrackingIqDepB struct {
	Channel uint8
	Sid *Gnss_GnssSignal
	Corrs []uint64
	_io *kaitai.Stream
	_root *Tracking
	_parent *Sbp_SbpMessage
}
func NewTracking_MsgTrackingIqDepB() *Tracking_MsgTrackingIqDepB {
	return &Tracking_MsgTrackingIqDepB{
	}
}

func (this *Tracking_MsgTrackingIqDepB) Read(io *kaitai.Stream, parent *Sbp_SbpMessage, root *Tracking) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp72, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Channel = tmp72
	tmp73 := NewGnss_GnssSignal()
	err = tmp73.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.Sid = tmp73
	for i := 0; i < int(3); i++ {
		_ = i
		tmp74, err := this._io.ReadU8le()
		if err != nil {
			return err
		}
		this.Corrs = append(this.Corrs, tmp74)
	}
	return err
}

/**
 * Tracking channel of origin
 */

/**
 * GNSS signal identifier
 */

/**
 * Early, Prompt and Late correlations
 */
