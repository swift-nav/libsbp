// Code generated by kaitai-struct-compiler from a .ksy source file. DO NOT EDIT.

import "github.com/kaitai-io/kaitai_struct_go_runtime/kaitai"

type System struct {
	_io *kaitai.Stream
	_root *System
	_parent interface{}
}
func NewSystem() *System {
	return &System{
	}
}

func (this *System) Read(io *kaitai.Stream, parent interface{}, root *System) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	return err
}

/**
 * The heartbeat message is sent periodically to inform the host or other
 * attached devices that the system is running. It is used to monitor
 * system malfunctions. It also contains status flags that indicate to the
 * host the status of the system and whether it is operating correctly.
 * Currently, the expected heartbeat interval is 1 sec.
 * 
 * The system error flag is used to indicate that an error has occurred in
 * the system. To determine the source of the error, the remaining error
 * flags should be inspected.
 */
type System_MsgHeartbeat struct {
	Flags uint32
	_io *kaitai.Stream
	_root *System
	_parent *Sbp_Message
}
func NewSystem_MsgHeartbeat() *System_MsgHeartbeat {
	return &System_MsgHeartbeat{
	}
}

func (this *System_MsgHeartbeat) Read(io *kaitai.Stream, parent *Sbp_Message, root *System) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp1, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.Flags = uint32(tmp1)
	return err
}

/**
 * Status flags
 */

/**
 * The status journal message contains past status reports (see
 * MSG_STATUS_REPORT) and functions as a error/event storage for telemetry
 * purposes.
 */
type System_MsgStatusJournal struct {
	ReportingSystem uint16
	SbpVersion uint16
	TotalStatusReports uint32
	SequenceDescriptor uint8
	Journal []*System_StatusJournalItem
	_io *kaitai.Stream
	_root *System
	_parent *Sbp_Message
}
func NewSystem_MsgStatusJournal() *System_MsgStatusJournal {
	return &System_MsgStatusJournal{
	}
}

func (this *System_MsgStatusJournal) Read(io *kaitai.Stream, parent *Sbp_Message, root *System) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp2, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.ReportingSystem = uint16(tmp2)
	tmp3, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.SbpVersion = uint16(tmp3)
	tmp4, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.TotalStatusReports = uint32(tmp4)
	tmp5, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.SequenceDescriptor = tmp5
	for i := 1;; i++ {
		tmp6, err := this._io.EOF()
		if err != nil {
			return err
		}
		if tmp6 {
			break
		}
		tmp7 := NewSystem_StatusJournalItem()
		err = tmp7.Read(this._io, this, this._root)
		if err != nil {
			return err
		}
		this.Journal = append(this.Journal, tmp7)
	}
	return err
}

/**
 * Identity of reporting system
 */

/**
 * SBP protocol version
 */

/**
 * Total number of status reports sent since system startup
 */

/**
 * Index and number of messages in this sequence. First nibble is the
 * size of the sequence (n), second nibble is the zero-indexed counter
 * (ith packet of n)
 */

/**
 * Status journal
 */

/**
 * The INS status message describes the state of the operation and
 * initialization of the inertial navigation system.
 */
type System_MsgInsStatus struct {
	Flags uint32
	_io *kaitai.Stream
	_root *System
	_parent *Sbp_Message
}
func NewSystem_MsgInsStatus() *System_MsgInsStatus {
	return &System_MsgInsStatus{
	}
}

func (this *System_MsgInsStatus) Read(io *kaitai.Stream, parent *Sbp_Message, root *System) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp8, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.Flags = uint32(tmp8)
	return err
}

/**
 * Status flags
 */

/**
 * The GNSS time offset message contains the information that is needed to
 * translate messages tagged with a local timestamp (e.g. IMU or wheeltick
 * messages) to GNSS time for the sender producing this message.
 */
type System_MsgGnssTimeOffset struct {
	Weeks int16
	Milliseconds int32
	Microseconds int16
	Flags uint8
	_io *kaitai.Stream
	_root *System
	_parent *Sbp_Message
}
func NewSystem_MsgGnssTimeOffset() *System_MsgGnssTimeOffset {
	return &System_MsgGnssTimeOffset{
	}
}

func (this *System_MsgGnssTimeOffset) Read(io *kaitai.Stream, parent *Sbp_Message, root *System) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp9, err := this._io.ReadS2le()
	if err != nil {
		return err
	}
	this.Weeks = int16(tmp9)
	tmp10, err := this._io.ReadS4le()
	if err != nil {
		return err
	}
	this.Milliseconds = int32(tmp10)
	tmp11, err := this._io.ReadS2le()
	if err != nil {
		return err
	}
	this.Microseconds = int16(tmp11)
	tmp12, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Flags = tmp12
	return err
}

/**
 * Weeks portion of the time offset
 */

/**
 * Milliseconds portion of the time offset
 */

/**
 * Microseconds portion of the time offset
 */

/**
 * Status flags (reserved)
 */

/**
 * The CSAC telemetry message has an implementation defined telemetry
 * string from a device. It is not produced or available on general Swift
 * Products. It is intended to be a low rate message for status purposes.
 */
type System_MsgCsacTelemetry struct {
	Id uint8
	Telemetry string
	_io *kaitai.Stream
	_root *System
	_parent *Sbp_Message
}
func NewSystem_MsgCsacTelemetry() *System_MsgCsacTelemetry {
	return &System_MsgCsacTelemetry{
	}
}

func (this *System_MsgCsacTelemetry) Read(io *kaitai.Stream, parent *Sbp_Message, root *System) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp13, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Id = tmp13
	tmp14, err := this._io.ReadBytesFull()
	if err != nil {
		return err
	}
	tmp14 = tmp14
	this.Telemetry = string(tmp14)
	return err
}

/**
 * Index representing the type of telemetry in use.  It is
 * implementation defined.
 */

/**
 * Comma separated list of values as defined by the index
 */

/**
 * The PPS time message contains the value of the sender's local time in
 * microseconds at the moment a pulse is detected on the PPS input. This is
 * to be used for syncronisation of sensor data sampled with a local
 * timestamp (e.g. IMU or wheeltick messages) where GNSS time is unknown to
 * the sender.
 * 
 * The local time used to timestamp the PPS pulse must be generated by the
 * same clock which is used to timestamp the IMU/wheel sensor data and
 * should follow the same roll-over rules.  A separate MSG_PPS_TIME message
 * should be sent for each source of sensor data which uses PPS-relative
 * timestamping.  The sender ID for each of these MSG_PPS_TIME messages
 * should match the sender ID of the respective sensor data.
 */
type System_MsgPpsTime struct {
	Time uint64
	Flags uint8
	_io *kaitai.Stream
	_root *System
	_parent *Sbp_Message
}
func NewSystem_MsgPpsTime() *System_MsgPpsTime {
	return &System_MsgPpsTime{
	}
}

func (this *System_MsgPpsTime) Read(io *kaitai.Stream, parent *Sbp_Message, root *System) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp15, err := this._io.ReadU8le()
	if err != nil {
		return err
	}
	this.Time = uint64(tmp15)
	tmp16, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Flags = tmp16
	return err
}

/**
 * Local time in microseconds
 */

/**
 * Status flags
 */

/**
 * The INS update status message contains information about executed and
 * rejected INS updates. This message is expected to be extended in the
 * future as new types of measurements are being added.
 */
type System_MsgInsUpdates struct {
	Tow uint32
	Gnsspos uint8
	Gnssvel uint8
	Wheelticks uint8
	Speed uint8
	Nhc uint8
	Zerovel uint8
	_io *kaitai.Stream
	_root *System
	_parent *Sbp_Message
}
func NewSystem_MsgInsUpdates() *System_MsgInsUpdates {
	return &System_MsgInsUpdates{
	}
}

func (this *System_MsgInsUpdates) Read(io *kaitai.Stream, parent *Sbp_Message, root *System) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp17, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.Tow = uint32(tmp17)
	tmp18, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Gnsspos = tmp18
	tmp19, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Gnssvel = tmp19
	tmp20, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Wheelticks = tmp20
	tmp21, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Speed = tmp21
	tmp22, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Nhc = tmp22
	tmp23, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Zerovel = tmp23
	return err
}

/**
 * GPS Time of Week
 */

/**
 * GNSS position update status flags
 */

/**
 * GNSS velocity update status flags
 */

/**
 * Wheelticks update status flags
 */

/**
 * Wheelticks update status flags
 */

/**
 * NHC update status flags
 */

/**
 * Zero velocity update status flags
 */

/**
 * This message provides information about the receipt of Differential
 * corrections.  It is expected to be sent with each receipt of a complete
 * corrections packet.
 */
type System_MsgDgnssStatus struct {
	Flags uint8
	Latency uint16
	NumSignals uint8
	Source string
	_io *kaitai.Stream
	_root *System
	_parent *Sbp_Message
}
func NewSystem_MsgDgnssStatus() *System_MsgDgnssStatus {
	return &System_MsgDgnssStatus{
	}
}

func (this *System_MsgDgnssStatus) Read(io *kaitai.Stream, parent *Sbp_Message, root *System) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp24, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Flags = tmp24
	tmp25, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.Latency = uint16(tmp25)
	tmp26, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.NumSignals = tmp26
	tmp27, err := this._io.ReadBytesFull()
	if err != nil {
		return err
	}
	tmp27 = tmp27
	this.Source = string(tmp27)
	return err
}

/**
 * Status flags
 */

/**
 * Latency of observation receipt
 */

/**
 * Number of signals from base station
 */

/**
 * Corrections source string
 */

/**
 * The CSAC telemetry message provides labels for each member of the string
 * produced by MSG_CSAC_TELEMETRY. It should be provided by a device at a
 * lower rate than the MSG_CSAC_TELEMETRY.
 */
type System_MsgCsacTelemetryLabels struct {
	Id uint8
	TelemetryLabels string
	_io *kaitai.Stream
	_root *System
	_parent *Sbp_Message
}
func NewSystem_MsgCsacTelemetryLabels() *System_MsgCsacTelemetryLabels {
	return &System_MsgCsacTelemetryLabels{
	}
}

func (this *System_MsgCsacTelemetryLabels) Read(io *kaitai.Stream, parent *Sbp_Message, root *System) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp28, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Id = tmp28
	tmp29, err := this._io.ReadBytesFull()
	if err != nil {
		return err
	}
	tmp29 = tmp29
	this.TelemetryLabels = string(tmp29)
	return err
}

/**
 * Index representing the type of telemetry in use.  It is
 * implementation defined.
 */

/**
 * Comma separated list of telemetry field values
 */

/**
 * The system start-up message is sent once on system start-up. It notifies
 * the host or other attached devices that the system has started and is
 * now ready to respond to commands or configuration requests.
 */
type System_MsgStartup struct {
	Cause uint8
	StartupType uint8
	Reserved uint16
	_io *kaitai.Stream
	_root *System
	_parent *Sbp_Message
}
func NewSystem_MsgStartup() *System_MsgStartup {
	return &System_MsgStartup{
	}
}

func (this *System_MsgStartup) Read(io *kaitai.Stream, parent *Sbp_Message, root *System) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp30, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Cause = tmp30
	tmp31, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.StartupType = tmp31
	tmp32, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.Reserved = uint16(tmp32)
	return err
}

/**
 * Cause of startup
 */

/**
 * Startup type
 */

/**
 * Reserved
 */

/**
 * This leading message lists the time metadata of the Solution Group. It
 * also lists the atomic contents (i.e. types of messages included) of the
 * Solution Group.
 */
type System_MsgGroupMeta struct {
	GroupId uint8
	Flags uint8
	NGroupMsgs uint8
	GroupMsgs []uint16
	_io *kaitai.Stream
	_root *System
	_parent *Sbp_Message
}
func NewSystem_MsgGroupMeta() *System_MsgGroupMeta {
	return &System_MsgGroupMeta{
	}
}

func (this *System_MsgGroupMeta) Read(io *kaitai.Stream, parent *Sbp_Message, root *System) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp33, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.GroupId = tmp33
	tmp34, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Flags = tmp34
	tmp35, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.NGroupMsgs = tmp35
	for i := 1;; i++ {
		tmp36, err := this._io.EOF()
		if err != nil {
			return err
		}
		if tmp36 {
			break
		}
		tmp37, err := this._io.ReadU2le()
		if err != nil {
			return err
		}
		this.GroupMsgs = append(this.GroupMsgs, tmp37)
	}
	return err
}

/**
 * Id of the Msgs Group, 0 is Unknown, 1 is Bestpos, 2 is Gnss
 */

/**
 * Status flags (reserved)
 */

/**
 * Size of list group_msgs
 */

/**
 * An in-order list of message types included in the Solution Group,
 * including GROUP_META itself
 */

/**
 * This diagnostic message contains state and update status information for
 * all sensors that are being used by the fusion engine. This message will
 * be generated asynchronously to the solution messages and will be emitted
 * anytime a sensor update is being processed.
 */
type System_MsgSensorAidEvent struct {
	Time uint32
	SensorType uint8
	SensorId uint16
	SensorState uint8
	NAvailableMeas uint8
	NAttemptedMeas uint8
	NAcceptedMeas uint8
	Flags uint32
	_io *kaitai.Stream
	_root *System
	_parent *Sbp_Message
}
func NewSystem_MsgSensorAidEvent() *System_MsgSensorAidEvent {
	return &System_MsgSensorAidEvent{
	}
}

func (this *System_MsgSensorAidEvent) Read(io *kaitai.Stream, parent *Sbp_Message, root *System) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp38, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.Time = uint32(tmp38)
	tmp39, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.SensorType = tmp39
	tmp40, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.SensorId = uint16(tmp40)
	tmp41, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.SensorState = tmp41
	tmp42, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.NAvailableMeas = tmp42
	tmp43, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.NAttemptedMeas = tmp43
	tmp44, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.NAcceptedMeas = tmp44
	tmp45, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.Flags = uint32(tmp45)
	return err
}

/**
 * Update timestamp in milliseconds.
 */

/**
 * Sensor type
 */

/**
 * Sensor identifier
 */

/**
 * Reserved for future use
 */

/**
 * Number of available measurements in this epoch
 */

/**
 * Number of attempted measurements in this epoch
 */

/**
 * Number of accepted measurements in this epoch
 */

/**
 * Reserved for future use
 */

/**
 * Report the general and specific state of a subsystem.  If the generic
 * state is reported as initializing, the specific state should be ignored.
 */
type System_SubSystemReport struct {
	Component uint16
	Generic uint8
	Specific uint8
	_io *kaitai.Stream
	_root *System
	_parent interface{}
}
func NewSystem_SubSystemReport() *System_SubSystemReport {
	return &System_SubSystemReport{
	}
}

func (this *System_SubSystemReport) Read(io *kaitai.Stream, parent interface{}, root *System) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp46, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.Component = uint16(tmp46)
	tmp47, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Generic = tmp47
	tmp48, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Specific = tmp48
	return err
}

/**
 * Identity of reporting subsystem
 */

/**
 * Generic form status report
 */

/**
 * Subsystem specific status code
 */

/**
 * The status report is sent periodically to inform the host or other
 * attached devices that the system is running. It is used to monitor
 * system malfunctions. It contains status reports that indicate to the
 * host the status of each subsystem and whether it is operating correctly.
 * 
 * Interpretation of the subsystem specific status code is product
 * dependent, but if the generic status code is initializing, it should be
 * ignored.  Refer to product documentation for details.
 */
type System_MsgStatusReport struct {
	ReportingSystem uint16
	SbpVersion uint16
	Sequence uint32
	Uptime uint32
	Status []*System_SubSystemReport
	_io *kaitai.Stream
	_root *System
	_parent *Sbp_Message
}
func NewSystem_MsgStatusReport() *System_MsgStatusReport {
	return &System_MsgStatusReport{
	}
}

func (this *System_MsgStatusReport) Read(io *kaitai.Stream, parent *Sbp_Message, root *System) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp49, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.ReportingSystem = uint16(tmp49)
	tmp50, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.SbpVersion = uint16(tmp50)
	tmp51, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.Sequence = uint32(tmp51)
	tmp52, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.Uptime = uint32(tmp52)
	for i := 1;; i++ {
		tmp53, err := this._io.EOF()
		if err != nil {
			return err
		}
		if tmp53 {
			break
		}
		tmp54 := NewSystem_SubSystemReport()
		err = tmp54.Read(this._io, this, this._root)
		if err != nil {
			return err
		}
		this.Status = append(this.Status, tmp54)
	}
	return err
}

/**
 * Identity of reporting system
 */

/**
 * SBP protocol version
 */

/**
 * Increments on each status report sent
 */

/**
 * Number of seconds since system start-up
 */

/**
 * Reported status of individual subsystems
 */

/**
 * Reports the uptime and the state of a subsystem via generic and specific
 * status codes.  If the generic state is reported as initializing, the
 * specific state should be ignored.
 */
type System_StatusJournalItem struct {
	Uptime uint32
	Report *System_SubSystemReport
	_io *kaitai.Stream
	_root *System
	_parent *System_MsgStatusJournal
}
func NewSystem_StatusJournalItem() *System_StatusJournalItem {
	return &System_StatusJournalItem{
	}
}

func (this *System_StatusJournalItem) Read(io *kaitai.Stream, parent *System_MsgStatusJournal, root *System) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp55, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.Uptime = uint32(tmp55)
	tmp56 := NewSystem_SubSystemReport()
	err = tmp56.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.Report = tmp56
	return err
}

/**
 * Milliseconds since system startup
 */
