// Code generated by kaitai-struct-compiler from a .ksy source file. DO NOT EDIT.

import "github.com/kaitai-io/kaitai_struct_go_runtime/kaitai"

type Bootload struct {
	_io *kaitai.Stream
	_root *Bootload
	_parent interface{}
}
func NewBootload() *Bootload {
	return &Bootload{
	}
}

func (this *Bootload) Read(io *kaitai.Stream, parent interface{}, root *Bootload) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	return err
}

/**
 * The device message from the host reads a unique device identifier from
 * the SwiftNAP, an FPGA. The host requests the ID by sending a
 * MSG_NAP_DEVICE_DNA_REQ message. The device responds with a
 * MSG_NAP_DEVICE_DNA_RESP message with the device ID in the payload. Note
 * that this ID is tied to the FPGA, and not related to the Piksi's serial
 * number.
 */
type Bootload_MsgNapDeviceDnaReq struct {
	_io *kaitai.Stream
	_root *Bootload
	_parent *Sbp_SbpMessage
}
func NewBootload_MsgNapDeviceDnaReq() *Bootload_MsgNapDeviceDnaReq {
	return &Bootload_MsgNapDeviceDnaReq{
	}
}

func (this *Bootload_MsgNapDeviceDnaReq) Read(io *kaitai.Stream, parent *Sbp_SbpMessage, root *Bootload) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	return err
}

/**
 * The host initiates the bootloader to jump to the application.
 */
type Bootload_MsgBootloaderJumpToApp struct {
	Jump uint8
	_io *kaitai.Stream
	_root *Bootload
	_parent *Sbp_SbpMessage
}
func NewBootload_MsgBootloaderJumpToApp() *Bootload_MsgBootloaderJumpToApp {
	return &Bootload_MsgBootloaderJumpToApp{
	}
}

func (this *Bootload_MsgBootloaderJumpToApp) Read(io *kaitai.Stream, parent *Sbp_SbpMessage, root *Bootload) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp1, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Jump = tmp1
	return err
}

/**
 * Ignored by the device
 */

/**
 * The handshake message response from the device establishes a handshake
 * between the device bootloader and the host. The request from the host is
 * MSG_BOOTLOADER_HANDSHAKE_REQ.  The payload contains the bootloader
 * version number and the SBP protocol version number.
 */
type Bootload_MsgBootloaderHandshakeResp struct {
	Flags uint32
	Version string
	_io *kaitai.Stream
	_root *Bootload
	_parent *Sbp_SbpMessage
}
func NewBootload_MsgBootloaderHandshakeResp() *Bootload_MsgBootloaderHandshakeResp {
	return &Bootload_MsgBootloaderHandshakeResp{
	}
}

func (this *Bootload_MsgBootloaderHandshakeResp) Read(io *kaitai.Stream, parent *Sbp_SbpMessage, root *Bootload) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp2, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.Flags = uint32(tmp2)
	tmp3, err := this._io.ReadBytesFull()
	if err != nil {
		return err
	}
	tmp3 = tmp3
	this.Version = string(tmp3)
	return err
}

/**
 * Bootloader flags
 */

/**
 * Bootloader version number
 */

/**
 * The device message from the host reads a unique device identifier from
 * the SwiftNAP, an FPGA. The host requests the ID by sending a
 * MSG_NAP_DEVICE_DNA_REQ message. The device responds with a
 * MSG_NAP_DEVICE_DNA_RESP message with the device ID in the payload. Note
 * that this ID is tied to the FPGA, and not related to the Piksi's serial
 * number.
 */
type Bootload_MsgNapDeviceDnaResp struct {
	Dna []uint8
	_io *kaitai.Stream
	_root *Bootload
	_parent *Sbp_SbpMessage
}
func NewBootload_MsgNapDeviceDnaResp() *Bootload_MsgNapDeviceDnaResp {
	return &Bootload_MsgNapDeviceDnaResp{
	}
}

func (this *Bootload_MsgNapDeviceDnaResp) Read(io *kaitai.Stream, parent *Sbp_SbpMessage, root *Bootload) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	for i := 0; i < int(8); i++ {
		_ = i
		tmp4, err := this._io.ReadU1()
		if err != nil {
			return err
		}
		this.Dna = append(this.Dna, tmp4)
	}
	return err
}

/**
 * 57-bit SwiftNAP FPGA Device ID. Remaining bits are padded on the
 * right.
 */

/**
 * The handshake message request from the host establishes a handshake
 * between the device bootloader and the host. The response from the device
 * is MSG_BOOTLOADER_HANDSHAKE_RESP.
 */
type Bootload_MsgBootloaderHandshakeReq struct {
	_io *kaitai.Stream
	_root *Bootload
	_parent *Sbp_SbpMessage
}
func NewBootload_MsgBootloaderHandshakeReq() *Bootload_MsgBootloaderHandshakeReq {
	return &Bootload_MsgBootloaderHandshakeReq{
	}
}

func (this *Bootload_MsgBootloaderHandshakeReq) Read(io *kaitai.Stream, parent *Sbp_SbpMessage, root *Bootload) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	return err
}

/**
 * Deprecated.
 */
type Bootload_MsgBootloaderHandshakeDepA struct {
	Handshake []uint8
	_io *kaitai.Stream
	_root *Bootload
	_parent *Sbp_SbpMessage
}
func NewBootload_MsgBootloaderHandshakeDepA() *Bootload_MsgBootloaderHandshakeDepA {
	return &Bootload_MsgBootloaderHandshakeDepA{
	}
}

func (this *Bootload_MsgBootloaderHandshakeDepA) Read(io *kaitai.Stream, parent *Sbp_SbpMessage, root *Bootload) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	for i := 1;; i++ {
		tmp5, err := this._io.EOF()
		if err != nil {
			return err
		}
		if tmp5 {
			break
		}
		tmp6, err := this._io.ReadU1()
		if err != nil {
			return err
		}
		this.Handshake = append(this.Handshake, tmp6)
	}
	return err
}

/**
 * Version number string (not NULL terminated)
 */
