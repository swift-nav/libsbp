// Code generated by kaitai-struct-compiler from a .ksy source file. DO NOT EDIT.

import "github.com/kaitai-io/kaitai_struct_go_runtime/kaitai"

type Observation struct {
	_io *kaitai.Stream
	_root *Observation
	_parent interface{}
}
func NewObservation() *Observation {
	return &Observation{
	}
}

func (this *Observation) Read(io *kaitai.Stream, parent interface{}, root *Observation) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	return err
}

/**
 * Azimuth and elevation angles of all the visible satellites that the
 * device does have ephemeris or almanac for.
 */
type Observation_MsgSvAzEl struct {
	Azel []*Observation_SvAzEl
	_io *kaitai.Stream
	_root *Observation
	_parent *Sbp_Message
}
func NewObservation_MsgSvAzEl() *Observation_MsgSvAzEl {
	return &Observation_MsgSvAzEl{
	}
}

func (this *Observation_MsgSvAzEl) Read(io *kaitai.Stream, parent *Sbp_Message, root *Observation) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	for i := 1;; i++ {
		tmp1, err := this._io.EOF()
		if err != nil {
			return err
		}
		if tmp1 {
			break
		}
		tmp2 := NewObservation_SvAzEl()
		err = tmp2.Read(this._io, this, this._root)
		if err != nil {
			return err
		}
		this.Azel = append(this.Azel, tmp2)
	}
	return err
}

/**
 * Azimuth and elevation per satellite
 */
type Observation_GnssCapb struct {
	GpsActive uint64
	GpsL2c uint64
	GpsL5 uint64
	GloActive uint32
	GloL2of uint32
	GloL3 uint32
	SbasActive uint64
	SbasL5 uint64
	BdsActive uint64
	BdsD2nav uint64
	BdsB2 uint64
	BdsB2a uint64
	QzssActive uint32
	GalActive uint64
	GalE5 uint64
	_io *kaitai.Stream
	_root *Observation
	_parent *Observation_MsgGnssCapb
}
func NewObservation_GnssCapb() *Observation_GnssCapb {
	return &Observation_GnssCapb{
	}
}

func (this *Observation_GnssCapb) Read(io *kaitai.Stream, parent *Observation_MsgGnssCapb, root *Observation) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp3, err := this._io.ReadU8le()
	if err != nil {
		return err
	}
	this.GpsActive = uint64(tmp3)
	tmp4, err := this._io.ReadU8le()
	if err != nil {
		return err
	}
	this.GpsL2c = uint64(tmp4)
	tmp5, err := this._io.ReadU8le()
	if err != nil {
		return err
	}
	this.GpsL5 = uint64(tmp5)
	tmp6, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.GloActive = uint32(tmp6)
	tmp7, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.GloL2of = uint32(tmp7)
	tmp8, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.GloL3 = uint32(tmp8)
	tmp9, err := this._io.ReadU8le()
	if err != nil {
		return err
	}
	this.SbasActive = uint64(tmp9)
	tmp10, err := this._io.ReadU8le()
	if err != nil {
		return err
	}
	this.SbasL5 = uint64(tmp10)
	tmp11, err := this._io.ReadU8le()
	if err != nil {
		return err
	}
	this.BdsActive = uint64(tmp11)
	tmp12, err := this._io.ReadU8le()
	if err != nil {
		return err
	}
	this.BdsD2nav = uint64(tmp12)
	tmp13, err := this._io.ReadU8le()
	if err != nil {
		return err
	}
	this.BdsB2 = uint64(tmp13)
	tmp14, err := this._io.ReadU8le()
	if err != nil {
		return err
	}
	this.BdsB2a = uint64(tmp14)
	tmp15, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.QzssActive = uint32(tmp15)
	tmp16, err := this._io.ReadU8le()
	if err != nil {
		return err
	}
	this.GalActive = uint64(tmp16)
	tmp17, err := this._io.ReadU8le()
	if err != nil {
		return err
	}
	this.GalE5 = uint64(tmp17)
	return err
}

/**
 * GPS SV active mask
 */

/**
 * GPS L2C active mask
 */

/**
 * GPS L5 active mask
 */

/**
 * GLO active mask
 */

/**
 * GLO L2OF active mask
 */

/**
 * GLO L3 active mask
 */

/**
 * SBAS active mask (PRNs 120..158, AN 7/62.2.2-18/18 Table B-23,
 * https://www.caat.or.th/wp-content/uploads/2018/03/SL-2018.18.E-1.pdf)
 */

/**
 * SBAS L5 active mask (PRNs 120..158, AN 7/62.2.2-18/18 Table B-23,
 * https://www.caat.or.th/wp-content/uploads/2018/03/SL-2018.18.E-1.pdf)
 */

/**
 * BDS active mask
 */

/**
 * BDS D2NAV active mask
 */

/**
 * BDS B2 active mask
 */

/**
 * BDS B2A active mask
 */

/**
 * QZSS active mask
 */

/**
 * GAL active mask
 */

/**
 * GAL E5 active mask
 */

/**
 * Deprecated.
 */
type Observation_MsgGroupDelayDepB struct {
	TOp *Gnss_GpsTimeSec
	Sid *Gnss_GnssSignalDep
	Valid uint8
	Tgd int16
	IscL1ca int16
	IscL2c int16
	_io *kaitai.Stream
	_root *Observation
	_parent *Sbp_Message
}
func NewObservation_MsgGroupDelayDepB() *Observation_MsgGroupDelayDepB {
	return &Observation_MsgGroupDelayDepB{
	}
}

func (this *Observation_MsgGroupDelayDepB) Read(io *kaitai.Stream, parent *Sbp_Message, root *Observation) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp18 := NewGnss_GpsTimeSec()
	err = tmp18.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.TOp = tmp18
	tmp19 := NewGnss_GnssSignalDep()
	err = tmp19.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.Sid = tmp19
	tmp20, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Valid = tmp20
	tmp21, err := this._io.ReadS2le()
	if err != nil {
		return err
	}
	this.Tgd = int16(tmp21)
	tmp22, err := this._io.ReadS2le()
	if err != nil {
		return err
	}
	this.IscL1ca = int16(tmp22)
	tmp23, err := this._io.ReadS2le()
	if err != nil {
		return err
	}
	this.IscL2c = int16(tmp23)
	return err
}

/**
 * Data Predict Time of Week
 */

/**
 * GNSS signal identifier
 */

/**
 * bit-field indicating validity of the values, LSB indicating tgd
 * validity etc. 1 = value is valid, 0 = value is not valid.
 */

/**
 * Header of a GPS observation message.
 */
type Observation_ObservationHeaderDep struct {
	T *Gnss_GpsTimeDep
	NObs uint8
	_io *kaitai.Stream
	_root *Observation
	_parent interface{}
}
func NewObservation_ObservationHeaderDep() *Observation_ObservationHeaderDep {
	return &Observation_ObservationHeaderDep{
	}
}

func (this *Observation_ObservationHeaderDep) Read(io *kaitai.Stream, parent interface{}, root *Observation) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp24 := NewGnss_GpsTimeDep()
	err = tmp24.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.T = tmp24
	tmp25, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.NObs = tmp25
	return err
}

/**
 * GPS time of this observation
 */

/**
 * Total number of observations. First nibble is the size of the
 * sequence (n), second nibble is the zero-indexed counter (ith packet
 * of n)
 */
type Observation_AlmanacCommonContentDep struct {
	Sid *Gnss_GnssSignalDep
	Toa *Gnss_GpsTimeSec
	Ura float64
	FitInterval uint32
	Valid uint8
	HealthBits uint8
	_io *kaitai.Stream
	_root *Observation
	_parent interface{}
}
func NewObservation_AlmanacCommonContentDep() *Observation_AlmanacCommonContentDep {
	return &Observation_AlmanacCommonContentDep{
	}
}

func (this *Observation_AlmanacCommonContentDep) Read(io *kaitai.Stream, parent interface{}, root *Observation) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp26 := NewGnss_GnssSignalDep()
	err = tmp26.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.Sid = tmp26
	tmp27 := NewGnss_GpsTimeSec()
	err = tmp27.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.Toa = tmp27
	tmp28, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Ura = float64(tmp28)
	tmp29, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.FitInterval = uint32(tmp29)
	tmp30, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Valid = tmp30
	tmp31, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.HealthBits = tmp31
	return err
}

/**
 * GNSS signal identifier
 */

/**
 * Reference time of almanac
 */

/**
 * User Range Accuracy
 */

/**
 * Curve fit interval
 */

/**
 * Status of almanac, 1 = valid, 0 = invalid
 */

/**
 * Satellite health status for GPS:
 *   - bits 5-7: NAV data health status. See IS-GPS-200H
 *     Table 20-VII: NAV Data Health Indications.
 *   - bits 0-4: Signal health status. See IS-GPS-200H
 *     Table 20-VIII. Codes for Health of SV Signal
 *     Components.
 * Satellite health status for GLO (see GLO ICD 5.1 table 5.1 for
 * details):
 *   - bit 0: C(n), "unhealthy" flag that is transmitted within
 *     non-immediate data and indicates overall constellation status
 *     at the moment of almanac uploading.
 *     '0' indicates malfunction of n-satellite.
 *     '1' indicates that n-satellite is operational.
 *   - bit 1: Bn(ln), '0' indicates the satellite is operational
 *     and suitable for navigation.
 */
type Observation_EphemerisCommonContentDepA struct {
	Sid *Gnss_GnssSignalDep
	Toe *Gnss_GpsTimeDep
	Ura float64
	FitInterval uint32
	Valid uint8
	HealthBits uint8
	_io *kaitai.Stream
	_root *Observation
	_parent interface{}
}
func NewObservation_EphemerisCommonContentDepA() *Observation_EphemerisCommonContentDepA {
	return &Observation_EphemerisCommonContentDepA{
	}
}

func (this *Observation_EphemerisCommonContentDepA) Read(io *kaitai.Stream, parent interface{}, root *Observation) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp32 := NewGnss_GnssSignalDep()
	err = tmp32.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.Sid = tmp32
	tmp33 := NewGnss_GpsTimeDep()
	err = tmp33.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.Toe = tmp33
	tmp34, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Ura = float64(tmp34)
	tmp35, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.FitInterval = uint32(tmp35)
	tmp36, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Valid = tmp36
	tmp37, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.HealthBits = tmp37
	return err
}

/**
 * GNSS signal identifier
 */

/**
 * Time of Ephemerides
 */

/**
 * User Range Accuracy
 */

/**
 * Curve fit interval
 */

/**
 * Status of ephemeris, 1 = valid, 0 = invalid
 */

/**
 * Satellite health status.
 * GPS: ICD-GPS-200, chapter 20.3.3.3.1.4
 * SBAS: 0 = valid, non-zero = invalid
 * GLO: 0 = valid, non-zero = invalid
 */
type Observation_EphemerisCommonContent struct {
	Sid *Gnss_GnssSignal
	Toe *Gnss_GpsTimeSec
	Ura float32
	FitInterval uint32
	Valid uint8
	HealthBits uint8
	_io *kaitai.Stream
	_root *Observation
	_parent interface{}
}
func NewObservation_EphemerisCommonContent() *Observation_EphemerisCommonContent {
	return &Observation_EphemerisCommonContent{
	}
}

func (this *Observation_EphemerisCommonContent) Read(io *kaitai.Stream, parent interface{}, root *Observation) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp38 := NewGnss_GnssSignal()
	err = tmp38.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.Sid = tmp38
	tmp39 := NewGnss_GpsTimeSec()
	err = tmp39.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.Toe = tmp39
	tmp40, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.Ura = float32(tmp40)
	tmp41, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.FitInterval = uint32(tmp41)
	tmp42, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Valid = tmp42
	tmp43, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.HealthBits = tmp43
	return err
}

/**
 * GNSS signal identifier (16 bit)
 */

/**
 * Time of Ephemerides
 */

/**
 * User Range Accuracy
 */

/**
 * Curve fit interval
 */

/**
 * Status of ephemeris, 1 = valid, 0 = invalid
 */

/**
 * Satellite health status.
 * GPS: ICD-GPS-200, chapter 20.3.3.3.1.4
 * SBAS: 0 = valid, non-zero = invalid
 * GLO: 0 = valid, non-zero = invalid
 */

/**
 * Pseudorange and carrier phase observation for a satellite being tracked.
 * The observations are be interoperable with 3rd party receivers and
 * conform with typical RTCMv3 GNSS observations.
 */
type Observation_PackedObsContentDepC struct {
	P uint32
	L *Gnss_CarrierPhase
	Cn0 uint8
	Lock uint16
	Sid *Gnss_GnssSignalDep
	_io *kaitai.Stream
	_root *Observation
	_parent *Observation_MsgObsDepC
}
func NewObservation_PackedObsContentDepC() *Observation_PackedObsContentDepC {
	return &Observation_PackedObsContentDepC{
	}
}

func (this *Observation_PackedObsContentDepC) Read(io *kaitai.Stream, parent *Observation_MsgObsDepC, root *Observation) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp44, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.P = uint32(tmp44)
	tmp45 := NewGnss_CarrierPhase()
	err = tmp45.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.L = tmp45
	tmp46, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Cn0 = tmp46
	tmp47, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.Lock = uint16(tmp47)
	tmp48 := NewGnss_GnssSignalDep()
	err = tmp48.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.Sid = tmp48
	return err
}

/**
 * Pseudorange observation
 */

/**
 * Carrier phase observation with typical sign convention.
 */

/**
 * Carrier-to-Noise density
 */

/**
 * Lock indicator. This value changes whenever a satellite signal has
 * lost and regained lock, indicating that the carrier phase ambiguity
 * may have changed.
 */

/**
 * GNSS signal identifier
 */

/**
 * This observation message has been deprecated in favor of ephemeris
 * message using floats for size reduction.
 */
type Observation_MsgEphemerisGloDepD struct {
	Common *Observation_EphemerisCommonContentDepB
	Gamma float64
	Tau float64
	DTau float64
	Pos []float64
	Vel []float64
	Acc []float64
	Fcn uint8
	Iod uint8
	_io *kaitai.Stream
	_root *Observation
	_parent *Sbp_Message
}
func NewObservation_MsgEphemerisGloDepD() *Observation_MsgEphemerisGloDepD {
	return &Observation_MsgEphemerisGloDepD{
	}
}

func (this *Observation_MsgEphemerisGloDepD) Read(io *kaitai.Stream, parent *Sbp_Message, root *Observation) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp49 := NewObservation_EphemerisCommonContentDepB()
	err = tmp49.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.Common = tmp49
	tmp50, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Gamma = float64(tmp50)
	tmp51, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Tau = float64(tmp51)
	tmp52, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.DTau = float64(tmp52)
	for i := 0; i < int(3); i++ {
		_ = i
		tmp53, err := this._io.ReadF8le()
		if err != nil {
			return err
		}
		this.Pos = append(this.Pos, tmp53)
	}
	for i := 0; i < int(3); i++ {
		_ = i
		tmp54, err := this._io.ReadF8le()
		if err != nil {
			return err
		}
		this.Vel = append(this.Vel, tmp54)
	}
	for i := 0; i < int(3); i++ {
		_ = i
		tmp55, err := this._io.ReadF8le()
		if err != nil {
			return err
		}
		this.Acc = append(this.Acc, tmp55)
	}
	tmp56, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Fcn = tmp56
	tmp57, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Iod = tmp57
	return err
}

/**
 * Values common for all ephemeris types
 */

/**
 * Relative deviation of predicted carrier frequency from nominal
 */

/**
 * Correction to the SV time
 */

/**
 * Equipment delay between L1 and L2
 */

/**
 * Position of the SV at tb in PZ-90.02 coordinates system
 */

/**
 * Velocity vector of the SV at tb in PZ-90.02 coordinates system
 */

/**
 * Acceleration vector of the SV at tb in PZ-90.02 coordinates sys
 */

/**
 * Frequency slot. FCN+8 (that is [1..14]). 0 or 0xFF for invalid
 */

/**
 * Issue of data. Equal to the 7 bits of the immediate data word t_b
 */

/**
 * Deprecated.
 */
type Observation_MsgObsDepA struct {
	Header *Observation_ObservationHeaderDep
	Obs []*Observation_PackedObsContentDepA
	_io *kaitai.Stream
	_root *Observation
	_parent *Sbp_Message
}
func NewObservation_MsgObsDepA() *Observation_MsgObsDepA {
	return &Observation_MsgObsDepA{
	}
}

func (this *Observation_MsgObsDepA) Read(io *kaitai.Stream, parent *Sbp_Message, root *Observation) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp58 := NewObservation_ObservationHeaderDep()
	err = tmp58.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.Header = tmp58
	for i := 1;; i++ {
		tmp59, err := this._io.EOF()
		if err != nil {
			return err
		}
		if tmp59 {
			break
		}
		tmp60 := NewObservation_PackedObsContentDepA()
		err = tmp60.Read(this._io, this, this._root)
		if err != nil {
			return err
		}
		this.Obs = append(this.Obs, tmp60)
	}
	return err
}

/**
 * Header of a GPS observation message
 */

/**
 * Pseudorange and carrier phase observation for a satellite being
 * tracked.
 */

/**
 * Deprecated.
 */
type Observation_MsgEphemerisDepB struct {
	Tgd float64
	CRs float64
	CRc float64
	CUc float64
	CUs float64
	CIc float64
	CIs float64
	Dn float64
	M0 float64
	Ecc float64
	Sqrta float64
	Omega0 float64
	Omegadot float64
	W float64
	Inc float64
	IncDot float64
	Af0 float64
	Af1 float64
	Af2 float64
	ToeTow float64
	ToeWn uint16
	TocTow float64
	TocWn uint16
	Valid uint8
	Healthy uint8
	Prn uint8
	Iode uint8
	_io *kaitai.Stream
	_root *Observation
	_parent *Sbp_Message
}
func NewObservation_MsgEphemerisDepB() *Observation_MsgEphemerisDepB {
	return &Observation_MsgEphemerisDepB{
	}
}

func (this *Observation_MsgEphemerisDepB) Read(io *kaitai.Stream, parent *Sbp_Message, root *Observation) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp61, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Tgd = float64(tmp61)
	tmp62, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.CRs = float64(tmp62)
	tmp63, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.CRc = float64(tmp63)
	tmp64, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.CUc = float64(tmp64)
	tmp65, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.CUs = float64(tmp65)
	tmp66, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.CIc = float64(tmp66)
	tmp67, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.CIs = float64(tmp67)
	tmp68, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Dn = float64(tmp68)
	tmp69, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.M0 = float64(tmp69)
	tmp70, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Ecc = float64(tmp70)
	tmp71, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Sqrta = float64(tmp71)
	tmp72, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Omega0 = float64(tmp72)
	tmp73, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Omegadot = float64(tmp73)
	tmp74, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.W = float64(tmp74)
	tmp75, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Inc = float64(tmp75)
	tmp76, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.IncDot = float64(tmp76)
	tmp77, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Af0 = float64(tmp77)
	tmp78, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Af1 = float64(tmp78)
	tmp79, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Af2 = float64(tmp79)
	tmp80, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.ToeTow = float64(tmp80)
	tmp81, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.ToeWn = uint16(tmp81)
	tmp82, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.TocTow = float64(tmp82)
	tmp83, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.TocWn = uint16(tmp83)
	tmp84, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Valid = tmp84
	tmp85, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Healthy = tmp85
	tmp86, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Prn = tmp86
	tmp87, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Iode = tmp87
	return err
}

/**
 * Group delay differential between L1 and L2
 */

/**
 * Amplitude of the sine harmonic correction term to the orbit radius
 */

/**
 * Amplitude of the cosine harmonic correction term to the orbit radius
 */

/**
 * Amplitude of the cosine harmonic correction term to the argument of
 * latitude
 */

/**
 * Amplitude of the sine harmonic correction term to the argument of
 * latitude
 */

/**
 * Amplitude of the cosine harmonic correction term to the angle of
 * inclination
 */

/**
 * Amplitude of the sine harmonic correction term to the angle of
 * inclination
 */

/**
 * Mean motion difference
 */

/**
 * Mean anomaly at reference time
 */

/**
 * Eccentricity of satellite orbit
 */

/**
 * Square root of the semi-major axis of orbit
 */

/**
 * Longitude of ascending node of orbit plane at weekly epoch
 */

/**
 * Rate of right ascension
 */

/**
 * Argument of perigee
 */

/**
 * Inclination
 */

/**
 * Inclination first derivative
 */

/**
 * Polynomial clock correction coefficient (clock bias)
 */

/**
 * Polynomial clock correction coefficient (clock drift)
 */

/**
 * Polynomial clock correction coefficient (rate of clock drift)
 */

/**
 * Time of week
 */

/**
 * Week number
 */

/**
 * Clock reference time of week
 */

/**
 * Clock reference week number
 */

/**
 * Is valid?
 */

/**
 * Satellite is healthy?
 */

/**
 * PRN being tracked
 */

/**
 * Issue of ephemeris data
 */

/**
 * The GPS observations message reports all the raw pseudorange and carrier
 * phase observations for the satellites being tracked by the device.
 * Carrier phase observation here is represented as a 40-bit fixed point
 * number with Q32.8 layout (i.e. 32-bits of whole cycles and 8-bits of
 * fractional cycles). The observations are be interoperable with 3rd party
 * receivers and conform with typical RTCMv3 GNSS observations.
 */
type Observation_MsgObs struct {
	Header *Observation_ObservationHeader
	Obs []*Observation_PackedObsContent
	_io *kaitai.Stream
	_root *Observation
	_parent *Sbp_Message
}
func NewObservation_MsgObs() *Observation_MsgObs {
	return &Observation_MsgObs{
	}
}

func (this *Observation_MsgObs) Read(io *kaitai.Stream, parent *Sbp_Message, root *Observation) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp88 := NewObservation_ObservationHeader()
	err = tmp88.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.Header = tmp88
	for i := 1;; i++ {
		tmp89, err := this._io.EOF()
		if err != nil {
			return err
		}
		if tmp89 {
			break
		}
		tmp90 := NewObservation_PackedObsContent()
		err = tmp90.Read(this._io, this, this._root)
		if err != nil {
			return err
		}
		this.Obs = append(this.Obs, tmp90)
	}
	return err
}

/**
 * Header of a GPS observation message
 */

/**
 * Pseudorange and carrier phase observation for a satellite being
 * tracked.
 */

/**
 * Doppler measurement in Hz represented as a 24-bit fixed point number
 * with Q16.8 layout, i.e. 16-bits of whole doppler and 8-bits of
 * fractional doppler. This doppler is defined as positive for approaching
 * satellites.
 */
type Observation_Doppler struct {
	I int16
	F uint8
	_io *kaitai.Stream
	_root *Observation
	_parent *Observation_PackedObsContent
}
func NewObservation_Doppler() *Observation_Doppler {
	return &Observation_Doppler{
	}
}

func (this *Observation_Doppler) Read(io *kaitai.Stream, parent *Observation_PackedObsContent, root *Observation) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp91, err := this._io.ReadS2le()
	if err != nil {
		return err
	}
	this.I = int16(tmp91)
	tmp92, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.F = tmp92
	return err
}

/**
 * Doppler whole Hz
 */

/**
 * Doppler fractional part
 */

/**
 * Deprecated.
 */
type Observation_MsgAlmanacGloDep struct {
	Common *Observation_AlmanacCommonContentDep
	LambdaNa float64
	TLambdaNa float64
	I float64
	T float64
	TDot float64
	Epsilon float64
	Omega float64
	_io *kaitai.Stream
	_root *Observation
	_parent *Sbp_Message
}
func NewObservation_MsgAlmanacGloDep() *Observation_MsgAlmanacGloDep {
	return &Observation_MsgAlmanacGloDep{
	}
}

func (this *Observation_MsgAlmanacGloDep) Read(io *kaitai.Stream, parent *Sbp_Message, root *Observation) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp93 := NewObservation_AlmanacCommonContentDep()
	err = tmp93.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.Common = tmp93
	tmp94, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.LambdaNa = float64(tmp94)
	tmp95, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.TLambdaNa = float64(tmp95)
	tmp96, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.I = float64(tmp96)
	tmp97, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.T = float64(tmp97)
	tmp98, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.TDot = float64(tmp98)
	tmp99, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Epsilon = float64(tmp99)
	tmp100, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Omega = float64(tmp100)
	return err
}

/**
 * Values common for all almanac types
 */

/**
 * Longitude of the first ascending node of the orbit in PZ-90.02
 * coordinate system
 */

/**
 * Time of the first ascending node passage
 */

/**
 * Value of inclination at instant of t_lambda
 */

/**
 * Value of Draconian period at instant of t_lambda
 */

/**
 * Rate of change of the Draconian period
 */

/**
 * Eccentricity at instant of t_lambda
 */

/**
 * Argument of perigee at instant of t_lambda
 */

/**
 * Deprecated.
 */
type Observation_MsgAlmanacGpsDep struct {
	Common *Observation_AlmanacCommonContentDep
	M0 float64
	Ecc float64
	Sqrta float64
	Omega0 float64
	Omegadot float64
	W float64
	Inc float64
	Af0 float64
	Af1 float64
	_io *kaitai.Stream
	_root *Observation
	_parent *Sbp_Message
}
func NewObservation_MsgAlmanacGpsDep() *Observation_MsgAlmanacGpsDep {
	return &Observation_MsgAlmanacGpsDep{
	}
}

func (this *Observation_MsgAlmanacGpsDep) Read(io *kaitai.Stream, parent *Sbp_Message, root *Observation) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp101 := NewObservation_AlmanacCommonContentDep()
	err = tmp101.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.Common = tmp101
	tmp102, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.M0 = float64(tmp102)
	tmp103, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Ecc = float64(tmp103)
	tmp104, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Sqrta = float64(tmp104)
	tmp105, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Omega0 = float64(tmp105)
	tmp106, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Omegadot = float64(tmp106)
	tmp107, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.W = float64(tmp107)
	tmp108, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Inc = float64(tmp108)
	tmp109, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Af0 = float64(tmp109)
	tmp110, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Af1 = float64(tmp110)
	return err
}

/**
 * Values common for all almanac types
 */

/**
 * Mean anomaly at reference time
 */

/**
 * Eccentricity of satellite orbit
 */

/**
 * Square root of the semi-major axis of orbit
 */

/**
 * Longitude of ascending node of orbit plane at weekly epoch
 */

/**
 * Rate of right ascension
 */

/**
 * Argument of perigee
 */

/**
 * Inclination
 */

/**
 * Polynomial clock correction coefficient (clock bias)
 */

/**
 * Polynomial clock correction coefficient (clock drift)
 */

/**
 * Satellite azimuth and elevation.
 */
type Observation_SvAzEl struct {
	Sid *Gnss_GnssSignal
	Az uint8
	El int8
	_io *kaitai.Stream
	_root *Observation
	_parent *Observation_MsgSvAzEl
}
func NewObservation_SvAzEl() *Observation_SvAzEl {
	return &Observation_SvAzEl{
	}
}

func (this *Observation_SvAzEl) Read(io *kaitai.Stream, parent *Observation_MsgSvAzEl, root *Observation) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp111 := NewGnss_GnssSignal()
	err = tmp111.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.Sid = tmp111
	tmp112, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Az = tmp112
	tmp113, err := this._io.ReadS1()
	if err != nil {
		return err
	}
	this.El = tmp113
	return err
}

/**
 * GNSS signal identifier
 */

/**
 * Azimuth angle (range 0..179)
 */

/**
 * Elevation angle (range -90..90)
 */

/**
 * The GLONASS L1/L2 Code-Phase biases allows to perform GPS+GLONASS
 * integer ambiguity resolution for baselines with mixed receiver types
 * (e.g. receiver of different manufacturers).
 */
type Observation_MsgGloBiases struct {
	Mask uint8
	L1caBias int16
	L1pBias int16
	L2caBias int16
	L2pBias int16
	_io *kaitai.Stream
	_root *Observation
	_parent *Sbp_Message
}
func NewObservation_MsgGloBiases() *Observation_MsgGloBiases {
	return &Observation_MsgGloBiases{
	}
}

func (this *Observation_MsgGloBiases) Read(io *kaitai.Stream, parent *Sbp_Message, root *Observation) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp114, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Mask = tmp114
	tmp115, err := this._io.ReadS2le()
	if err != nil {
		return err
	}
	this.L1caBias = int16(tmp115)
	tmp116, err := this._io.ReadS2le()
	if err != nil {
		return err
	}
	this.L1pBias = int16(tmp116)
	tmp117, err := this._io.ReadS2le()
	if err != nil {
		return err
	}
	this.L2caBias = int16(tmp117)
	tmp118, err := this._io.ReadS2le()
	if err != nil {
		return err
	}
	this.L2pBias = int16(tmp118)
	return err
}

/**
 * GLONASS FDMA signals mask
 */

/**
 * GLONASS L1 C/A Code-Phase Bias
 */

/**
 * GLONASS L1 P Code-Phase Bias
 */

/**
 * GLONASS L2 C/A Code-Phase Bias
 */

/**
 * GLONASS L2 P Code-Phase Bias
 */

/**
 * Deprecated.
 */
type Observation_MsgEphemerisSbasDepB struct {
	Common *Observation_EphemerisCommonContentDepB
	Pos []float64
	Vel []float64
	Acc []float64
	AGf0 float64
	AGf1 float64
	_io *kaitai.Stream
	_root *Observation
	_parent *Sbp_Message
}
func NewObservation_MsgEphemerisSbasDepB() *Observation_MsgEphemerisSbasDepB {
	return &Observation_MsgEphemerisSbasDepB{
	}
}

func (this *Observation_MsgEphemerisSbasDepB) Read(io *kaitai.Stream, parent *Sbp_Message, root *Observation) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp119 := NewObservation_EphemerisCommonContentDepB()
	err = tmp119.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.Common = tmp119
	for i := 0; i < int(3); i++ {
		_ = i
		tmp120, err := this._io.ReadF8le()
		if err != nil {
			return err
		}
		this.Pos = append(this.Pos, tmp120)
	}
	for i := 0; i < int(3); i++ {
		_ = i
		tmp121, err := this._io.ReadF8le()
		if err != nil {
			return err
		}
		this.Vel = append(this.Vel, tmp121)
	}
	for i := 0; i < int(3); i++ {
		_ = i
		tmp122, err := this._io.ReadF8le()
		if err != nil {
			return err
		}
		this.Acc = append(this.Acc, tmp122)
	}
	tmp123, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.AGf0 = float64(tmp123)
	tmp124, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.AGf1 = float64(tmp124)
	return err
}

/**
 * Values common for all ephemeris types
 */

/**
 * Position of the GEO at time toe
 */

/**
 * Velocity of the GEO at time toe
 */

/**
 * Acceleration of the GEO at time toe
 */

/**
 * Time offset of the GEO clock w.r.t. SBAS Network Time
 */

/**
 * Drift of the GEO clock w.r.t. SBAS Network Time
 */

/**
 * Deprecated.
 */
type Observation_MsgEphemerisGpsDepE struct {
	Common *Observation_EphemerisCommonContentDepA
	Tgd float64
	CRs float64
	CRc float64
	CUc float64
	CUs float64
	CIc float64
	CIs float64
	Dn float64
	M0 float64
	Ecc float64
	Sqrta float64
	Omega0 float64
	Omegadot float64
	W float64
	Inc float64
	IncDot float64
	Af0 float64
	Af1 float64
	Af2 float64
	Toc *Gnss_GpsTimeDep
	Iode uint8
	Iodc uint16
	_io *kaitai.Stream
	_root *Observation
	_parent *Sbp_Message
}
func NewObservation_MsgEphemerisGpsDepE() *Observation_MsgEphemerisGpsDepE {
	return &Observation_MsgEphemerisGpsDepE{
	}
}

func (this *Observation_MsgEphemerisGpsDepE) Read(io *kaitai.Stream, parent *Sbp_Message, root *Observation) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp125 := NewObservation_EphemerisCommonContentDepA()
	err = tmp125.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.Common = tmp125
	tmp126, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Tgd = float64(tmp126)
	tmp127, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.CRs = float64(tmp127)
	tmp128, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.CRc = float64(tmp128)
	tmp129, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.CUc = float64(tmp129)
	tmp130, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.CUs = float64(tmp130)
	tmp131, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.CIc = float64(tmp131)
	tmp132, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.CIs = float64(tmp132)
	tmp133, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Dn = float64(tmp133)
	tmp134, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.M0 = float64(tmp134)
	tmp135, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Ecc = float64(tmp135)
	tmp136, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Sqrta = float64(tmp136)
	tmp137, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Omega0 = float64(tmp137)
	tmp138, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Omegadot = float64(tmp138)
	tmp139, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.W = float64(tmp139)
	tmp140, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Inc = float64(tmp140)
	tmp141, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.IncDot = float64(tmp141)
	tmp142, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Af0 = float64(tmp142)
	tmp143, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Af1 = float64(tmp143)
	tmp144, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Af2 = float64(tmp144)
	tmp145 := NewGnss_GpsTimeDep()
	err = tmp145.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.Toc = tmp145
	tmp146, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Iode = tmp146
	tmp147, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.Iodc = uint16(tmp147)
	return err
}

/**
 * Values common for all ephemeris types
 */

/**
 * Group delay differential between L1 and L2
 */

/**
 * Amplitude of the sine harmonic correction term to the orbit radius
 */

/**
 * Amplitude of the cosine harmonic correction term to the orbit radius
 */

/**
 * Amplitude of the cosine harmonic correction term to the argument of
 * latitude
 */

/**
 * Amplitude of the sine harmonic correction term to the argument of
 * latitude
 */

/**
 * Amplitude of the cosine harmonic correction term to the angle of
 * inclination
 */

/**
 * Amplitude of the sine harmonic correction term to the angle of
 * inclination
 */

/**
 * Mean motion difference
 */

/**
 * Mean anomaly at reference time
 */

/**
 * Eccentricity of satellite orbit
 */

/**
 * Square root of the semi-major axis of orbit
 */

/**
 * Longitude of ascending node of orbit plane at weekly epoch
 */

/**
 * Rate of right ascension
 */

/**
 * Argument of perigee
 */

/**
 * Inclination
 */

/**
 * Inclination first derivative
 */

/**
 * Polynomial clock correction coefficient (clock bias)
 */

/**
 * Polynomial clock correction coefficient (clock drift)
 */

/**
 * Polynomial clock correction coefficient (rate of clock drift)
 */

/**
 * Clock reference
 */

/**
 * Issue of ephemeris data
 */

/**
 * Issue of clock data
 */

/**
 * Bit masks of signal capabilities for each GNSS satellite PRN.
 * Please see ICD-GPS-200 (Chapter 20.3.3.5.1.4) for more details.
 */
type Observation_MsgGnssCapb struct {
	TNmct *Gnss_GpsTimeSec
	Gc *Observation_GnssCapb
	_io *kaitai.Stream
	_root *Observation
	_parent *Sbp_Message
}
func NewObservation_MsgGnssCapb() *Observation_MsgGnssCapb {
	return &Observation_MsgGnssCapb{
	}
}

func (this *Observation_MsgGnssCapb) Read(io *kaitai.Stream, parent *Sbp_Message, root *Observation) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp148 := NewGnss_GpsTimeSec()
	err = tmp148.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.TNmct = tmp148
	tmp149 := NewObservation_GnssCapb()
	err = tmp149.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.Gc = tmp149
	return err
}

/**
 * Navigation Message Correction Table Validity Time
 */

/**
 * GNSS capabilities masks
 */

/**
 * The almanac message returns a set of satellite orbit parameters. Almanac
 * data is not very precise and is considered valid for up to several
 * months. Please see the Navstar GPS Space Segment/Navigation user
 * interfaces (ICD-GPS-200, Chapter 20.3.3.5.1.2 Almanac Data) for more
 * details.
 */
type Observation_MsgAlmanacGps struct {
	Common *Observation_AlmanacCommonContent
	M0 float64
	Ecc float64
	Sqrta float64
	Omega0 float64
	Omegadot float64
	W float64
	Inc float64
	Af0 float64
	Af1 float64
	_io *kaitai.Stream
	_root *Observation
	_parent *Sbp_Message
}
func NewObservation_MsgAlmanacGps() *Observation_MsgAlmanacGps {
	return &Observation_MsgAlmanacGps{
	}
}

func (this *Observation_MsgAlmanacGps) Read(io *kaitai.Stream, parent *Sbp_Message, root *Observation) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp150 := NewObservation_AlmanacCommonContent()
	err = tmp150.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.Common = tmp150
	tmp151, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.M0 = float64(tmp151)
	tmp152, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Ecc = float64(tmp152)
	tmp153, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Sqrta = float64(tmp153)
	tmp154, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Omega0 = float64(tmp154)
	tmp155, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Omegadot = float64(tmp155)
	tmp156, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.W = float64(tmp156)
	tmp157, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Inc = float64(tmp157)
	tmp158, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Af0 = float64(tmp158)
	tmp159, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Af1 = float64(tmp159)
	return err
}

/**
 * Values common for all almanac types
 */

/**
 * Mean anomaly at reference time
 */

/**
 * Eccentricity of satellite orbit
 */

/**
 * Square root of the semi-major axis of orbit
 */

/**
 * Longitude of ascending node of orbit plane at weekly epoch
 */

/**
 * Rate of right ascension
 */

/**
 * Argument of perigee
 */

/**
 * Inclination
 */

/**
 * Polynomial clock correction coefficient (clock bias)
 */

/**
 * Polynomial clock correction coefficient (clock drift)
 */

/**
 * The ephemeris message returns a set of satellite orbit parameters that
 * is used to calculate QZSS satellite position, velocity, and clock
 * offset.
 */
type Observation_MsgEphemerisQzss struct {
	Common *Observation_EphemerisCommonContent
	Tgd float32
	CRs float32
	CRc float32
	CUc float32
	CUs float32
	CIc float32
	CIs float32
	Dn float64
	M0 float64
	Ecc float64
	Sqrta float64
	Omega0 float64
	Omegadot float64
	W float64
	Inc float64
	IncDot float64
	Af0 float32
	Af1 float32
	Af2 float32
	Toc *Gnss_GpsTimeSec
	Iode uint8
	Iodc uint16
	_io *kaitai.Stream
	_root *Observation
	_parent *Sbp_Message
}
func NewObservation_MsgEphemerisQzss() *Observation_MsgEphemerisQzss {
	return &Observation_MsgEphemerisQzss{
	}
}

func (this *Observation_MsgEphemerisQzss) Read(io *kaitai.Stream, parent *Sbp_Message, root *Observation) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp160 := NewObservation_EphemerisCommonContent()
	err = tmp160.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.Common = tmp160
	tmp161, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.Tgd = float32(tmp161)
	tmp162, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.CRs = float32(tmp162)
	tmp163, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.CRc = float32(tmp163)
	tmp164, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.CUc = float32(tmp164)
	tmp165, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.CUs = float32(tmp165)
	tmp166, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.CIc = float32(tmp166)
	tmp167, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.CIs = float32(tmp167)
	tmp168, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Dn = float64(tmp168)
	tmp169, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.M0 = float64(tmp169)
	tmp170, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Ecc = float64(tmp170)
	tmp171, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Sqrta = float64(tmp171)
	tmp172, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Omega0 = float64(tmp172)
	tmp173, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Omegadot = float64(tmp173)
	tmp174, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.W = float64(tmp174)
	tmp175, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Inc = float64(tmp175)
	tmp176, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.IncDot = float64(tmp176)
	tmp177, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.Af0 = float32(tmp177)
	tmp178, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.Af1 = float32(tmp178)
	tmp179, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.Af2 = float32(tmp179)
	tmp180 := NewGnss_GpsTimeSec()
	err = tmp180.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.Toc = tmp180
	tmp181, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Iode = tmp181
	tmp182, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.Iodc = uint16(tmp182)
	return err
}

/**
 * Values common for all ephemeris types
 */

/**
 * Group delay differential between L1 and L2
 */

/**
 * Amplitude of the sine harmonic correction term to the orbit radius
 */

/**
 * Amplitude of the cosine harmonic correction term to the orbit radius
 */

/**
 * Amplitude of the cosine harmonic correction term to the argument of
 * latitude
 */

/**
 * Amplitude of the sine harmonic correction term to the argument of
 * latitude
 */

/**
 * Amplitude of the cosine harmonic correction term to the angle of
 * inclination
 */

/**
 * Amplitude of the sine harmonic correction term to the angle of
 * inclination
 */

/**
 * Mean motion difference
 */

/**
 * Mean anomaly at reference time
 */

/**
 * Eccentricity of satellite orbit
 */

/**
 * Square root of the semi-major axis of orbit
 */

/**
 * Longitude of ascending node of orbit plane at weekly epoch
 */

/**
 * Rate of right ascension
 */

/**
 * Argument of perigee
 */

/**
 * Inclination
 */

/**
 * Inclination first derivative
 */

/**
 * Polynomial clock correction coefficient (clock bias)
 */

/**
 * Polynomial clock correction coefficient (clock drift)
 */

/**
 * Polynomial clock correction coefficient (rate of clock drift)
 */

/**
 * Clock reference
 */

/**
 * Issue of ephemeris data
 */

/**
 * Issue of clock data
 */

/**
 * Deprecated.
 */
type Observation_MsgGroupDelayDepA struct {
	TOp *Gnss_GpsTimeDep
	Prn uint8
	Valid uint8
	Tgd int16
	IscL1ca int16
	IscL2c int16
	_io *kaitai.Stream
	_root *Observation
	_parent *Sbp_Message
}
func NewObservation_MsgGroupDelayDepA() *Observation_MsgGroupDelayDepA {
	return &Observation_MsgGroupDelayDepA{
	}
}

func (this *Observation_MsgGroupDelayDepA) Read(io *kaitai.Stream, parent *Sbp_Message, root *Observation) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp183 := NewGnss_GpsTimeDep()
	err = tmp183.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.TOp = tmp183
	tmp184, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Prn = tmp184
	tmp185, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Valid = tmp185
	tmp186, err := this._io.ReadS2le()
	if err != nil {
		return err
	}
	this.Tgd = int16(tmp186)
	tmp187, err := this._io.ReadS2le()
	if err != nil {
		return err
	}
	this.IscL1ca = int16(tmp187)
	tmp188, err := this._io.ReadS2le()
	if err != nil {
		return err
	}
	this.IscL2c = int16(tmp188)
	return err
}

/**
 * Data Predict Time of Week
 */

/**
 * Satellite number
 */

/**
 * bit-field indicating validity of the values, LSB indicating tgd
 * validity etc. 1 = value is valid, 0 = value is not valid.
 */

/**
 * Deprecated.
 */
type Observation_MsgEphemerisDepC struct {
	Tgd float64
	CRs float64
	CRc float64
	CUc float64
	CUs float64
	CIc float64
	CIs float64
	Dn float64
	M0 float64
	Ecc float64
	Sqrta float64
	Omega0 float64
	Omegadot float64
	W float64
	Inc float64
	IncDot float64
	Af0 float64
	Af1 float64
	Af2 float64
	ToeTow float64
	ToeWn uint16
	TocTow float64
	TocWn uint16
	Valid uint8
	Healthy uint8
	Sid *Gnss_GnssSignalDep
	Iode uint8
	Iodc uint16
	Reserved uint32
	_io *kaitai.Stream
	_root *Observation
	_parent *Sbp_Message
}
func NewObservation_MsgEphemerisDepC() *Observation_MsgEphemerisDepC {
	return &Observation_MsgEphemerisDepC{
	}
}

func (this *Observation_MsgEphemerisDepC) Read(io *kaitai.Stream, parent *Sbp_Message, root *Observation) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp189, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Tgd = float64(tmp189)
	tmp190, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.CRs = float64(tmp190)
	tmp191, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.CRc = float64(tmp191)
	tmp192, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.CUc = float64(tmp192)
	tmp193, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.CUs = float64(tmp193)
	tmp194, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.CIc = float64(tmp194)
	tmp195, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.CIs = float64(tmp195)
	tmp196, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Dn = float64(tmp196)
	tmp197, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.M0 = float64(tmp197)
	tmp198, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Ecc = float64(tmp198)
	tmp199, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Sqrta = float64(tmp199)
	tmp200, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Omega0 = float64(tmp200)
	tmp201, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Omegadot = float64(tmp201)
	tmp202, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.W = float64(tmp202)
	tmp203, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Inc = float64(tmp203)
	tmp204, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.IncDot = float64(tmp204)
	tmp205, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Af0 = float64(tmp205)
	tmp206, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Af1 = float64(tmp206)
	tmp207, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Af2 = float64(tmp207)
	tmp208, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.ToeTow = float64(tmp208)
	tmp209, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.ToeWn = uint16(tmp209)
	tmp210, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.TocTow = float64(tmp210)
	tmp211, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.TocWn = uint16(tmp211)
	tmp212, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Valid = tmp212
	tmp213, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Healthy = tmp213
	tmp214 := NewGnss_GnssSignalDep()
	err = tmp214.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.Sid = tmp214
	tmp215, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Iode = tmp215
	tmp216, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.Iodc = uint16(tmp216)
	tmp217, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.Reserved = uint32(tmp217)
	return err
}

/**
 * Group delay differential between L1 and L2
 */

/**
 * Amplitude of the sine harmonic correction term to the orbit radius
 */

/**
 * Amplitude of the cosine harmonic correction term to the orbit radius
 */

/**
 * Amplitude of the cosine harmonic correction term to the argument of
 * latitude
 */

/**
 * Amplitude of the sine harmonic correction term to the argument of
 * latitude
 */

/**
 * Amplitude of the cosine harmonic correction term to the angle of
 * inclination
 */

/**
 * Amplitude of the sine harmonic correction term to the angle of
 * inclination
 */

/**
 * Mean motion difference
 */

/**
 * Mean anomaly at reference time
 */

/**
 * Eccentricity of satellite orbit
 */

/**
 * Square root of the semi-major axis of orbit
 */

/**
 * Longitude of ascending node of orbit plane at weekly epoch
 */

/**
 * Rate of right ascension
 */

/**
 * Argument of perigee
 */

/**
 * Inclination
 */

/**
 * Inclination first derivative
 */

/**
 * Polynomial clock correction coefficient (clock bias)
 */

/**
 * Polynomial clock correction coefficient (clock drift)
 */

/**
 * Polynomial clock correction coefficient (rate of clock drift)
 */

/**
 * Time of week
 */

/**
 * Week number
 */

/**
 * Clock reference time of week
 */

/**
 * Clock reference week number
 */

/**
 * Is valid?
 */

/**
 * Satellite is healthy?
 */

/**
 * GNSS signal identifier
 */

/**
 * Issue of ephemeris data
 */

/**
 * Issue of clock data
 */

/**
 * Reserved field
 */

/**
 * Carrier phase measurement in cycles represented as a 40-bit fixed point
 * number with Q32.8 layout, i.e. 32-bits of whole cycles and 8-bits of
 * fractional cycles. This has the opposite sign convention than a typical
 * GPS receiver and the phase has the opposite sign as the pseudorange.
 */
type Observation_CarrierPhaseDepA struct {
	I int32
	F uint8
	_io *kaitai.Stream
	_root *Observation
	_parent interface{}
}
func NewObservation_CarrierPhaseDepA() *Observation_CarrierPhaseDepA {
	return &Observation_CarrierPhaseDepA{
	}
}

func (this *Observation_CarrierPhaseDepA) Read(io *kaitai.Stream, parent interface{}, root *Observation) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp218, err := this._io.ReadS4le()
	if err != nil {
		return err
	}
	this.I = int32(tmp218)
	tmp219, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.F = tmp219
	return err
}

/**
 * Carrier phase whole cycles
 */

/**
 * Carrier phase fractional part
 */

/**
 * The ephemeris message returns a set of satellite orbit parameters that
 * is used to calculate Galileo satellite position, velocity, and clock
 * offset. Please see the Signal In Space ICD OS SIS ICD, Issue 1.3,
 * December 2016 for more details.
 */
type Observation_MsgEphemerisGal struct {
	Common *Observation_EphemerisCommonContent
	BgdE1e5a float32
	BgdE1e5b float32
	CRs float32
	CRc float32
	CUc float32
	CUs float32
	CIc float32
	CIs float32
	Dn float64
	M0 float64
	Ecc float64
	Sqrta float64
	Omega0 float64
	Omegadot float64
	W float64
	Inc float64
	IncDot float64
	Af0 float64
	Af1 float64
	Af2 float32
	Toc *Gnss_GpsTimeSec
	Iode uint16
	Iodc uint16
	Source uint8
	_io *kaitai.Stream
	_root *Observation
	_parent *Sbp_Message
}
func NewObservation_MsgEphemerisGal() *Observation_MsgEphemerisGal {
	return &Observation_MsgEphemerisGal{
	}
}

func (this *Observation_MsgEphemerisGal) Read(io *kaitai.Stream, parent *Sbp_Message, root *Observation) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp220 := NewObservation_EphemerisCommonContent()
	err = tmp220.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.Common = tmp220
	tmp221, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.BgdE1e5a = float32(tmp221)
	tmp222, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.BgdE1e5b = float32(tmp222)
	tmp223, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.CRs = float32(tmp223)
	tmp224, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.CRc = float32(tmp224)
	tmp225, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.CUc = float32(tmp225)
	tmp226, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.CUs = float32(tmp226)
	tmp227, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.CIc = float32(tmp227)
	tmp228, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.CIs = float32(tmp228)
	tmp229, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Dn = float64(tmp229)
	tmp230, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.M0 = float64(tmp230)
	tmp231, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Ecc = float64(tmp231)
	tmp232, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Sqrta = float64(tmp232)
	tmp233, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Omega0 = float64(tmp233)
	tmp234, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Omegadot = float64(tmp234)
	tmp235, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.W = float64(tmp235)
	tmp236, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Inc = float64(tmp236)
	tmp237, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.IncDot = float64(tmp237)
	tmp238, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Af0 = float64(tmp238)
	tmp239, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Af1 = float64(tmp239)
	tmp240, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.Af2 = float32(tmp240)
	tmp241 := NewGnss_GpsTimeSec()
	err = tmp241.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.Toc = tmp241
	tmp242, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.Iode = uint16(tmp242)
	tmp243, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.Iodc = uint16(tmp243)
	tmp244, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Source = tmp244
	return err
}

/**
 * Values common for all ephemeris types
 */

/**
 * E1-E5a Broadcast Group Delay
 */

/**
 * E1-E5b Broadcast Group Delay
 */

/**
 * Amplitude of the sine harmonic correction term to the orbit radius
 */

/**
 * Amplitude of the cosine harmonic correction term to the orbit radius
 */

/**
 * Amplitude of the cosine harmonic correction term to the argument of
 * latitude
 */

/**
 * Amplitude of the sine harmonic correction term to the argument of
 * latitude
 */

/**
 * Amplitude of the cosine harmonic correction term to the angle of
 * inclination
 */

/**
 * Amplitude of the sine harmonic correction term to the angle of
 * inclination
 */

/**
 * Mean motion difference
 */

/**
 * Mean anomaly at reference time
 */

/**
 * Eccentricity of satellite orbit
 */

/**
 * Square root of the semi-major axis of orbit
 */

/**
 * Longitude of ascending node of orbit plane at weekly epoch
 */

/**
 * Rate of right ascension
 */

/**
 * Argument of perigee
 */

/**
 * Inclination
 */

/**
 * Inclination first derivative
 */

/**
 * Polynomial clock correction coefficient (clock bias)
 */

/**
 * Polynomial clock correction coefficient (clock drift)
 */

/**
 * Polynomial clock correction coefficient (rate of clock drift)
 */

/**
 * Clock reference
 */

/**
 * Issue of data (IODnav)
 */

/**
 * Issue of data (IODnav). Always equal to iode
 */

/**
 * 0=I/NAV, 1=F/NAV
 */

/**
 * Pseudorange and carrier phase network corrections for a satellite
 * signal.
 */
type Observation_PackedOsrContent struct {
	P uint32
	L *Gnss_CarrierPhase
	Lock uint8
	Flags uint8
	Sid *Gnss_GnssSignal
	IonoStd uint16
	TropoStd uint16
	RangeStd uint16
	_io *kaitai.Stream
	_root *Observation
	_parent *Observation_MsgOsr
}
func NewObservation_PackedOsrContent() *Observation_PackedOsrContent {
	return &Observation_PackedOsrContent{
	}
}

func (this *Observation_PackedOsrContent) Read(io *kaitai.Stream, parent *Observation_MsgOsr, root *Observation) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp245, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.P = uint32(tmp245)
	tmp246 := NewGnss_CarrierPhase()
	err = tmp246.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.L = tmp246
	tmp247, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Lock = tmp247
	tmp248, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Flags = tmp248
	tmp249 := NewGnss_GnssSignal()
	err = tmp249.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.Sid = tmp249
	tmp250, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.IonoStd = uint16(tmp250)
	tmp251, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.TropoStd = uint16(tmp251)
	tmp252, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.RangeStd = uint16(tmp252)
	return err
}

/**
 * Pseudorange observation
 */

/**
 * Carrier phase observation with typical sign convention.
 */

/**
 * Lock timer. This value gives an indication of the time for which a
 * signal has maintained continuous phase lock. Whenever a signal has
 * lost and regained lock, this value is reset to zero. It is encoded
 * according to DF402 from the RTCM 10403.2 Amendment 2 specification.
 * Valid values range from 0 to 15 and the most significant nibble is
 * reserved for future use.
 */

/**
 * Correction flags.
 */

/**
 * GNSS signal identifier (16 bit)
 */

/**
 * Slant ionospheric correction standard deviation
 */

/**
 * Slant tropospheric correction standard deviation
 */

/**
 * Orbit/clock/bias correction projected on range standard deviation
 */

/**
 * The ephemeris message returns a set of satellite orbit parameters that
 * is used to calculate BDS satellite position, velocity, and clock offset.
 * Please see the BeiDou Navigation Satellite System SIS-ICD Version 2.1,
 * Table 5-9 for more details.
 */
type Observation_MsgEphemerisBds struct {
	Common *Observation_EphemerisCommonContent
	Tgd1 float32
	Tgd2 float32
	CRs float32
	CRc float32
	CUc float32
	CUs float32
	CIc float32
	CIs float32
	Dn float64
	M0 float64
	Ecc float64
	Sqrta float64
	Omega0 float64
	Omegadot float64
	W float64
	Inc float64
	IncDot float64
	Af0 float64
	Af1 float32
	Af2 float32
	Toc *Gnss_GpsTimeSec
	Iode uint8
	Iodc uint16
	_io *kaitai.Stream
	_root *Observation
	_parent *Sbp_Message
}
func NewObservation_MsgEphemerisBds() *Observation_MsgEphemerisBds {
	return &Observation_MsgEphemerisBds{
	}
}

func (this *Observation_MsgEphemerisBds) Read(io *kaitai.Stream, parent *Sbp_Message, root *Observation) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp253 := NewObservation_EphemerisCommonContent()
	err = tmp253.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.Common = tmp253
	tmp254, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.Tgd1 = float32(tmp254)
	tmp255, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.Tgd2 = float32(tmp255)
	tmp256, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.CRs = float32(tmp256)
	tmp257, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.CRc = float32(tmp257)
	tmp258, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.CUc = float32(tmp258)
	tmp259, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.CUs = float32(tmp259)
	tmp260, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.CIc = float32(tmp260)
	tmp261, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.CIs = float32(tmp261)
	tmp262, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Dn = float64(tmp262)
	tmp263, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.M0 = float64(tmp263)
	tmp264, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Ecc = float64(tmp264)
	tmp265, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Sqrta = float64(tmp265)
	tmp266, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Omega0 = float64(tmp266)
	tmp267, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Omegadot = float64(tmp267)
	tmp268, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.W = float64(tmp268)
	tmp269, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Inc = float64(tmp269)
	tmp270, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.IncDot = float64(tmp270)
	tmp271, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Af0 = float64(tmp271)
	tmp272, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.Af1 = float32(tmp272)
	tmp273, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.Af2 = float32(tmp273)
	tmp274 := NewGnss_GpsTimeSec()
	err = tmp274.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.Toc = tmp274
	tmp275, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Iode = tmp275
	tmp276, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.Iodc = uint16(tmp276)
	return err
}

/**
 * Values common for all ephemeris types
 */

/**
 * Group delay differential for B1
 */

/**
 * Group delay differential for B2
 */

/**
 * Amplitude of the sine harmonic correction term to the orbit radius
 */

/**
 * Amplitude of the cosine harmonic correction term to the orbit radius
 */

/**
 * Amplitude of the cosine harmonic correction term to the argument of
 * latitude
 */

/**
 * Amplitude of the sine harmonic correction term to the argument of
 * latitude
 */

/**
 * Amplitude of the cosine harmonic correction term to the angle of
 * inclination
 */

/**
 * Amplitude of the sine harmonic correction term to the angle of
 * inclination
 */

/**
 * Mean motion difference
 */

/**
 * Mean anomaly at reference time
 */

/**
 * Eccentricity of satellite orbit
 */

/**
 * Square root of the semi-major axis of orbit
 */

/**
 * Longitude of ascending node of orbit plane at weekly epoch
 */

/**
 * Rate of right ascension
 */

/**
 * Argument of perigee
 */

/**
 * Inclination
 */

/**
 * Inclination first derivative
 */

/**
 * Polynomial clock correction coefficient (clock bias)
 */

/**
 * Polynomial clock correction coefficient (clock drift)
 */

/**
 * Polynomial clock correction coefficient (rate of clock drift)
 */

/**
 * Clock reference
 */

/**
 * Issue of ephemeris data
 * Calculated from the navigation data parameter t_oe per RTCM/CSNO
 * recommendation: IODE = mod (t_oe / 720, 240)
 */

/**
 * Issue of clock data
 * Calculated from the navigation data parameter t_oe per RTCM/CSNO
 * recommendation: IODE = mod (t_oc / 720, 240)
 */

/**
 * Deprecated.
 */
type Observation_MsgEphemerisGpsDepF struct {
	Common *Observation_EphemerisCommonContentDepB
	Tgd float64
	CRs float64
	CRc float64
	CUc float64
	CUs float64
	CIc float64
	CIs float64
	Dn float64
	M0 float64
	Ecc float64
	Sqrta float64
	Omega0 float64
	Omegadot float64
	W float64
	Inc float64
	IncDot float64
	Af0 float64
	Af1 float64
	Af2 float64
	Toc *Gnss_GpsTimeSec
	Iode uint8
	Iodc uint16
	_io *kaitai.Stream
	_root *Observation
	_parent *Sbp_Message
}
func NewObservation_MsgEphemerisGpsDepF() *Observation_MsgEphemerisGpsDepF {
	return &Observation_MsgEphemerisGpsDepF{
	}
}

func (this *Observation_MsgEphemerisGpsDepF) Read(io *kaitai.Stream, parent *Sbp_Message, root *Observation) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp277 := NewObservation_EphemerisCommonContentDepB()
	err = tmp277.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.Common = tmp277
	tmp278, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Tgd = float64(tmp278)
	tmp279, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.CRs = float64(tmp279)
	tmp280, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.CRc = float64(tmp280)
	tmp281, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.CUc = float64(tmp281)
	tmp282, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.CUs = float64(tmp282)
	tmp283, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.CIc = float64(tmp283)
	tmp284, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.CIs = float64(tmp284)
	tmp285, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Dn = float64(tmp285)
	tmp286, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.M0 = float64(tmp286)
	tmp287, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Ecc = float64(tmp287)
	tmp288, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Sqrta = float64(tmp288)
	tmp289, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Omega0 = float64(tmp289)
	tmp290, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Omegadot = float64(tmp290)
	tmp291, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.W = float64(tmp291)
	tmp292, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Inc = float64(tmp292)
	tmp293, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.IncDot = float64(tmp293)
	tmp294, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Af0 = float64(tmp294)
	tmp295, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Af1 = float64(tmp295)
	tmp296, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Af2 = float64(tmp296)
	tmp297 := NewGnss_GpsTimeSec()
	err = tmp297.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.Toc = tmp297
	tmp298, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Iode = tmp298
	tmp299, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.Iodc = uint16(tmp299)
	return err
}

/**
 * Values common for all ephemeris types
 */

/**
 * Group delay differential between L1 and L2
 */

/**
 * Amplitude of the sine harmonic correction term to the orbit radius
 */

/**
 * Amplitude of the cosine harmonic correction term to the orbit radius
 */

/**
 * Amplitude of the cosine harmonic correction term to the argument of
 * latitude
 */

/**
 * Amplitude of the sine harmonic correction term to the argument of
 * latitude
 */

/**
 * Amplitude of the cosine harmonic correction term to the angle of
 * inclination
 */

/**
 * Amplitude of the sine harmonic correction term to the angle of
 * inclination
 */

/**
 * Mean motion difference
 */

/**
 * Mean anomaly at reference time
 */

/**
 * Eccentricity of satellite orbit
 */

/**
 * Square root of the semi-major axis of orbit
 */

/**
 * Longitude of ascending node of orbit plane at weekly epoch
 */

/**
 * Rate of right ascension
 */

/**
 * Argument of perigee
 */

/**
 * Inclination
 */

/**
 * Inclination first derivative
 */

/**
 * Polynomial clock correction coefficient (clock bias)
 */

/**
 * Polynomial clock correction coefficient (clock drift)
 */

/**
 * Polynomial clock correction coefficient (rate of clock drift)
 */

/**
 * Clock reference
 */

/**
 * Issue of ephemeris data
 */

/**
 * Issue of clock data
 */

/**
 * Header of a GNSS observation message.
 */
type Observation_ObservationHeader struct {
	T *Gnss_GpsTime
	NObs uint8
	_io *kaitai.Stream
	_root *Observation
	_parent interface{}
}
func NewObservation_ObservationHeader() *Observation_ObservationHeader {
	return &Observation_ObservationHeader{
	}
}

func (this *Observation_ObservationHeader) Read(io *kaitai.Stream, parent interface{}, root *Observation) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp300 := NewGnss_GpsTime()
	err = tmp300.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.T = tmp300
	tmp301, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.NObs = tmp301
	return err
}

/**
 * GNSS time of this observation
 */

/**
 * Total number of observations. First nibble is the size of the
 * sequence (n), second nibble is the zero-indexed counter (ith packet
 * of n)
 */

/**
 * Deprecated.
 */
type Observation_MsgEphemerisSbasDepA struct {
	Common *Observation_EphemerisCommonContentDepA
	Pos []float64
	Vel []float64
	Acc []float64
	AGf0 float64
	AGf1 float64
	_io *kaitai.Stream
	_root *Observation
	_parent *Sbp_Message
}
func NewObservation_MsgEphemerisSbasDepA() *Observation_MsgEphemerisSbasDepA {
	return &Observation_MsgEphemerisSbasDepA{
	}
}

func (this *Observation_MsgEphemerisSbasDepA) Read(io *kaitai.Stream, parent *Sbp_Message, root *Observation) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp302 := NewObservation_EphemerisCommonContentDepA()
	err = tmp302.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.Common = tmp302
	for i := 0; i < int(3); i++ {
		_ = i
		tmp303, err := this._io.ReadF8le()
		if err != nil {
			return err
		}
		this.Pos = append(this.Pos, tmp303)
	}
	for i := 0; i < int(3); i++ {
		_ = i
		tmp304, err := this._io.ReadF8le()
		if err != nil {
			return err
		}
		this.Vel = append(this.Vel, tmp304)
	}
	for i := 0; i < int(3); i++ {
		_ = i
		tmp305, err := this._io.ReadF8le()
		if err != nil {
			return err
		}
		this.Acc = append(this.Acc, tmp305)
	}
	tmp306, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.AGf0 = float64(tmp306)
	tmp307, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.AGf1 = float64(tmp307)
	return err
}

/**
 * Values common for all ephemeris types
 */

/**
 * Position of the GEO at time toe
 */

/**
 * Velocity of the GEO at time toe
 */

/**
 * Acceleration of the GEO at time toe
 */

/**
 * Time offset of the GEO clock w.r.t. SBAS Network Time
 */

/**
 * Drift of the GEO clock w.r.t. SBAS Network Time
 */

/**
 * Pseudorange and carrier phase observation for a satellite being tracked.
 * The observations are interoperable with 3rd party receivers and conform
 * with typical RTCM 3.1 message GPS/GLO observations.
 * 
 * Carrier phase observations are not guaranteed to be aligned to the RINEX
 * 3 or RTCM 3.3 MSM reference signal and no 1/4 cycle adjustments are
 * currently performed.
 */
type Observation_PackedObsContent struct {
	P uint32
	L *Gnss_CarrierPhase
	D *Observation_Doppler
	Cn0 uint8
	Lock uint8
	Flags uint8
	Sid *Gnss_GnssSignal
	_io *kaitai.Stream
	_root *Observation
	_parent *Observation_MsgObs
}
func NewObservation_PackedObsContent() *Observation_PackedObsContent {
	return &Observation_PackedObsContent{
	}
}

func (this *Observation_PackedObsContent) Read(io *kaitai.Stream, parent *Observation_MsgObs, root *Observation) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp308, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.P = uint32(tmp308)
	tmp309 := NewGnss_CarrierPhase()
	err = tmp309.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.L = tmp309
	tmp310 := NewObservation_Doppler()
	err = tmp310.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.D = tmp310
	tmp311, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Cn0 = tmp311
	tmp312, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Lock = tmp312
	tmp313, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Flags = tmp313
	tmp314 := NewGnss_GnssSignal()
	err = tmp314.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.Sid = tmp314
	return err
}

/**
 * Pseudorange observation
 */

/**
 * Carrier phase observation with typical sign convention.
 */

/**
 * Doppler observation with typical sign convention.
 */

/**
 * Carrier-to-Noise density.  Zero implies invalid cn0.
 */

/**
 * Lock timer. This value gives an indication of the time for which a
 * signal has maintained continuous phase lock. Whenever a signal has
 * lost and regained lock, this value is reset to zero. It is encoded
 * according to DF402 from the RTCM 10403.2 Amendment 2 specification.
 * Valid values range from 0 to 15 and the most significant nibble is
 * reserved for future use.
 */

/**
 * Measurement status flags. A bit field of flags providing the status
 * of this observation.  If this field is 0 it means only the Cn0
 * estimate for the signal is valid.
 */

/**
 * GNSS signal identifier (16 bit)
 */

/**
 * The base station position message is the position reported by the base
 * station itself in absolute Earth Centered Earth Fixed coordinates. It is
 * used for pseudo-absolute RTK positioning, and is required to be a high-
 * accuracy surveyed location of the base station. Any error here will
 * result in an error in the pseudo-absolute position output.
 */
type Observation_MsgBasePosEcef struct {
	X float64
	Y float64
	Z float64
	_io *kaitai.Stream
	_root *Observation
	_parent *Sbp_Message
}
func NewObservation_MsgBasePosEcef() *Observation_MsgBasePosEcef {
	return &Observation_MsgBasePosEcef{
	}
}

func (this *Observation_MsgBasePosEcef) Read(io *kaitai.Stream, parent *Sbp_Message, root *Observation) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp315, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.X = float64(tmp315)
	tmp316, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Y = float64(tmp316)
	tmp317, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Z = float64(tmp317)
	return err
}

/**
 * ECEF X coordinate
 */

/**
 * ECEF Y coordinate
 */

/**
 * ECEF Z coordinate
 */

/**
 * Deprecated.
 */
type Observation_MsgEphemerisGloDepA struct {
	Common *Observation_EphemerisCommonContentDepA
	Gamma float64
	Tau float64
	Pos []float64
	Vel []float64
	Acc []float64
	_io *kaitai.Stream
	_root *Observation
	_parent *Sbp_Message
}
func NewObservation_MsgEphemerisGloDepA() *Observation_MsgEphemerisGloDepA {
	return &Observation_MsgEphemerisGloDepA{
	}
}

func (this *Observation_MsgEphemerisGloDepA) Read(io *kaitai.Stream, parent *Sbp_Message, root *Observation) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp318 := NewObservation_EphemerisCommonContentDepA()
	err = tmp318.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.Common = tmp318
	tmp319, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Gamma = float64(tmp319)
	tmp320, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Tau = float64(tmp320)
	for i := 0; i < int(3); i++ {
		_ = i
		tmp321, err := this._io.ReadF8le()
		if err != nil {
			return err
		}
		this.Pos = append(this.Pos, tmp321)
	}
	for i := 0; i < int(3); i++ {
		_ = i
		tmp322, err := this._io.ReadF8le()
		if err != nil {
			return err
		}
		this.Vel = append(this.Vel, tmp322)
	}
	for i := 0; i < int(3); i++ {
		_ = i
		tmp323, err := this._io.ReadF8le()
		if err != nil {
			return err
		}
		this.Acc = append(this.Acc, tmp323)
	}
	return err
}

/**
 * Values common for all ephemeris types
 */

/**
 * Relative deviation of predicted carrier frequency from nominal
 */

/**
 * Correction to the SV time
 */

/**
 * Position of the SV at tb in PZ-90.02 coordinates system
 */

/**
 * Velocity vector of the SV at tb in PZ-90.02 coordinates system
 */

/**
 * Acceleration vector of the SV at tb in PZ-90.02 coordinates sys
 */

/**
 * Please see ICD-GPS-200 (30.3.3.3.1.1) for more details.
 */
type Observation_MsgGroupDelay struct {
	TOp *Gnss_GpsTimeSec
	Sid *Gnss_GnssSignal
	Valid uint8
	Tgd int16
	IscL1ca int16
	IscL2c int16
	_io *kaitai.Stream
	_root *Observation
	_parent *Sbp_Message
}
func NewObservation_MsgGroupDelay() *Observation_MsgGroupDelay {
	return &Observation_MsgGroupDelay{
	}
}

func (this *Observation_MsgGroupDelay) Read(io *kaitai.Stream, parent *Sbp_Message, root *Observation) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp324 := NewGnss_GpsTimeSec()
	err = tmp324.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.TOp = tmp324
	tmp325 := NewGnss_GnssSignal()
	err = tmp325.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.Sid = tmp325
	tmp326, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Valid = tmp326
	tmp327, err := this._io.ReadS2le()
	if err != nil {
		return err
	}
	this.Tgd = int16(tmp327)
	tmp328, err := this._io.ReadS2le()
	if err != nil {
		return err
	}
	this.IscL1ca = int16(tmp328)
	tmp329, err := this._io.ReadS2le()
	if err != nil {
		return err
	}
	this.IscL2c = int16(tmp329)
	return err
}

/**
 * Data Predict Time of Week
 */

/**
 * GNSS signal identifier
 */

/**
 * bit-field indicating validity of the values, LSB indicating tgd
 * validity etc. 1 = value is valid, 0 = value is not valid.
 */

/**
 * The almanac message returns a set of satellite orbit parameters. Almanac
 * data is not very precise and is considered valid for up to several
 * months. Please see the GLO ICD 5.1 "Chapter 4.5 Non-immediate
 * information and almanac" for details.
 */
type Observation_MsgAlmanacGlo struct {
	Common *Observation_AlmanacCommonContent
	LambdaNa float64
	TLambdaNa float64
	I float64
	T float64
	TDot float64
	Epsilon float64
	Omega float64
	_io *kaitai.Stream
	_root *Observation
	_parent *Sbp_Message
}
func NewObservation_MsgAlmanacGlo() *Observation_MsgAlmanacGlo {
	return &Observation_MsgAlmanacGlo{
	}
}

func (this *Observation_MsgAlmanacGlo) Read(io *kaitai.Stream, parent *Sbp_Message, root *Observation) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp330 := NewObservation_AlmanacCommonContent()
	err = tmp330.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.Common = tmp330
	tmp331, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.LambdaNa = float64(tmp331)
	tmp332, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.TLambdaNa = float64(tmp332)
	tmp333, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.I = float64(tmp333)
	tmp334, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.T = float64(tmp334)
	tmp335, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.TDot = float64(tmp335)
	tmp336, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Epsilon = float64(tmp336)
	tmp337, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Omega = float64(tmp337)
	return err
}

/**
 * Values common for all almanac types
 */

/**
 * Longitude of the first ascending node of the orbit in PZ-90.02
 * coordinate system
 */

/**
 * Time of the first ascending node passage
 */

/**
 * Value of inclination at instant of t_lambda
 */

/**
 * Value of Draconian period at instant of t_lambda
 */

/**
 * Rate of change of the Draconian period
 */

/**
 * Eccentricity at instant of t_lambda
 */

/**
 * Argument of perigee at instant of t_lambda
 */

/**
 * Deprecated.
 */
type Observation_MsgEphemerisGalDepA struct {
	Common *Observation_EphemerisCommonContent
	BgdE1e5a float32
	BgdE1e5b float32
	CRs float32
	CRc float32
	CUc float32
	CUs float32
	CIc float32
	CIs float32
	Dn float64
	M0 float64
	Ecc float64
	Sqrta float64
	Omega0 float64
	Omegadot float64
	W float64
	Inc float64
	IncDot float64
	Af0 float64
	Af1 float64
	Af2 float32
	Toc *Gnss_GpsTimeSec
	Iode uint16
	Iodc uint16
	_io *kaitai.Stream
	_root *Observation
	_parent *Sbp_Message
}
func NewObservation_MsgEphemerisGalDepA() *Observation_MsgEphemerisGalDepA {
	return &Observation_MsgEphemerisGalDepA{
	}
}

func (this *Observation_MsgEphemerisGalDepA) Read(io *kaitai.Stream, parent *Sbp_Message, root *Observation) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp338 := NewObservation_EphemerisCommonContent()
	err = tmp338.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.Common = tmp338
	tmp339, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.BgdE1e5a = float32(tmp339)
	tmp340, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.BgdE1e5b = float32(tmp340)
	tmp341, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.CRs = float32(tmp341)
	tmp342, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.CRc = float32(tmp342)
	tmp343, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.CUc = float32(tmp343)
	tmp344, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.CUs = float32(tmp344)
	tmp345, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.CIc = float32(tmp345)
	tmp346, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.CIs = float32(tmp346)
	tmp347, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Dn = float64(tmp347)
	tmp348, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.M0 = float64(tmp348)
	tmp349, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Ecc = float64(tmp349)
	tmp350, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Sqrta = float64(tmp350)
	tmp351, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Omega0 = float64(tmp351)
	tmp352, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Omegadot = float64(tmp352)
	tmp353, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.W = float64(tmp353)
	tmp354, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Inc = float64(tmp354)
	tmp355, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.IncDot = float64(tmp355)
	tmp356, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Af0 = float64(tmp356)
	tmp357, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Af1 = float64(tmp357)
	tmp358, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.Af2 = float32(tmp358)
	tmp359 := NewGnss_GpsTimeSec()
	err = tmp359.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.Toc = tmp359
	tmp360, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.Iode = uint16(tmp360)
	tmp361, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.Iodc = uint16(tmp361)
	return err
}

/**
 * Values common for all ephemeris types
 */

/**
 * E1-E5a Broadcast Group Delay
 */

/**
 * E1-E5b Broadcast Group Delay
 */

/**
 * Amplitude of the sine harmonic correction term to the orbit radius
 */

/**
 * Amplitude of the cosine harmonic correction term to the orbit radius
 */

/**
 * Amplitude of the cosine harmonic correction term to the argument of
 * latitude
 */

/**
 * Amplitude of the sine harmonic correction term to the argument of
 * latitude
 */

/**
 * Amplitude of the cosine harmonic correction term to the angle of
 * inclination
 */

/**
 * Amplitude of the sine harmonic correction term to the angle of
 * inclination
 */

/**
 * Mean motion difference
 */

/**
 * Mean anomaly at reference time
 */

/**
 * Eccentricity of satellite orbit
 */

/**
 * Square root of the semi-major axis of orbit
 */

/**
 * Longitude of ascending node of orbit plane at weekly epoch
 */

/**
 * Rate of right ascension
 */

/**
 * Argument of perigee
 */

/**
 * Inclination
 */

/**
 * Inclination first derivative
 */

/**
 * Polynomial clock correction coefficient (clock bias)
 */

/**
 * Polynomial clock correction coefficient (clock drift)
 */

/**
 * Polynomial clock correction coefficient (rate of clock drift)
 */

/**
 * Clock reference
 */

/**
 * Issue of data (IODnav)
 */

/**
 * Issue of data (IODnav). Always equal to iode
 */

/**
 * Deprecated.
 */
type Observation_MsgObsDepB struct {
	Header *Observation_ObservationHeaderDep
	Obs []*Observation_PackedObsContentDepB
	_io *kaitai.Stream
	_root *Observation
	_parent *Sbp_Message
}
func NewObservation_MsgObsDepB() *Observation_MsgObsDepB {
	return &Observation_MsgObsDepB{
	}
}

func (this *Observation_MsgObsDepB) Read(io *kaitai.Stream, parent *Sbp_Message, root *Observation) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp362 := NewObservation_ObservationHeaderDep()
	err = tmp362.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.Header = tmp362
	for i := 1;; i++ {
		tmp363, err := this._io.EOF()
		if err != nil {
			return err
		}
		if tmp363 {
			break
		}
		tmp364 := NewObservation_PackedObsContentDepB()
		err = tmp364.Read(this._io, this, this._root)
		if err != nil {
			return err
		}
		this.Obs = append(this.Obs, tmp364)
	}
	return err
}

/**
 * Header of a GPS observation message
 */

/**
 * Pseudorange and carrier phase observation for a satellite being
 * tracked.
 */

/**
 * Deprecated.
 */
type Observation_PackedObsContentDepA struct {
	P uint32
	L *Observation_CarrierPhaseDepA
	Cn0 uint8
	Lock uint16
	Prn uint8
	_io *kaitai.Stream
	_root *Observation
	_parent *Observation_MsgObsDepA
}
func NewObservation_PackedObsContentDepA() *Observation_PackedObsContentDepA {
	return &Observation_PackedObsContentDepA{
	}
}

func (this *Observation_PackedObsContentDepA) Read(io *kaitai.Stream, parent *Observation_MsgObsDepA, root *Observation) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp365, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.P = uint32(tmp365)
	tmp366 := NewObservation_CarrierPhaseDepA()
	err = tmp366.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.L = tmp366
	tmp367, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Cn0 = tmp367
	tmp368, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.Lock = uint16(tmp368)
	tmp369, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Prn = tmp369
	return err
}

/**
 * Pseudorange observation
 */

/**
 * Carrier phase observation with opposite sign from typical convention
 */

/**
 * Carrier-to-Noise density
 */

/**
 * Lock indicator. This value changes whenever a satellite signal has
 * lost and regained lock, indicating that the carrier phase ambiguity
 * may have changed.
 */

/**
 * PRN-1 identifier of the satellite signal
 */

/**
 * The ephemeris message returns a set of satellite orbit parameters that
 * is used to calculate GLO satellite position, velocity, and clock offset.
 * Please see the GLO ICD 5.1 "Table 4.5 Characteristics of words of
 * immediate information (ephemeris parameters)" for more details.
 */
type Observation_MsgEphemerisGlo struct {
	Common *Observation_EphemerisCommonContent
	Gamma float32
	Tau float32
	DTau float32
	Pos []float64
	Vel []float64
	Acc []float32
	Fcn uint8
	Iod uint8
	_io *kaitai.Stream
	_root *Observation
	_parent *Sbp_Message
}
func NewObservation_MsgEphemerisGlo() *Observation_MsgEphemerisGlo {
	return &Observation_MsgEphemerisGlo{
	}
}

func (this *Observation_MsgEphemerisGlo) Read(io *kaitai.Stream, parent *Sbp_Message, root *Observation) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp370 := NewObservation_EphemerisCommonContent()
	err = tmp370.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.Common = tmp370
	tmp371, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.Gamma = float32(tmp371)
	tmp372, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.Tau = float32(tmp372)
	tmp373, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.DTau = float32(tmp373)
	for i := 0; i < int(3); i++ {
		_ = i
		tmp374, err := this._io.ReadF8le()
		if err != nil {
			return err
		}
		this.Pos = append(this.Pos, tmp374)
	}
	for i := 0; i < int(3); i++ {
		_ = i
		tmp375, err := this._io.ReadF8le()
		if err != nil {
			return err
		}
		this.Vel = append(this.Vel, tmp375)
	}
	for i := 0; i < int(3); i++ {
		_ = i
		tmp376, err := this._io.ReadF4le()
		if err != nil {
			return err
		}
		this.Acc = append(this.Acc, tmp376)
	}
	tmp377, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Fcn = tmp377
	tmp378, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Iod = tmp378
	return err
}

/**
 * Values common for all ephemeris types
 */

/**
 * Relative deviation of predicted carrier frequency from nominal
 */

/**
 * Correction to the SV time
 */

/**
 * Equipment delay between L1 and L2
 */

/**
 * Position of the SV at tb in PZ-90.02 coordinates system
 */

/**
 * Velocity vector of the SV at tb in PZ-90.02 coordinates system
 */

/**
 * Acceleration vector of the SV at tb in PZ-90.02 coordinates sys
 */

/**
 * Frequency slot. FCN+8 (that is [1..14]). 0 or 0xFF for invalid
 */

/**
 * Issue of data. Equal to the 7 bits of the immediate data word t_b
 */

/**
 * The ionospheric parameters which allow the "L1 only" or "L2 only" user
 * to utilize the ionospheric model for computation of the ionospheric
 * delay. Please see ICD-GPS-200 (Chapter 20.3.3.5.1.7) for more details.
 */
type Observation_MsgIono struct {
	TNmct *Gnss_GpsTimeSec
	A0 float64
	A1 float64
	A2 float64
	A3 float64
	B0 float64
	B1 float64
	B2 float64
	B3 float64
	_io *kaitai.Stream
	_root *Observation
	_parent *Sbp_Message
}
func NewObservation_MsgIono() *Observation_MsgIono {
	return &Observation_MsgIono{
	}
}

func (this *Observation_MsgIono) Read(io *kaitai.Stream, parent *Sbp_Message, root *Observation) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp379 := NewGnss_GpsTimeSec()
	err = tmp379.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.TNmct = tmp379
	tmp380, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.A0 = float64(tmp380)
	tmp381, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.A1 = float64(tmp381)
	tmp382, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.A2 = float64(tmp382)
	tmp383, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.A3 = float64(tmp383)
	tmp384, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.B0 = float64(tmp384)
	tmp385, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.B1 = float64(tmp385)
	tmp386, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.B2 = float64(tmp386)
	tmp387, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.B3 = float64(tmp387)
	return err
}

/**
 * Navigation Message Correction Table Validity Time
 */

/**
 * Deprecated.
 */
type Observation_MsgEphemerisDepD struct {
	Tgd float64
	CRs float64
	CRc float64
	CUc float64
	CUs float64
	CIc float64
	CIs float64
	Dn float64
	M0 float64
	Ecc float64
	Sqrta float64
	Omega0 float64
	Omegadot float64
	W float64
	Inc float64
	IncDot float64
	Af0 float64
	Af1 float64
	Af2 float64
	ToeTow float64
	ToeWn uint16
	TocTow float64
	TocWn uint16
	Valid uint8
	Healthy uint8
	Sid *Gnss_GnssSignalDep
	Iode uint8
	Iodc uint16
	Reserved uint32
	_io *kaitai.Stream
	_root *Observation
	_parent *Sbp_Message
}
func NewObservation_MsgEphemerisDepD() *Observation_MsgEphemerisDepD {
	return &Observation_MsgEphemerisDepD{
	}
}

func (this *Observation_MsgEphemerisDepD) Read(io *kaitai.Stream, parent *Sbp_Message, root *Observation) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp388, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Tgd = float64(tmp388)
	tmp389, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.CRs = float64(tmp389)
	tmp390, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.CRc = float64(tmp390)
	tmp391, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.CUc = float64(tmp391)
	tmp392, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.CUs = float64(tmp392)
	tmp393, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.CIc = float64(tmp393)
	tmp394, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.CIs = float64(tmp394)
	tmp395, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Dn = float64(tmp395)
	tmp396, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.M0 = float64(tmp396)
	tmp397, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Ecc = float64(tmp397)
	tmp398, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Sqrta = float64(tmp398)
	tmp399, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Omega0 = float64(tmp399)
	tmp400, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Omegadot = float64(tmp400)
	tmp401, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.W = float64(tmp401)
	tmp402, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Inc = float64(tmp402)
	tmp403, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.IncDot = float64(tmp403)
	tmp404, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Af0 = float64(tmp404)
	tmp405, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Af1 = float64(tmp405)
	tmp406, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Af2 = float64(tmp406)
	tmp407, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.ToeTow = float64(tmp407)
	tmp408, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.ToeWn = uint16(tmp408)
	tmp409, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.TocTow = float64(tmp409)
	tmp410, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.TocWn = uint16(tmp410)
	tmp411, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Valid = tmp411
	tmp412, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Healthy = tmp412
	tmp413 := NewGnss_GnssSignalDep()
	err = tmp413.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.Sid = tmp413
	tmp414, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Iode = tmp414
	tmp415, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.Iodc = uint16(tmp415)
	tmp416, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.Reserved = uint32(tmp416)
	return err
}

/**
 * Group delay differential between L1 and L2
 */

/**
 * Amplitude of the sine harmonic correction term to the orbit radius
 */

/**
 * Amplitude of the cosine harmonic correction term to the orbit radius
 */

/**
 * Amplitude of the cosine harmonic correction term to the argument of
 * latitude
 */

/**
 * Amplitude of the sine harmonic correction term to the argument of
 * latitude
 */

/**
 * Amplitude of the cosine harmonic correction term to the angle of
 * inclination
 */

/**
 * Amplitude of the sine harmonic correction term to the angle of
 * inclination
 */

/**
 * Mean motion difference
 */

/**
 * Mean anomaly at reference time
 */

/**
 * Eccentricity of satellite orbit
 */

/**
 * Square root of the semi-major axis of orbit
 */

/**
 * Longitude of ascending node of orbit plane at weekly epoch
 */

/**
 * Rate of right ascension
 */

/**
 * Argument of perigee
 */

/**
 * Inclination
 */

/**
 * Inclination first derivative
 */

/**
 * Polynomial clock correction coefficient (clock bias)
 */

/**
 * Polynomial clock correction coefficient (clock drift)
 */

/**
 * Polynomial clock correction coefficient (rate of clock drift)
 */

/**
 * Time of week
 */

/**
 * Week number
 */

/**
 * Clock reference time of week
 */

/**
 * Clock reference week number
 */

/**
 * Is valid?
 */

/**
 * Satellite is healthy?
 */

/**
 * GNSS signal identifier
 */

/**
 * Issue of ephemeris data
 */

/**
 * Issue of clock data
 */

/**
 * Reserved field
 */

/**
 * The ephemeris message returns a set of satellite orbit parameters that
 * is used to calculate GPS satellite position, velocity, and clock offset.
 * Please see the Navstar GPS Space Segment/Navigation user interfaces
 * (ICD-GPS-200, Table 20-III) for more details.
 */
type Observation_MsgEphemerisGps struct {
	Common *Observation_EphemerisCommonContent
	Tgd float32
	CRs float32
	CRc float32
	CUc float32
	CUs float32
	CIc float32
	CIs float32
	Dn float64
	M0 float64
	Ecc float64
	Sqrta float64
	Omega0 float64
	Omegadot float64
	W float64
	Inc float64
	IncDot float64
	Af0 float32
	Af1 float32
	Af2 float32
	Toc *Gnss_GpsTimeSec
	Iode uint8
	Iodc uint16
	_io *kaitai.Stream
	_root *Observation
	_parent *Sbp_Message
}
func NewObservation_MsgEphemerisGps() *Observation_MsgEphemerisGps {
	return &Observation_MsgEphemerisGps{
	}
}

func (this *Observation_MsgEphemerisGps) Read(io *kaitai.Stream, parent *Sbp_Message, root *Observation) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp417 := NewObservation_EphemerisCommonContent()
	err = tmp417.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.Common = tmp417
	tmp418, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.Tgd = float32(tmp418)
	tmp419, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.CRs = float32(tmp419)
	tmp420, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.CRc = float32(tmp420)
	tmp421, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.CUc = float32(tmp421)
	tmp422, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.CUs = float32(tmp422)
	tmp423, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.CIc = float32(tmp423)
	tmp424, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.CIs = float32(tmp424)
	tmp425, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Dn = float64(tmp425)
	tmp426, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.M0 = float64(tmp426)
	tmp427, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Ecc = float64(tmp427)
	tmp428, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Sqrta = float64(tmp428)
	tmp429, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Omega0 = float64(tmp429)
	tmp430, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Omegadot = float64(tmp430)
	tmp431, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.W = float64(tmp431)
	tmp432, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Inc = float64(tmp432)
	tmp433, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.IncDot = float64(tmp433)
	tmp434, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.Af0 = float32(tmp434)
	tmp435, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.Af1 = float32(tmp435)
	tmp436, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.Af2 = float32(tmp436)
	tmp437 := NewGnss_GpsTimeSec()
	err = tmp437.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.Toc = tmp437
	tmp438, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Iode = tmp438
	tmp439, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.Iodc = uint16(tmp439)
	return err
}

/**
 * Values common for all ephemeris types
 */

/**
 * Group delay differential between L1 and L2
 */

/**
 * Amplitude of the sine harmonic correction term to the orbit radius
 */

/**
 * Amplitude of the cosine harmonic correction term to the orbit radius
 */

/**
 * Amplitude of the cosine harmonic correction term to the argument of
 * latitude
 */

/**
 * Amplitude of the sine harmonic correction term to the argument of
 * latitude
 */

/**
 * Amplitude of the cosine harmonic correction term to the angle of
 * inclination
 */

/**
 * Amplitude of the sine harmonic correction term to the angle of
 * inclination
 */

/**
 * Mean motion difference
 */

/**
 * Mean anomaly at reference time
 */

/**
 * Eccentricity of satellite orbit
 */

/**
 * Square root of the semi-major axis of orbit
 */

/**
 * Longitude of ascending node of orbit plane at weekly epoch
 */

/**
 * Rate of right ascension
 */

/**
 * Argument of perigee
 */

/**
 * Inclination
 */

/**
 * Inclination first derivative
 */

/**
 * Polynomial clock correction coefficient (clock bias)
 */

/**
 * Polynomial clock correction coefficient (clock drift)
 */

/**
 * Polynomial clock correction coefficient (rate of clock drift)
 */

/**
 * Clock reference
 */

/**
 * Issue of ephemeris data
 */

/**
 * Issue of clock data
 */

/**
 * The base station position message is the position reported by the base
 * station itself. It is used for pseudo-absolute RTK positioning, and is
 * required to be a high-accuracy surveyed location of the base station.
 * Any error here will result in an error in the pseudo-absolute position
 * output.
 */
type Observation_MsgBasePosLlh struct {
	Lat float64
	Lon float64
	Height float64
	_io *kaitai.Stream
	_root *Observation
	_parent *Sbp_Message
}
func NewObservation_MsgBasePosLlh() *Observation_MsgBasePosLlh {
	return &Observation_MsgBasePosLlh{
	}
}

func (this *Observation_MsgBasePosLlh) Read(io *kaitai.Stream, parent *Sbp_Message, root *Observation) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp440, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Lat = float64(tmp440)
	tmp441, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Lon = float64(tmp441)
	tmp442, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Height = float64(tmp442)
	return err
}

/**
 * Latitude
 */

/**
 * Longitude
 */

/**
 * Height
 */
type Observation_AlmanacCommonContent struct {
	Sid *Gnss_GnssSignal
	Toa *Gnss_GpsTimeSec
	Ura float64
	FitInterval uint32
	Valid uint8
	HealthBits uint8
	_io *kaitai.Stream
	_root *Observation
	_parent interface{}
}
func NewObservation_AlmanacCommonContent() *Observation_AlmanacCommonContent {
	return &Observation_AlmanacCommonContent{
	}
}

func (this *Observation_AlmanacCommonContent) Read(io *kaitai.Stream, parent interface{}, root *Observation) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp443 := NewGnss_GnssSignal()
	err = tmp443.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.Sid = tmp443
	tmp444 := NewGnss_GpsTimeSec()
	err = tmp444.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.Toa = tmp444
	tmp445, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Ura = float64(tmp445)
	tmp446, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.FitInterval = uint32(tmp446)
	tmp447, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Valid = tmp447
	tmp448, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.HealthBits = tmp448
	return err
}

/**
 * GNSS signal identifier
 */

/**
 * Reference time of almanac
 */

/**
 * User Range Accuracy
 */

/**
 * Curve fit interval
 */

/**
 * Status of almanac, 1 = valid, 0 = invalid
 */

/**
 * Satellite health status for GPS:
 *   - bits 5-7: NAV data health status. See IS-GPS-200H
 *     Table 20-VII: NAV Data Health Indications.
 *   - bits 0-4: Signal health status. See IS-GPS-200H
 *     Table 20-VIII. Codes for Health of SV Signal
 *     Components.
 * Satellite health status for GLO (see GLO ICD 5.1 table 5.1 for
 * details):
 *   - bit 0: C(n), "unhealthy" flag that is transmitted within
 *     non-immediate data and indicates overall constellation status
 *     at the moment of almanac uploading.
 *     '0' indicates malfunction of n-satellite.
 *     '1' indicates that n-satellite is operational.
 *   - bit 1: Bn(ln), '0' indicates the satellite is operational
 *     and suitable for navigation.
 */

/**
 * The OSR message contains network corrections in an observation-like
 * format.
 */
type Observation_MsgOsr struct {
	Header *Observation_ObservationHeader
	Obs []*Observation_PackedOsrContent
	_io *kaitai.Stream
	_root *Observation
	_parent *Sbp_Message
}
func NewObservation_MsgOsr() *Observation_MsgOsr {
	return &Observation_MsgOsr{
	}
}

func (this *Observation_MsgOsr) Read(io *kaitai.Stream, parent *Sbp_Message, root *Observation) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp449 := NewObservation_ObservationHeader()
	err = tmp449.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.Header = tmp449
	for i := 1;; i++ {
		tmp450, err := this._io.EOF()
		if err != nil {
			return err
		}
		if tmp450 {
			break
		}
		tmp451 := NewObservation_PackedOsrContent()
		err = tmp451.Read(this._io, this, this._root)
		if err != nil {
			return err
		}
		this.Obs = append(this.Obs, tmp451)
	}
	return err
}

/**
 * Header of a GPS observation message
 */

/**
 * Network correction for a satellite signal.
 */

/**
 * The ephemeris message returns a set of satellite orbit parameters that
 * is used to calculate GLO satellite position, velocity, and clock offset.
 * Please see the GLO ICD 5.1 "Table 4.5 Characteristics of words of
 * immediate information (ephemeris parameters)" for more details.
 */
type Observation_MsgEphemerisGloDepC struct {
	Common *Observation_EphemerisCommonContentDepB
	Gamma float64
	Tau float64
	DTau float64
	Pos []float64
	Vel []float64
	Acc []float64
	Fcn uint8
	_io *kaitai.Stream
	_root *Observation
	_parent *Sbp_Message
}
func NewObservation_MsgEphemerisGloDepC() *Observation_MsgEphemerisGloDepC {
	return &Observation_MsgEphemerisGloDepC{
	}
}

func (this *Observation_MsgEphemerisGloDepC) Read(io *kaitai.Stream, parent *Sbp_Message, root *Observation) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp452 := NewObservation_EphemerisCommonContentDepB()
	err = tmp452.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.Common = tmp452
	tmp453, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Gamma = float64(tmp453)
	tmp454, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Tau = float64(tmp454)
	tmp455, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.DTau = float64(tmp455)
	for i := 0; i < int(3); i++ {
		_ = i
		tmp456, err := this._io.ReadF8le()
		if err != nil {
			return err
		}
		this.Pos = append(this.Pos, tmp456)
	}
	for i := 0; i < int(3); i++ {
		_ = i
		tmp457, err := this._io.ReadF8le()
		if err != nil {
			return err
		}
		this.Vel = append(this.Vel, tmp457)
	}
	for i := 0; i < int(3); i++ {
		_ = i
		tmp458, err := this._io.ReadF8le()
		if err != nil {
			return err
		}
		this.Acc = append(this.Acc, tmp458)
	}
	tmp459, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Fcn = tmp459
	return err
}

/**
 * Values common for all ephemeris types
 */

/**
 * Relative deviation of predicted carrier frequency from nominal
 */

/**
 * Correction to the SV time
 */

/**
 * Equipment delay between L1 and L2
 */

/**
 * Position of the SV at tb in PZ-90.02 coordinates system
 */

/**
 * Velocity vector of the SV at tb in PZ-90.02 coordinates system
 */

/**
 * Acceleration vector of the SV at tb in PZ-90.02 coordinates sys
 */

/**
 * Frequency slot. FCN+8 (that is [1..14]). 0 or 0xFF for invalid
 */

/**
 * Deprecated.
 */
type Observation_MsgEphemerisGloDepB struct {
	Common *Observation_EphemerisCommonContentDepB
	Gamma float64
	Tau float64
	Pos []float64
	Vel []float64
	Acc []float64
	_io *kaitai.Stream
	_root *Observation
	_parent *Sbp_Message
}
func NewObservation_MsgEphemerisGloDepB() *Observation_MsgEphemerisGloDepB {
	return &Observation_MsgEphemerisGloDepB{
	}
}

func (this *Observation_MsgEphemerisGloDepB) Read(io *kaitai.Stream, parent *Sbp_Message, root *Observation) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp460 := NewObservation_EphemerisCommonContentDepB()
	err = tmp460.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.Common = tmp460
	tmp461, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Gamma = float64(tmp461)
	tmp462, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Tau = float64(tmp462)
	for i := 0; i < int(3); i++ {
		_ = i
		tmp463, err := this._io.ReadF8le()
		if err != nil {
			return err
		}
		this.Pos = append(this.Pos, tmp463)
	}
	for i := 0; i < int(3); i++ {
		_ = i
		tmp464, err := this._io.ReadF8le()
		if err != nil {
			return err
		}
		this.Vel = append(this.Vel, tmp464)
	}
	for i := 0; i < int(3); i++ {
		_ = i
		tmp465, err := this._io.ReadF8le()
		if err != nil {
			return err
		}
		this.Acc = append(this.Acc, tmp465)
	}
	return err
}

/**
 * Values common for all ephemeris types
 */

/**
 * Relative deviation of predicted carrier frequency from nominal
 */

/**
 * Correction to the SV time
 */

/**
 * Position of the SV at tb in PZ-90.02 coordinates system
 */

/**
 * Velocity vector of the SV at tb in PZ-90.02 coordinates system
 */

/**
 * Acceleration vector of the SV at tb in PZ-90.02 coordinates sys
 */

/**
 * Deprecated.
 */
type Observation_MsgSvConfigurationGpsDep struct {
	TNmct *Gnss_GpsTimeSec
	L2cMask uint32
	_io *kaitai.Stream
	_root *Observation
	_parent *Sbp_Message
}
func NewObservation_MsgSvConfigurationGpsDep() *Observation_MsgSvConfigurationGpsDep {
	return &Observation_MsgSvConfigurationGpsDep{
	}
}

func (this *Observation_MsgSvConfigurationGpsDep) Read(io *kaitai.Stream, parent *Sbp_Message, root *Observation) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp466 := NewGnss_GpsTimeSec()
	err = tmp466.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.TNmct = tmp466
	tmp467, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.L2cMask = uint32(tmp467)
	return err
}

/**
 * Navigation Message Correction Table Validity Time
 */

/**
 * L2C capability mask, SV32 bit being MSB, SV1 bit being LSB
 */
type Observation_MsgEphemerisSbas struct {
	Common *Observation_EphemerisCommonContent
	Pos []float64
	Vel []float32
	Acc []float32
	AGf0 float32
	AGf1 float32
	_io *kaitai.Stream
	_root *Observation
	_parent *Sbp_Message
}
func NewObservation_MsgEphemerisSbas() *Observation_MsgEphemerisSbas {
	return &Observation_MsgEphemerisSbas{
	}
}

func (this *Observation_MsgEphemerisSbas) Read(io *kaitai.Stream, parent *Sbp_Message, root *Observation) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp468 := NewObservation_EphemerisCommonContent()
	err = tmp468.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.Common = tmp468
	for i := 0; i < int(3); i++ {
		_ = i
		tmp469, err := this._io.ReadF8le()
		if err != nil {
			return err
		}
		this.Pos = append(this.Pos, tmp469)
	}
	for i := 0; i < int(3); i++ {
		_ = i
		tmp470, err := this._io.ReadF4le()
		if err != nil {
			return err
		}
		this.Vel = append(this.Vel, tmp470)
	}
	for i := 0; i < int(3); i++ {
		_ = i
		tmp471, err := this._io.ReadF4le()
		if err != nil {
			return err
		}
		this.Acc = append(this.Acc, tmp471)
	}
	tmp472, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.AGf0 = float32(tmp472)
	tmp473, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.AGf1 = float32(tmp473)
	return err
}

/**
 * Values common for all ephemeris types
 */

/**
 * Position of the GEO at time toe
 */

/**
 * Velocity of the GEO at time toe
 */

/**
 * Acceleration of the GEO at time toe
 */

/**
 * Time offset of the GEO clock w.r.t. SBAS Network Time
 */

/**
 * Drift of the GEO clock w.r.t. SBAS Network Time
 */

/**
 * Pseudorange and carrier phase observation for a satellite being tracked.
 * Pseudoranges are referenced to a nominal pseudorange.
 */
type Observation_PackedObsContentDepB struct {
	P uint32
	L *Observation_CarrierPhaseDepA
	Cn0 uint8
	Lock uint16
	Sid *Gnss_GnssSignalDep
	_io *kaitai.Stream
	_root *Observation
	_parent *Observation_MsgObsDepB
}
func NewObservation_PackedObsContentDepB() *Observation_PackedObsContentDepB {
	return &Observation_PackedObsContentDepB{
	}
}

func (this *Observation_PackedObsContentDepB) Read(io *kaitai.Stream, parent *Observation_MsgObsDepB, root *Observation) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp474, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.P = uint32(tmp474)
	tmp475 := NewObservation_CarrierPhaseDepA()
	err = tmp475.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.L = tmp475
	tmp476, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Cn0 = tmp476
	tmp477, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.Lock = uint16(tmp477)
	tmp478 := NewGnss_GnssSignalDep()
	err = tmp478.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.Sid = tmp478
	return err
}

/**
 * Pseudorange observation
 */

/**
 * Carrier phase observation with opposite sign from typical
 * convention.
 */

/**
 * Carrier-to-Noise density
 */

/**
 * Lock indicator. This value changes whenever a satellite signal has
 * lost and regained lock, indicating that the carrier phase ambiguity
 * may have changed.
 */

/**
 * GNSS signal identifier
 */

/**
 * Deprecated.
 */
type Observation_MsgObsDepC struct {
	Header *Observation_ObservationHeaderDep
	Obs []*Observation_PackedObsContentDepC
	_io *kaitai.Stream
	_root *Observation
	_parent *Sbp_Message
}
func NewObservation_MsgObsDepC() *Observation_MsgObsDepC {
	return &Observation_MsgObsDepC{
	}
}

func (this *Observation_MsgObsDepC) Read(io *kaitai.Stream, parent *Sbp_Message, root *Observation) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp479 := NewObservation_ObservationHeaderDep()
	err = tmp479.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.Header = tmp479
	for i := 1;; i++ {
		tmp480, err := this._io.EOF()
		if err != nil {
			return err
		}
		if tmp480 {
			break
		}
		tmp481 := NewObservation_PackedObsContentDepC()
		err = tmp481.Read(this._io, this, this._root)
		if err != nil {
			return err
		}
		this.Obs = append(this.Obs, tmp481)
	}
	return err
}

/**
 * Header of a GPS observation message
 */

/**
 * Pseudorange and carrier phase observation for a satellite being
 * tracked.
 */

/**
 * Deprecated.
 */
type Observation_MsgEphemerisDepA struct {
	Tgd float64
	CRs float64
	CRc float64
	CUc float64
	CUs float64
	CIc float64
	CIs float64
	Dn float64
	M0 float64
	Ecc float64
	Sqrta float64
	Omega0 float64
	Omegadot float64
	W float64
	Inc float64
	IncDot float64
	Af0 float64
	Af1 float64
	Af2 float64
	ToeTow float64
	ToeWn uint16
	TocTow float64
	TocWn uint16
	Valid uint8
	Healthy uint8
	Prn uint8
	_io *kaitai.Stream
	_root *Observation
	_parent *Sbp_Message
}
func NewObservation_MsgEphemerisDepA() *Observation_MsgEphemerisDepA {
	return &Observation_MsgEphemerisDepA{
	}
}

func (this *Observation_MsgEphemerisDepA) Read(io *kaitai.Stream, parent *Sbp_Message, root *Observation) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp482, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Tgd = float64(tmp482)
	tmp483, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.CRs = float64(tmp483)
	tmp484, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.CRc = float64(tmp484)
	tmp485, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.CUc = float64(tmp485)
	tmp486, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.CUs = float64(tmp486)
	tmp487, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.CIc = float64(tmp487)
	tmp488, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.CIs = float64(tmp488)
	tmp489, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Dn = float64(tmp489)
	tmp490, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.M0 = float64(tmp490)
	tmp491, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Ecc = float64(tmp491)
	tmp492, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Sqrta = float64(tmp492)
	tmp493, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Omega0 = float64(tmp493)
	tmp494, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Omegadot = float64(tmp494)
	tmp495, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.W = float64(tmp495)
	tmp496, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Inc = float64(tmp496)
	tmp497, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.IncDot = float64(tmp497)
	tmp498, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Af0 = float64(tmp498)
	tmp499, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Af1 = float64(tmp499)
	tmp500, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Af2 = float64(tmp500)
	tmp501, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.ToeTow = float64(tmp501)
	tmp502, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.ToeWn = uint16(tmp502)
	tmp503, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.TocTow = float64(tmp503)
	tmp504, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.TocWn = uint16(tmp504)
	tmp505, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Valid = tmp505
	tmp506, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Healthy = tmp506
	tmp507, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Prn = tmp507
	return err
}

/**
 * Group delay differential between L1 and L2
 */

/**
 * Amplitude of the sine harmonic correction term to the orbit radius
 */

/**
 * Amplitude of the cosine harmonic correction term to the orbit radius
 */

/**
 * Amplitude of the cosine harmonic correction term to the argument of
 * latitude
 */

/**
 * Amplitude of the sine harmonic correction term to the argument of
 * latitude
 */

/**
 * Amplitude of the cosine harmonic correction term to the angle of
 * inclination
 */

/**
 * Amplitude of the sine harmonic correction term to the angle of
 * inclination
 */

/**
 * Mean motion difference
 */

/**
 * Mean anomaly at reference time
 */

/**
 * Eccentricity of satellite orbit
 */

/**
 * Square root of the semi-major axis of orbit
 */

/**
 * Longitude of ascending node of orbit plane at weekly epoch
 */

/**
 * Rate of right ascension
 */

/**
 * Argument of perigee
 */

/**
 * Inclination
 */

/**
 * Inclination first derivative
 */

/**
 * Polynomial clock correction coefficient (clock bias)
 */

/**
 * Polynomial clock correction coefficient (clock drift)
 */

/**
 * Polynomial clock correction coefficient (rate of clock drift)
 */

/**
 * Time of week
 */

/**
 * Week number
 */

/**
 * Clock reference time of week
 */

/**
 * Clock reference week number
 */

/**
 * Is valid?
 */

/**
 * Satellite is healthy?
 */

/**
 * PRN being tracked
 */
type Observation_EphemerisCommonContentDepB struct {
	Sid *Gnss_GnssSignal
	Toe *Gnss_GpsTimeSec
	Ura float64
	FitInterval uint32
	Valid uint8
	HealthBits uint8
	_io *kaitai.Stream
	_root *Observation
	_parent interface{}
}
func NewObservation_EphemerisCommonContentDepB() *Observation_EphemerisCommonContentDepB {
	return &Observation_EphemerisCommonContentDepB{
	}
}

func (this *Observation_EphemerisCommonContentDepB) Read(io *kaitai.Stream, parent interface{}, root *Observation) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp508 := NewGnss_GnssSignal()
	err = tmp508.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.Sid = tmp508
	tmp509 := NewGnss_GpsTimeSec()
	err = tmp509.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.Toe = tmp509
	tmp510, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Ura = float64(tmp510)
	tmp511, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.FitInterval = uint32(tmp511)
	tmp512, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Valid = tmp512
	tmp513, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.HealthBits = tmp513
	return err
}

/**
 * GNSS signal identifier (16 bit)
 */

/**
 * Time of Ephemerides
 */

/**
 * User Range Accuracy
 */

/**
 * Curve fit interval
 */

/**
 * Status of ephemeris, 1 = valid, 0 = invalid
 */

/**
 * Satellite health status.
 * GPS: ICD-GPS-200, chapter 20.3.3.3.1.4
 * Others: 0 = valid, non-zero = invalid
 */
