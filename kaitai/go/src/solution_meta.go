// Code generated by kaitai-struct-compiler from a .ksy source file. DO NOT EDIT.

import "github.com/kaitai-io/kaitai_struct_go_runtime/kaitai"

type SolutionMeta struct {
	_io *kaitai.Stream
	_root *SolutionMeta
	_parent interface{}
}
func NewSolutionMeta() *SolutionMeta {
	return &SolutionMeta{
	}
}

func (this *SolutionMeta) Read(io *kaitai.Stream, parent interface{}, root *SolutionMeta) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	return err
}

/**
 * Metadata around the GNSS sensors involved in the fuzed solution.
 * Accessible through sol_in[N].flags in a MSG_SOLN_META.
 */
type SolutionMeta_GnssInputType struct {
	Flags uint8
	_io *kaitai.Stream
	_root *SolutionMeta
	_parent interface{}
}
func NewSolutionMeta_GnssInputType() *SolutionMeta_GnssInputType {
	return &SolutionMeta_GnssInputType{
	}
}

func (this *SolutionMeta_GnssInputType) Read(io *kaitai.Stream, parent interface{}, root *SolutionMeta) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp1, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Flags = tmp1
	return err
}

/**
 * flags that store all relevant info specific to this sensor type.
 */

/**
 * This message contains all metadata about the sensors received and/or
 * used in computing the sensorfusion solution. It focuses primarily, but
 * not only, on GNSS metadata. Regarding the age of the last received valid
 * GNSS solution, the highest two bits are time status, indicating whether
 * age gnss can or can not be used to retrieve time of measurement (noted
 * TOM, also known as time of validity) If it can, subtract 'age gnss' from
 * 'tow' in navigation messages to get TOM. Can be used before alignment is
 * complete in the Fusion Engine, when output solution is the last received
 * valid GNSS solution and its tow is not a TOM.
 */
type SolutionMeta_MsgSolnMeta struct {
	Tow uint32
	Pdop uint16
	Hdop uint16
	Vdop uint16
	AgeCorrections uint16
	AgeGnss uint32
	SolIn []*SolutionMeta_SolutionInputType
	_io *kaitai.Stream
	_root *SolutionMeta
	_parent *Sbp_Message
}
func NewSolutionMeta_MsgSolnMeta() *SolutionMeta_MsgSolnMeta {
	return &SolutionMeta_MsgSolnMeta{
	}
}

func (this *SolutionMeta_MsgSolnMeta) Read(io *kaitai.Stream, parent *Sbp_Message, root *SolutionMeta) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp2, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.Tow = uint32(tmp2)
	tmp3, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.Pdop = uint16(tmp3)
	tmp4, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.Hdop = uint16(tmp4)
	tmp5, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.Vdop = uint16(tmp5)
	tmp6, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.AgeCorrections = uint16(tmp6)
	tmp7, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.AgeGnss = uint32(tmp7)
	for i := 1;; i++ {
		tmp8, err := this._io.EOF()
		if err != nil {
			return err
		}
		if tmp8 {
			break
		}
		tmp9 := NewSolutionMeta_SolutionInputType()
		err = tmp9.Read(this._io, this, this._root)
		if err != nil {
			return err
		}
		this.SolIn = append(this.SolIn, tmp9)
	}
	return err
}

/**
 * GPS time of week rounded to the nearest millisecond
 */

/**
 * Position Dilution of Precision as per last available DOPS from PVT
 * engine (0xFFFF indicates invalid)
 */

/**
 * Horizontal Dilution of Precision as per last available DOPS from PVT
 * engine (0xFFFF indicates invalid)
 */

/**
 * Vertical Dilution of Precision as per last available DOPS from PVT
 * engine (0xFFFF indicates invalid)
 */

/**
 * Age of corrections as per last available AGE_CORRECTIONS from PVT
 * engine (0xFFFF indicates invalid)
 */

/**
 * Age and Time Status of the last received valid GNSS solution.
 */

/**
 * Array of Metadata describing the sensors potentially involved in the
 * solution. Each element in the array represents a single sensor type
 * and consists of flags containing (meta)data pertaining to that
 * specific single sensor. Refer to each (XX)InputType descriptor in
 * the present doc.
 */

/**
 * Deprecated.
 * 
 * This message contains all metadata about the sensors received and/or
 * used in computing the Fuzed Solution. It focuses primarily, but not
 * only, on GNSS metadata.
 */
type SolutionMeta_MsgSolnMetaDepA struct {
	Pdop uint16
	Hdop uint16
	Vdop uint16
	NSats uint8
	AgeCorrections uint16
	AlignmentStatus uint8
	LastUsedGnssPosTow uint32
	LastUsedGnssVelTow uint32
	SolIn []*SolutionMeta_SolutionInputType
	_io *kaitai.Stream
	_root *SolutionMeta
	_parent *Sbp_Message
}
func NewSolutionMeta_MsgSolnMetaDepA() *SolutionMeta_MsgSolnMetaDepA {
	return &SolutionMeta_MsgSolnMetaDepA{
	}
}

func (this *SolutionMeta_MsgSolnMetaDepA) Read(io *kaitai.Stream, parent *Sbp_Message, root *SolutionMeta) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp10, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.Pdop = uint16(tmp10)
	tmp11, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.Hdop = uint16(tmp11)
	tmp12, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.Vdop = uint16(tmp12)
	tmp13, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.NSats = tmp13
	tmp14, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.AgeCorrections = uint16(tmp14)
	tmp15, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.AlignmentStatus = tmp15
	tmp16, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.LastUsedGnssPosTow = uint32(tmp16)
	tmp17, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.LastUsedGnssVelTow = uint32(tmp17)
	for i := 1;; i++ {
		tmp18, err := this._io.EOF()
		if err != nil {
			return err
		}
		if tmp18 {
			break
		}
		tmp19 := NewSolutionMeta_SolutionInputType()
		err = tmp19.Read(this._io, this, this._root)
		if err != nil {
			return err
		}
		this.SolIn = append(this.SolIn, tmp19)
	}
	return err
}

/**
 * Position Dilution of Precision as per last available DOPS from PVT
 * engine (0xFFFF indicates invalid)
 */

/**
 * Horizontal Dilution of Precision as per last available DOPS from PVT
 * engine (0xFFFF indicates invalid)
 */

/**
 * Vertical Dilution of Precision as per last available DOPS from PVT
 * engine (0xFFFF indicates invalid)
 */

/**
 * Number of satellites as per last available solution from PVT engine
 */

/**
 * Age of corrections as per last available AGE_CORRECTIONS from PVT
 * engine (0xFFFF indicates invalid)
 */

/**
 * State of alignment and the status and receipt of the alignment
 * inputs
 */

/**
 * Tow of last-used GNSS position measurement
 */

/**
 * Tow of last-used GNSS velocity measurement
 */

/**
 * Array of Metadata describing the sensors potentially involved in the
 * solution. Each element in the array represents a single sensor type
 * and consists of flags containing (meta)data pertaining to that
 * specific single sensor. Refer to each (XX)InputType descriptor in
 * the present doc.
 */

/**
 * Metadata around the IMU sensors involved in the fuzed solution.
 * Accessible through sol_in[N].flags in a MSG_SOLN_META.
 */
type SolutionMeta_ImuInputType struct {
	Flags uint8
	_io *kaitai.Stream
	_root *SolutionMeta
	_parent interface{}
}
func NewSolutionMeta_ImuInputType() *SolutionMeta_ImuInputType {
	return &SolutionMeta_ImuInputType{
	}
}

func (this *SolutionMeta_ImuInputType) Read(io *kaitai.Stream, parent interface{}, root *SolutionMeta) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp20, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Flags = tmp20
	return err
}

/**
 * Instrument time, grade, and architecture for a sensor.
 */

/**
 * Metadata around the Odometry sensors involved in the fuzed solution.
 * Accessible through sol_in[N].flags in a MSG_SOLN_META.
 */
type SolutionMeta_OdoInputType struct {
	Flags uint8
	_io *kaitai.Stream
	_root *SolutionMeta
	_parent interface{}
}
func NewSolutionMeta_OdoInputType() *SolutionMeta_OdoInputType {
	return &SolutionMeta_OdoInputType{
	}
}

func (this *SolutionMeta_OdoInputType) Read(io *kaitai.Stream, parent interface{}, root *SolutionMeta) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp21, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Flags = tmp21
	return err
}

/**
 * Instrument ODO rate, grade, and quality.
 */

/**
 * Metadata describing which sensors were involved in the solution. The
 * structure is fixed no matter what the actual sensor type is. The
 * sensor_type field tells you which sensor we are talking about. It also
 * tells you whether the sensor data was actually used or not. The flags
 * field, always a u8, contains the sensor-specific data. The content of
 * flags, for each sensor type, is described in the relevant structures in
 * this section.
 */
type SolutionMeta_SolutionInputType struct {
	SensorType uint8
	Flags uint8
	_io *kaitai.Stream
	_root *SolutionMeta
	_parent interface{}
}
func NewSolutionMeta_SolutionInputType() *SolutionMeta_SolutionInputType {
	return &SolutionMeta_SolutionInputType{
	}
}

func (this *SolutionMeta_SolutionInputType) Read(io *kaitai.Stream, parent interface{}, root *SolutionMeta) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp22, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.SensorType = tmp22
	tmp23, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Flags = tmp23
	return err
}

/**
 * The type of sensor
 */

/**
 * Refer to each InputType description
 */
