// Code generated by kaitai-struct-compiler from a .ksy source file. DO NOT EDIT.

import "github.com/kaitai-io/kaitai_struct_go_runtime/kaitai"

type Navigation struct {
	_io *kaitai.Stream
	_root *Navigation
	_parent interface{}
}
func NewNavigation() *Navigation {
	return &Navigation{
	}
}

func (this *Navigation) Read(io *kaitai.Stream, parent interface{}, root *Navigation) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	return err
}

/**
 * This position solution message reports the absolute geodetic coordinates
 * and the status (single point vs pseudo-absolute RTK) of the position
 * solution. If the rover receiver knows the surveyed position of the base
 * station and has an RTK solution, this reports a pseudo-absolute position
 * solution using the base station position and the rover's RTK baseline
 * vector. The full GPS time is given by the preceding MSG_GPS_TIME with
 * the matching time-of-week (tow).
 */
type Navigation_MsgPosLlhDepA struct {
	Tow uint32
	Lat float64
	Lon float64
	Height float64
	HAccuracy uint16
	VAccuracy uint16
	NSats uint8
	Flags uint8
	_io *kaitai.Stream
	_root *Navigation
	_parent *Sbp_Message
}
func NewNavigation_MsgPosLlhDepA() *Navigation_MsgPosLlhDepA {
	return &Navigation_MsgPosLlhDepA{
	}
}

func (this *Navigation_MsgPosLlhDepA) Read(io *kaitai.Stream, parent *Sbp_Message, root *Navigation) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp1, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.Tow = uint32(tmp1)
	tmp2, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Lat = float64(tmp2)
	tmp3, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Lon = float64(tmp3)
	tmp4, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Height = float64(tmp4)
	tmp5, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.HAccuracy = uint16(tmp5)
	tmp6, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.VAccuracy = uint16(tmp6)
	tmp7, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.NSats = tmp7
	tmp8, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Flags = tmp8
	return err
}

/**
 * GPS Time of Week
 */

/**
 * Latitude
 */

/**
 * Longitude
 */

/**
 * Height
 */

/**
 * Horizontal position accuracy estimate (not implemented). Defaults to
 * 0.
 */

/**
 * Vertical position accuracy estimate (not implemented). Defaults to
 * 0.
 */

/**
 * Number of satellites used in solution.
 */

/**
 * Status flags
 */

/**
 * This message reports the local vertical and horizontal protection levels
 * associated with a given LLH position solution. The full GPS time is
 * given by the preceding MSG_GPS_TIME with the matching time-of-week
 * (tow).
 */
type Navigation_MsgProtectionLevelDepA struct {
	Tow uint32
	Vpl uint16
	Hpl uint16
	Lat float64
	Lon float64
	Height float64
	Flags uint8
	_io *kaitai.Stream
	_root *Navigation
	_parent *Sbp_Message
}
func NewNavigation_MsgProtectionLevelDepA() *Navigation_MsgProtectionLevelDepA {
	return &Navigation_MsgProtectionLevelDepA{
	}
}

func (this *Navigation_MsgProtectionLevelDepA) Read(io *kaitai.Stream, parent *Sbp_Message, root *Navigation) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp9, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.Tow = uint32(tmp9)
	tmp10, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.Vpl = uint16(tmp10)
	tmp11, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.Hpl = uint16(tmp11)
	tmp12, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Lat = float64(tmp12)
	tmp13, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Lon = float64(tmp13)
	tmp14, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Height = float64(tmp14)
	tmp15, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Flags = tmp15
	return err
}

/**
 * GPS Time of Week
 */

/**
 * Vertical protection level
 */

/**
 * Horizontal protection level
 */

/**
 * Latitude
 */

/**
 * Longitude
 */

/**
 * Height
 */

/**
 * Status flags
 */

/**
 * This position solution message reports the absolute geodetic coordinates
 * and the status (single point vs pseudo-absolute RTK) of the position
 * solution as well as the upper triangle of the 3x3 covariance matrix.
 * The position information and Fix Mode flags follow the MSG_POS_LLH
 * message.  Since the covariance matrix is computed in the local-level
 * North, East, Down frame, the covariance terms follow that convention.
 * Thus, covariances are reported against the "downward" measurement and
 * care should be taken with the sign convention.
 */
type Navigation_MsgPosLlhCov struct {
	Tow uint32
	Lat float64
	Lon float64
	Height float64
	CovNN float32
	CovNE float32
	CovND float32
	CovEE float32
	CovED float32
	CovDD float32
	NSats uint8
	Flags uint8
	_io *kaitai.Stream
	_root *Navigation
	_parent *Sbp_Message
}
func NewNavigation_MsgPosLlhCov() *Navigation_MsgPosLlhCov {
	return &Navigation_MsgPosLlhCov{
	}
}

func (this *Navigation_MsgPosLlhCov) Read(io *kaitai.Stream, parent *Sbp_Message, root *Navigation) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp16, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.Tow = uint32(tmp16)
	tmp17, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Lat = float64(tmp17)
	tmp18, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Lon = float64(tmp18)
	tmp19, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Height = float64(tmp19)
	tmp20, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.CovNN = float32(tmp20)
	tmp21, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.CovNE = float32(tmp21)
	tmp22, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.CovND = float32(tmp22)
	tmp23, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.CovEE = float32(tmp23)
	tmp24, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.CovED = float32(tmp24)
	tmp25, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.CovDD = float32(tmp25)
	tmp26, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.NSats = tmp26
	tmp27, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Flags = tmp27
	return err
}

/**
 * GPS Time of Week
 */

/**
 * Latitude
 */

/**
 * Longitude
 */

/**
 * Height above WGS84 ellipsoid
 */

/**
 * Estimated variance of northing
 */

/**
 * Covariance of northing and easting
 */

/**
 * Covariance of northing and downward measurement
 */

/**
 * Estimated variance of easting
 */

/**
 * Covariance of easting and downward measurement
 */

/**
 * Estimated variance of downward measurement
 */

/**
 * Number of satellites used in solution.
 */

/**
 * Status flags
 */

/**
 * This message reports the velocity in local North East Down (NED)
 * coordinates. The NED coordinate system is defined as the local WGS84
 * tangent plane centered at the current position. The full GPS time is
 * given by the preceding MSG_GPS_TIME with the matching time-of-week
 * (tow).
 */
type Navigation_MsgVelNedDepA struct {
	Tow uint32
	N int32
	E int32
	D int32
	HAccuracy uint16
	VAccuracy uint16
	NSats uint8
	Flags uint8
	_io *kaitai.Stream
	_root *Navigation
	_parent *Sbp_Message
}
func NewNavigation_MsgVelNedDepA() *Navigation_MsgVelNedDepA {
	return &Navigation_MsgVelNedDepA{
	}
}

func (this *Navigation_MsgVelNedDepA) Read(io *kaitai.Stream, parent *Sbp_Message, root *Navigation) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp28, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.Tow = uint32(tmp28)
	tmp29, err := this._io.ReadS4le()
	if err != nil {
		return err
	}
	this.N = int32(tmp29)
	tmp30, err := this._io.ReadS4le()
	if err != nil {
		return err
	}
	this.E = int32(tmp30)
	tmp31, err := this._io.ReadS4le()
	if err != nil {
		return err
	}
	this.D = int32(tmp31)
	tmp32, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.HAccuracy = uint16(tmp32)
	tmp33, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.VAccuracy = uint16(tmp33)
	tmp34, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.NSats = tmp34
	tmp35, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Flags = tmp35
	return err
}

/**
 * GPS Time of Week
 */

/**
 * Velocity North coordinate
 */

/**
 * Velocity East coordinate
 */

/**
 * Velocity Down coordinate
 */

/**
 * Horizontal velocity accuracy estimate (not implemented). Defaults to
 * 0.
 */

/**
 * Vertical velocity accuracy estimate (not implemented). Defaults to
 * 0.
 */

/**
 * Number of satellites used in solution
 */

/**
 * Status flags (reserved)
 */

/**
 * This message reports the velocity in local North East Down (NED)
 * coordinates. The NED coordinate system is defined as the local WGS84
 * tangent plane centered at the current position. The full GPS time is
 * given by the preceding MSG_GPS_TIME with the matching time-of-week
 * (tow). This message is similar to the MSG_VEL_NED, but it includes the
 * upper triangular portion of the 3x3 covariance matrix.
 */
type Navigation_MsgVelNedCov struct {
	Tow uint32
	N int32
	E int32
	D int32
	CovNN float32
	CovNE float32
	CovND float32
	CovEE float32
	CovED float32
	CovDD float32
	NSats uint8
	Flags uint8
	_io *kaitai.Stream
	_root *Navigation
	_parent *Sbp_Message
}
func NewNavigation_MsgVelNedCov() *Navigation_MsgVelNedCov {
	return &Navigation_MsgVelNedCov{
	}
}

func (this *Navigation_MsgVelNedCov) Read(io *kaitai.Stream, parent *Sbp_Message, root *Navigation) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp36, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.Tow = uint32(tmp36)
	tmp37, err := this._io.ReadS4le()
	if err != nil {
		return err
	}
	this.N = int32(tmp37)
	tmp38, err := this._io.ReadS4le()
	if err != nil {
		return err
	}
	this.E = int32(tmp38)
	tmp39, err := this._io.ReadS4le()
	if err != nil {
		return err
	}
	this.D = int32(tmp39)
	tmp40, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.CovNN = float32(tmp40)
	tmp41, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.CovNE = float32(tmp41)
	tmp42, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.CovND = float32(tmp42)
	tmp43, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.CovEE = float32(tmp43)
	tmp44, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.CovED = float32(tmp44)
	tmp45, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.CovDD = float32(tmp45)
	tmp46, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.NSats = tmp46
	tmp47, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Flags = tmp47
	return err
}

/**
 * GPS Time of Week
 */

/**
 * Velocity North coordinate
 */

/**
 * Velocity East coordinate
 */

/**
 * Velocity Down coordinate
 */

/**
 * Estimated variance of northward measurement
 */

/**
 * Covariance of northward and eastward measurement
 */

/**
 * Covariance of northward and downward measurement
 */

/**
 * Estimated variance of eastward measurement
 */

/**
 * Covariance of eastward and downward measurement
 */

/**
 * Estimated variance of downward measurement
 */

/**
 * Number of satellites used in solution
 */

/**
 * Status flags
 */

/**
 * This message reports the Universal Coordinated Time (UTC).  Note the
 * flags which indicate the source of the UTC offset value and source of
 * the time fix.
 */
type Navigation_MsgUtcTime struct {
	Flags uint8
	Tow uint32
	Year uint16
	Month uint8
	Day uint8
	Hours uint8
	Minutes uint8
	Seconds uint8
	Ns uint32
	_io *kaitai.Stream
	_root *Navigation
	_parent *Sbp_Message
}
func NewNavigation_MsgUtcTime() *Navigation_MsgUtcTime {
	return &Navigation_MsgUtcTime{
	}
}

func (this *Navigation_MsgUtcTime) Read(io *kaitai.Stream, parent *Sbp_Message, root *Navigation) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp48, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Flags = tmp48
	tmp49, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.Tow = uint32(tmp49)
	tmp50, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.Year = uint16(tmp50)
	tmp51, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Month = tmp51
	tmp52, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Day = tmp52
	tmp53, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Hours = tmp53
	tmp54, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Minutes = tmp54
	tmp55, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Seconds = tmp55
	tmp56, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.Ns = uint32(tmp56)
	return err
}

/**
 * Indicates source and time validity
 */

/**
 * GPS time of week rounded to the nearest millisecond
 */

/**
 * Year
 */

/**
 * Month (range 1 .. 12)
 */

/**
 * days in the month (range 1-31)
 */

/**
 * hours of day (range 0-23)
 */

/**
 * minutes of hour (range 0-59)
 */

/**
 * seconds of minute (range 0-60) rounded down
 */

/**
 * nanoseconds of second (range 0-999999999)
 */

/**
 * The position solution message reports absolute Earth Centered Earth
 * Fixed (ECEF) coordinates and the status (single point vs pseudo-absolute
 * RTK) of the position solution. The message also reports the upper
 * triangular portion of the 3x3 covariance matrix. If the receiver knows
 * the surveyed position of the base station and has an RTK solution, this
 * reports a pseudo-absolute position solution using the base station
 * position and the rover's RTK baseline vector. The full GPS time is given
 * by the preceding MSG_GPS_TIME with the matching time-of-week (tow).
 */
type Navigation_MsgPosEcefCovGnss struct {
	Tow uint32
	X float64
	Y float64
	Z float64
	CovXX float32
	CovXY float32
	CovXZ float32
	CovYY float32
	CovYZ float32
	CovZZ float32
	NSats uint8
	Flags uint8
	_io *kaitai.Stream
	_root *Navigation
	_parent *Sbp_Message
}
func NewNavigation_MsgPosEcefCovGnss() *Navigation_MsgPosEcefCovGnss {
	return &Navigation_MsgPosEcefCovGnss{
	}
}

func (this *Navigation_MsgPosEcefCovGnss) Read(io *kaitai.Stream, parent *Sbp_Message, root *Navigation) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp57, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.Tow = uint32(tmp57)
	tmp58, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.X = float64(tmp58)
	tmp59, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Y = float64(tmp59)
	tmp60, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Z = float64(tmp60)
	tmp61, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.CovXX = float32(tmp61)
	tmp62, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.CovXY = float32(tmp62)
	tmp63, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.CovXZ = float32(tmp63)
	tmp64, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.CovYY = float32(tmp64)
	tmp65, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.CovYZ = float32(tmp65)
	tmp66, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.CovZZ = float32(tmp66)
	tmp67, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.NSats = tmp67
	tmp68, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Flags = tmp68
	return err
}

/**
 * GPS Time of Week
 */

/**
 * ECEF X coordinate
 */

/**
 * ECEF Y coordinate
 */

/**
 * ECEF Z coordinate
 */

/**
 * Estimated variance of x
 */

/**
 * Estimated covariance of x and y
 */

/**
 * Estimated covariance of x and z
 */

/**
 * Estimated variance of y
 */

/**
 * Estimated covariance of y and z
 */

/**
 * Estimated variance of z
 */

/**
 * Number of satellites used in solution
 */

/**
 * Status flags
 */

/**
 * This message reports the velocity in local North East Down (NED)
 * coordinates. The NED coordinate system is defined as the local WGS84
 * tangent plane centered at the current position. The full GPS time is
 * given by the preceding MSG_GPS_TIME with the matching time-of-week
 * (tow).
 */
type Navigation_MsgVelNedGnss struct {
	Tow uint32
	N int32
	E int32
	D int32
	HAccuracy uint16
	VAccuracy uint16
	NSats uint8
	Flags uint8
	_io *kaitai.Stream
	_root *Navigation
	_parent *Sbp_Message
}
func NewNavigation_MsgVelNedGnss() *Navigation_MsgVelNedGnss {
	return &Navigation_MsgVelNedGnss{
	}
}

func (this *Navigation_MsgVelNedGnss) Read(io *kaitai.Stream, parent *Sbp_Message, root *Navigation) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp69, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.Tow = uint32(tmp69)
	tmp70, err := this._io.ReadS4le()
	if err != nil {
		return err
	}
	this.N = int32(tmp70)
	tmp71, err := this._io.ReadS4le()
	if err != nil {
		return err
	}
	this.E = int32(tmp71)
	tmp72, err := this._io.ReadS4le()
	if err != nil {
		return err
	}
	this.D = int32(tmp72)
	tmp73, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.HAccuracy = uint16(tmp73)
	tmp74, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.VAccuracy = uint16(tmp74)
	tmp75, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.NSats = tmp75
	tmp76, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Flags = tmp76
	return err
}

/**
 * GPS Time of Week
 */

/**
 * Velocity North coordinate
 */

/**
 * Velocity East coordinate
 */

/**
 * Velocity Down coordinate
 */

/**
 * Horizontal velocity estimated standard deviation
 */

/**
 * Vertical velocity estimated standard deviation
 */

/**
 * Number of satellites used in solution
 */

/**
 * Status flags
 */

/**
 * This message reports the velocity in local North East Down (NED)
 * coordinates. The NED coordinate system is defined as the local WGS84
 * tangent plane centered at the current position. The full GPS time is
 * given by the preceding MSG_GPS_TIME with the matching time-of-week
 * (tow). This message is similar to the MSG_VEL_NED, but it includes the
 * upper triangular portion of the 3x3 covariance matrix.
 */
type Navigation_MsgVelNedCovGnss struct {
	Tow uint32
	N int32
	E int32
	D int32
	CovNN float32
	CovNE float32
	CovND float32
	CovEE float32
	CovED float32
	CovDD float32
	NSats uint8
	Flags uint8
	_io *kaitai.Stream
	_root *Navigation
	_parent *Sbp_Message
}
func NewNavigation_MsgVelNedCovGnss() *Navigation_MsgVelNedCovGnss {
	return &Navigation_MsgVelNedCovGnss{
	}
}

func (this *Navigation_MsgVelNedCovGnss) Read(io *kaitai.Stream, parent *Sbp_Message, root *Navigation) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp77, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.Tow = uint32(tmp77)
	tmp78, err := this._io.ReadS4le()
	if err != nil {
		return err
	}
	this.N = int32(tmp78)
	tmp79, err := this._io.ReadS4le()
	if err != nil {
		return err
	}
	this.E = int32(tmp79)
	tmp80, err := this._io.ReadS4le()
	if err != nil {
		return err
	}
	this.D = int32(tmp80)
	tmp81, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.CovNN = float32(tmp81)
	tmp82, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.CovNE = float32(tmp82)
	tmp83, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.CovND = float32(tmp83)
	tmp84, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.CovEE = float32(tmp84)
	tmp85, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.CovED = float32(tmp85)
	tmp86, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.CovDD = float32(tmp86)
	tmp87, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.NSats = tmp87
	tmp88, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Flags = tmp88
	return err
}

/**
 * GPS Time of Week
 */

/**
 * Velocity North coordinate
 */

/**
 * Velocity East coordinate
 */

/**
 * Velocity Down coordinate
 */

/**
 * Estimated variance of northward measurement
 */

/**
 * Covariance of northward and eastward measurement
 */

/**
 * Covariance of northward and downward measurement
 */

/**
 * Estimated variance of eastward measurement
 */

/**
 * Covariance of eastward and downward measurement
 */

/**
 * Estimated variance of downward measurement
 */

/**
 * Number of satellites used in solution
 */

/**
 * Status flags
 */

/**
 * This message reports the baseline solution in North East Down (NED)
 * coordinates. This baseline is the relative vector distance from the base
 * station to the rover receiver, and NED coordinate system is defined at
 * the local WGS84 tangent plane centered at the base station position.
 * The full GPS time is given by the preceding MSG_GPS_TIME with the
 * matching time-of-week (tow).
 */
type Navigation_MsgBaselineNedDepA struct {
	Tow uint32
	N int32
	E int32
	D int32
	HAccuracy uint16
	VAccuracy uint16
	NSats uint8
	Flags uint8
	_io *kaitai.Stream
	_root *Navigation
	_parent *Sbp_Message
}
func NewNavigation_MsgBaselineNedDepA() *Navigation_MsgBaselineNedDepA {
	return &Navigation_MsgBaselineNedDepA{
	}
}

func (this *Navigation_MsgBaselineNedDepA) Read(io *kaitai.Stream, parent *Sbp_Message, root *Navigation) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp89, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.Tow = uint32(tmp89)
	tmp90, err := this._io.ReadS4le()
	if err != nil {
		return err
	}
	this.N = int32(tmp90)
	tmp91, err := this._io.ReadS4le()
	if err != nil {
		return err
	}
	this.E = int32(tmp91)
	tmp92, err := this._io.ReadS4le()
	if err != nil {
		return err
	}
	this.D = int32(tmp92)
	tmp93, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.HAccuracy = uint16(tmp93)
	tmp94, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.VAccuracy = uint16(tmp94)
	tmp95, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.NSats = tmp95
	tmp96, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Flags = tmp96
	return err
}

/**
 * GPS Time of Week
 */

/**
 * Baseline North coordinate
 */

/**
 * Baseline East coordinate
 */

/**
 * Baseline Down coordinate
 */

/**
 * Horizontal position accuracy estimate (not implemented). Defaults to
 * 0.
 */

/**
 * Vertical position accuracy estimate (not implemented). Defaults to
 * 0.
 */

/**
 * Number of satellites used in solution
 */

/**
 * Status flags
 */

/**
 * This message reports the velocity in Earth Centered Earth Fixed (ECEF)
 * coordinates. The full GPS time is given by the preceding MSG_GPS_TIME
 * with the matching time-of-week (tow).
 */
type Navigation_MsgVelEcefDepA struct {
	Tow uint32
	X int32
	Y int32
	Z int32
	Accuracy uint16
	NSats uint8
	Flags uint8
	_io *kaitai.Stream
	_root *Navigation
	_parent *Sbp_Message
}
func NewNavigation_MsgVelEcefDepA() *Navigation_MsgVelEcefDepA {
	return &Navigation_MsgVelEcefDepA{
	}
}

func (this *Navigation_MsgVelEcefDepA) Read(io *kaitai.Stream, parent *Sbp_Message, root *Navigation) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp97, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.Tow = uint32(tmp97)
	tmp98, err := this._io.ReadS4le()
	if err != nil {
		return err
	}
	this.X = int32(tmp98)
	tmp99, err := this._io.ReadS4le()
	if err != nil {
		return err
	}
	this.Y = int32(tmp99)
	tmp100, err := this._io.ReadS4le()
	if err != nil {
		return err
	}
	this.Z = int32(tmp100)
	tmp101, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.Accuracy = uint16(tmp101)
	tmp102, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.NSats = tmp102
	tmp103, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Flags = tmp103
	return err
}

/**
 * GPS Time of Week
 */

/**
 * Velocity ECEF X coordinate
 */

/**
 * Velocity ECEF Y coordinate
 */

/**
 * Velocity ECEF Z coordinate
 */

/**
 * Velocity accuracy estimate (not implemented). Defaults to 0.
 */

/**
 * Number of satellites used in solution
 */

/**
 * Status flags (reserved)
 */
type Navigation_MsgReferenceFrameParam struct {
	SsrIod uint8
	Sn string
	Tn string
	Sin uint8
	Utn uint16
	ReT0 uint16
	DeltaX0 int32
	DeltaY0 int32
	DeltaZ0 int32
	Theta01 int32
	Theta02 int32
	Theta03 int32
	Scale int32
	DotDeltaX0 int32
	DotDeltaY0 int32
	DotDeltaZ0 int32
	DotTheta01 int32
	DotTheta02 int32
	DotTheta03 int32
	DotScale int16
	_io *kaitai.Stream
	_root *Navigation
	_parent *Sbp_Message
}
func NewNavigation_MsgReferenceFrameParam() *Navigation_MsgReferenceFrameParam {
	return &Navigation_MsgReferenceFrameParam{
	}
}

func (this *Navigation_MsgReferenceFrameParam) Read(io *kaitai.Stream, parent *Sbp_Message, root *Navigation) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp104, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.SsrIod = tmp104
	tmp105, err := this._io.ReadBytes(int(32))
	if err != nil {
		return err
	}
	tmp105 = tmp105
	this.Sn = string(tmp105)
	tmp106, err := this._io.ReadBytes(int(32))
	if err != nil {
		return err
	}
	tmp106 = tmp106
	this.Tn = string(tmp106)
	tmp107, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Sin = tmp107
	tmp108, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.Utn = uint16(tmp108)
	tmp109, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.ReT0 = uint16(tmp109)
	tmp110, err := this._io.ReadS4le()
	if err != nil {
		return err
	}
	this.DeltaX0 = int32(tmp110)
	tmp111, err := this._io.ReadS4le()
	if err != nil {
		return err
	}
	this.DeltaY0 = int32(tmp111)
	tmp112, err := this._io.ReadS4le()
	if err != nil {
		return err
	}
	this.DeltaZ0 = int32(tmp112)
	tmp113, err := this._io.ReadS4le()
	if err != nil {
		return err
	}
	this.Theta01 = int32(tmp113)
	tmp114, err := this._io.ReadS4le()
	if err != nil {
		return err
	}
	this.Theta02 = int32(tmp114)
	tmp115, err := this._io.ReadS4le()
	if err != nil {
		return err
	}
	this.Theta03 = int32(tmp115)
	tmp116, err := this._io.ReadS4le()
	if err != nil {
		return err
	}
	this.Scale = int32(tmp116)
	tmp117, err := this._io.ReadS4le()
	if err != nil {
		return err
	}
	this.DotDeltaX0 = int32(tmp117)
	tmp118, err := this._io.ReadS4le()
	if err != nil {
		return err
	}
	this.DotDeltaY0 = int32(tmp118)
	tmp119, err := this._io.ReadS4le()
	if err != nil {
		return err
	}
	this.DotDeltaZ0 = int32(tmp119)
	tmp120, err := this._io.ReadS4le()
	if err != nil {
		return err
	}
	this.DotTheta01 = int32(tmp120)
	tmp121, err := this._io.ReadS4le()
	if err != nil {
		return err
	}
	this.DotTheta02 = int32(tmp121)
	tmp122, err := this._io.ReadS4le()
	if err != nil {
		return err
	}
	this.DotTheta03 = int32(tmp122)
	tmp123, err := this._io.ReadS2le()
	if err != nil {
		return err
	}
	this.DotScale = int16(tmp123)
	return err
}

/**
 * SSR IOD parameter.
 */

/**
 * Name of source coordinate-system.
 */

/**
 * Name of target coordinate-system.
 */

/**
 * System Identification Number.
 */

/**
 * Utilized Transformation Message.
 */

/**
 * Reference Epoch t0 for transformation parameter set given as
 * Modified Julian Day (MJD) Number minus 44244 days.
 */

/**
 * Translation in X for Reference Epoch t0.
 */

/**
 * Translation in Y for Reference Epoch t0.
 */

/**
 * Translation in Z for Reference Epoch t0.
 */

/**
 * Rotation around the X-axis for Reference Epoch t0.
 */

/**
 * Rotation around the Y-axis for Reference Epoch t0.
 */

/**
 * Rotation around the Z-axis for Reference Epoch t0.
 */

/**
 * Scale correction for Reference Epoch t0.
 */

/**
 * Rate of change of translation in X.
 */

/**
 * Rate of change of translation in Y.
 */

/**
 * Rate of change of translation in Z.
 */

/**
 * Rate of change of rotation around the X-axis.
 */

/**
 * Rate of change of rotation around the Y-axis.
 */

/**
 * Rate of change of rotation around the Z-axis.
 */

/**
 * Rate of change of scale correction.
 */

/**
 * This solution message reports the relative pose of a sensor between two
 * time instances. The relative pose comprises of a rotation and a
 * translation which relates the sensor (e.g. camera) frame at a given time
 * (first keyframe) to the sensor frame at another time (second keyframe).
 * The relative translations is a 3x1 vector described in the first
 * keyframe.  Relative rotation is described by a quaternion from second
 * keyframe to the first keyframe.
 */
type Navigation_MsgPoseRelative struct {
	Tow uint32
	SensorId uint8
	Timestamp1 uint32
	Timestamp2 uint32
	Trans []int32
	W int32
	X int32
	Y int32
	Z int32
	CovRXX float32
	CovRXY float32
	CovRXZ float32
	CovRYY float32
	CovRYZ float32
	CovRZZ float32
	CovCXX float32
	CovCXY float32
	CovCXZ float32
	CovCYY float32
	CovCYZ float32
	CovCZZ float32
	Flags uint8
	_io *kaitai.Stream
	_root *Navigation
	_parent *Sbp_Message
}
func NewNavigation_MsgPoseRelative() *Navigation_MsgPoseRelative {
	return &Navigation_MsgPoseRelative{
	}
}

func (this *Navigation_MsgPoseRelative) Read(io *kaitai.Stream, parent *Sbp_Message, root *Navigation) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp124, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.Tow = uint32(tmp124)
	tmp125, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.SensorId = tmp125
	tmp126, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.Timestamp1 = uint32(tmp126)
	tmp127, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.Timestamp2 = uint32(tmp127)
	for i := 0; i < int(3); i++ {
		_ = i
		tmp128, err := this._io.ReadS4le()
		if err != nil {
			return err
		}
		this.Trans = append(this.Trans, tmp128)
	}
	tmp129, err := this._io.ReadS4le()
	if err != nil {
		return err
	}
	this.W = int32(tmp129)
	tmp130, err := this._io.ReadS4le()
	if err != nil {
		return err
	}
	this.X = int32(tmp130)
	tmp131, err := this._io.ReadS4le()
	if err != nil {
		return err
	}
	this.Y = int32(tmp131)
	tmp132, err := this._io.ReadS4le()
	if err != nil {
		return err
	}
	this.Z = int32(tmp132)
	tmp133, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.CovRXX = float32(tmp133)
	tmp134, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.CovRXY = float32(tmp134)
	tmp135, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.CovRXZ = float32(tmp135)
	tmp136, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.CovRYY = float32(tmp136)
	tmp137, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.CovRYZ = float32(tmp137)
	tmp138, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.CovRZZ = float32(tmp138)
	tmp139, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.CovCXX = float32(tmp139)
	tmp140, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.CovCXY = float32(tmp140)
	tmp141, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.CovCXZ = float32(tmp141)
	tmp142, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.CovCYY = float32(tmp142)
	tmp143, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.CovCYZ = float32(tmp143)
	tmp144, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.CovCZZ = float32(tmp144)
	tmp145, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Flags = tmp145
	return err
}

/**
 * GPS Time of Week
 */

/**
 * ID of the sensor producing this message
 */

/**
 * Timestamp of first keyframe
 */

/**
 * Timestamp of second keyframe
 */

/**
 * Relative translation [x,y,z] described in first keyframe
 */

/**
 * Real component of quaternion to describe relative rotation (second
 * to first keyframe)
 */

/**
 * 1st imaginary component of quaternion to describe relative rotation
 * (second to first keyframe)
 */

/**
 * 2nd imaginary component of quaternion to describe relative rotation
 * (second to first keyframe)
 */

/**
 * 3rd imaginary component of quaternion to describe relative rotation
 * (second to first keyframe)
 */

/**
 * Estimated variance of x (relative translation)
 */

/**
 * Covariance of x and y (relative translation)
 */

/**
 * Covariance of x and z (relative translation)
 */

/**
 * Estimated variance of y (relative translation)
 */

/**
 * Covariance of y and z (relative translation)
 */

/**
 * Estimated variance of z (relative translation)
 */

/**
 * Estimated variance of x (relative rotation)
 */

/**
 * Covariance of x and y (relative rotation)
 */

/**
 * Covariance of x and z (relative rotation)
 */

/**
 * Estimated variance of y (relative rotation)
 */

/**
 * Covariance of y and z (relative rotation)
 */

/**
 * Estimated variance of z (relative rotation)
 */

/**
 * Status flags of relative translation and rotation
 */

/**
 * This message reports the velocity in Earth Centered Earth Fixed (ECEF)
 * coordinates. The full GPS time is given by the preceding MSG_GPS_TIME
 * with the matching time-of-week (tow).
 */
type Navigation_MsgVelEcefCov struct {
	Tow uint32
	X int32
	Y int32
	Z int32
	CovXX float32
	CovXY float32
	CovXZ float32
	CovYY float32
	CovYZ float32
	CovZZ float32
	NSats uint8
	Flags uint8
	_io *kaitai.Stream
	_root *Navigation
	_parent *Sbp_Message
}
func NewNavigation_MsgVelEcefCov() *Navigation_MsgVelEcefCov {
	return &Navigation_MsgVelEcefCov{
	}
}

func (this *Navigation_MsgVelEcefCov) Read(io *kaitai.Stream, parent *Sbp_Message, root *Navigation) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp146, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.Tow = uint32(tmp146)
	tmp147, err := this._io.ReadS4le()
	if err != nil {
		return err
	}
	this.X = int32(tmp147)
	tmp148, err := this._io.ReadS4le()
	if err != nil {
		return err
	}
	this.Y = int32(tmp148)
	tmp149, err := this._io.ReadS4le()
	if err != nil {
		return err
	}
	this.Z = int32(tmp149)
	tmp150, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.CovXX = float32(tmp150)
	tmp151, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.CovXY = float32(tmp151)
	tmp152, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.CovXZ = float32(tmp152)
	tmp153, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.CovYY = float32(tmp153)
	tmp154, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.CovYZ = float32(tmp154)
	tmp155, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.CovZZ = float32(tmp155)
	tmp156, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.NSats = tmp156
	tmp157, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Flags = tmp157
	return err
}

/**
 * GPS Time of Week
 */

/**
 * Velocity ECEF X coordinate
 */

/**
 * Velocity ECEF Y coordinate
 */

/**
 * Velocity ECEF Z coordinate
 */

/**
 * Estimated variance of x
 */

/**
 * Estimated covariance of x and y
 */

/**
 * Estimated covariance of x and z
 */

/**
 * Estimated variance of y
 */

/**
 * Estimated covariance of y and z
 */

/**
 * Estimated variance of z
 */

/**
 * Number of satellites used in solution
 */

/**
 * Status flags
 */

/**
 * This message reports the velocity in the Vehicle Body Frame. By
 * convention, the x-axis should point out the nose of the vehicle and
 * represent the forward direction, while as the y-axis should point out
 * the right hand side of the vehicle. Since this is a right handed system,
 * z should point out the bottom of the vehicle. The orientation and origin
 * of the Vehicle Body Frame are specified via the device settings. The
 * full GPS time is given by the preceding MSG_GPS_TIME with the matching
 * time-of-week (tow). This message is only produced by inertial versions
 * of Swift products and is not available from Piksi Multi or Duro.
 */
type Navigation_MsgVelBody struct {
	Tow uint32
	X int32
	Y int32
	Z int32
	CovXX float32
	CovXY float32
	CovXZ float32
	CovYY float32
	CovYZ float32
	CovZZ float32
	NSats uint8
	Flags uint8
	_io *kaitai.Stream
	_root *Navigation
	_parent *Sbp_Message
}
func NewNavigation_MsgVelBody() *Navigation_MsgVelBody {
	return &Navigation_MsgVelBody{
	}
}

func (this *Navigation_MsgVelBody) Read(io *kaitai.Stream, parent *Sbp_Message, root *Navigation) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp158, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.Tow = uint32(tmp158)
	tmp159, err := this._io.ReadS4le()
	if err != nil {
		return err
	}
	this.X = int32(tmp159)
	tmp160, err := this._io.ReadS4le()
	if err != nil {
		return err
	}
	this.Y = int32(tmp160)
	tmp161, err := this._io.ReadS4le()
	if err != nil {
		return err
	}
	this.Z = int32(tmp161)
	tmp162, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.CovXX = float32(tmp162)
	tmp163, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.CovXY = float32(tmp163)
	tmp164, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.CovXZ = float32(tmp164)
	tmp165, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.CovYY = float32(tmp165)
	tmp166, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.CovYZ = float32(tmp166)
	tmp167, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.CovZZ = float32(tmp167)
	tmp168, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.NSats = tmp168
	tmp169, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Flags = tmp169
	return err
}

/**
 * GPS Time of Week
 */

/**
 * Velocity in x direction
 */

/**
 * Velocity in y direction
 */

/**
 * Velocity in z direction
 */

/**
 * Estimated variance of x
 */

/**
 * Covariance of x and y
 */

/**
 * Covariance of x and z
 */

/**
 * Estimated variance of y
 */

/**
 * Covariance of y and z
 */

/**
 * Estimated variance of z
 */

/**
 * Number of satellites used in solution
 */

/**
 * Status flags
 */

/**
 * This message reports the velocity in Earth Centered Earth Fixed (ECEF)
 * coordinates. The full GPS time is given by the preceding MSG_GPS_TIME
 * with the matching time-of-week (tow).
 */
type Navigation_MsgVelEcefGnss struct {
	Tow uint32
	X int32
	Y int32
	Z int32
	Accuracy uint16
	NSats uint8
	Flags uint8
	_io *kaitai.Stream
	_root *Navigation
	_parent *Sbp_Message
}
func NewNavigation_MsgVelEcefGnss() *Navigation_MsgVelEcefGnss {
	return &Navigation_MsgVelEcefGnss{
	}
}

func (this *Navigation_MsgVelEcefGnss) Read(io *kaitai.Stream, parent *Sbp_Message, root *Navigation) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp170, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.Tow = uint32(tmp170)
	tmp171, err := this._io.ReadS4le()
	if err != nil {
		return err
	}
	this.X = int32(tmp171)
	tmp172, err := this._io.ReadS4le()
	if err != nil {
		return err
	}
	this.Y = int32(tmp172)
	tmp173, err := this._io.ReadS4le()
	if err != nil {
		return err
	}
	this.Z = int32(tmp173)
	tmp174, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.Accuracy = uint16(tmp174)
	tmp175, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.NSats = tmp175
	tmp176, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Flags = tmp176
	return err
}

/**
 * GPS Time of Week
 */

/**
 * Velocity ECEF X coordinate
 */

/**
 * Velocity ECEF Y coordinate
 */

/**
 * Velocity ECEF Z coordinate
 */

/**
 * Velocity estimated standard deviation
 */

/**
 * Number of satellites used in solution
 */

/**
 * Status flags
 */

/**
 * This message reports the velocity in Earth Centered Earth Fixed (ECEF)
 * coordinates. The full GPS time is given by the preceding MSG_GPS_TIME
 * with the matching time-of-week (tow).
 */
type Navigation_MsgVelEcef struct {
	Tow uint32
	X int32
	Y int32
	Z int32
	Accuracy uint16
	NSats uint8
	Flags uint8
	_io *kaitai.Stream
	_root *Navigation
	_parent *Sbp_Message
}
func NewNavigation_MsgVelEcef() *Navigation_MsgVelEcef {
	return &Navigation_MsgVelEcef{
	}
}

func (this *Navigation_MsgVelEcef) Read(io *kaitai.Stream, parent *Sbp_Message, root *Navigation) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp177, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.Tow = uint32(tmp177)
	tmp178, err := this._io.ReadS4le()
	if err != nil {
		return err
	}
	this.X = int32(tmp178)
	tmp179, err := this._io.ReadS4le()
	if err != nil {
		return err
	}
	this.Y = int32(tmp179)
	tmp180, err := this._io.ReadS4le()
	if err != nil {
		return err
	}
	this.Z = int32(tmp180)
	tmp181, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.Accuracy = uint16(tmp181)
	tmp182, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.NSats = tmp182
	tmp183, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Flags = tmp183
	return err
}

/**
 * GPS Time of Week
 */

/**
 * Velocity ECEF X coordinate
 */

/**
 * Velocity ECEF Y coordinate
 */

/**
 * Velocity ECEF Z coordinate
 */

/**
 * Velocity estimated standard deviation
 */

/**
 * Number of satellites used in solution
 */

/**
 * Status flags
 */

/**
 * This position solution message reports the absolute geodetic coordinates
 * and the status (single point vs pseudo-absolute RTK) of the position
 * solution as well as the upper triangle of the 3x3 covariance matrix.
 * The position information and Fix Mode flags should follow the
 * MSG_POS_LLH message.  Since the covariance matrix is computed in the
 * local-level North, East, Down frame, the covariance terms follow with
 * that convention. Thus, covariances are reported against the "downward"
 * measurement and care should be taken with the sign convention.
 */
type Navigation_MsgPosLlhCovGnss struct {
	Tow uint32
	Lat float64
	Lon float64
	Height float64
	CovNN float32
	CovNE float32
	CovND float32
	CovEE float32
	CovED float32
	CovDD float32
	NSats uint8
	Flags uint8
	_io *kaitai.Stream
	_root *Navigation
	_parent *Sbp_Message
}
func NewNavigation_MsgPosLlhCovGnss() *Navigation_MsgPosLlhCovGnss {
	return &Navigation_MsgPosLlhCovGnss{
	}
}

func (this *Navigation_MsgPosLlhCovGnss) Read(io *kaitai.Stream, parent *Sbp_Message, root *Navigation) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp184, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.Tow = uint32(tmp184)
	tmp185, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Lat = float64(tmp185)
	tmp186, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Lon = float64(tmp186)
	tmp187, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Height = float64(tmp187)
	tmp188, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.CovNN = float32(tmp188)
	tmp189, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.CovNE = float32(tmp189)
	tmp190, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.CovND = float32(tmp190)
	tmp191, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.CovEE = float32(tmp191)
	tmp192, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.CovED = float32(tmp192)
	tmp193, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.CovDD = float32(tmp193)
	tmp194, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.NSats = tmp194
	tmp195, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Flags = tmp195
	return err
}

/**
 * GPS Time of Week
 */

/**
 * Latitude
 */

/**
 * Longitude
 */

/**
 * Height above WGS84 ellipsoid
 */

/**
 * Estimated variance of northing
 */

/**
 * Covariance of northing and easting
 */

/**
 * Covariance of northing and downward measurement
 */

/**
 * Estimated variance of easting
 */

/**
 * Covariance of easting and downward measurement
 */

/**
 * Estimated variance of downward measurement
 */

/**
 * Number of satellites used in solution.
 */

/**
 * Status flags
 */

/**
 * This message reports the baseline solution in Earth Centered Earth Fixed
 * (ECEF) coordinates. This baseline is the relative vector distance from
 * the base station to the rover receiver. The full GPS time is given by
 * the preceding MSG_GPS_TIME with the matching time-of-week (tow).
 */
type Navigation_MsgBaselineEcef struct {
	Tow uint32
	X int32
	Y int32
	Z int32
	Accuracy uint16
	NSats uint8
	Flags uint8
	_io *kaitai.Stream
	_root *Navigation
	_parent *Sbp_Message
}
func NewNavigation_MsgBaselineEcef() *Navigation_MsgBaselineEcef {
	return &Navigation_MsgBaselineEcef{
	}
}

func (this *Navigation_MsgBaselineEcef) Read(io *kaitai.Stream, parent *Sbp_Message, root *Navigation) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp196, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.Tow = uint32(tmp196)
	tmp197, err := this._io.ReadS4le()
	if err != nil {
		return err
	}
	this.X = int32(tmp197)
	tmp198, err := this._io.ReadS4le()
	if err != nil {
		return err
	}
	this.Y = int32(tmp198)
	tmp199, err := this._io.ReadS4le()
	if err != nil {
		return err
	}
	this.Z = int32(tmp199)
	tmp200, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.Accuracy = uint16(tmp200)
	tmp201, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.NSats = tmp201
	tmp202, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Flags = tmp202
	return err
}

/**
 * GPS Time of Week
 */

/**
 * Baseline ECEF X coordinate
 */

/**
 * Baseline ECEF Y coordinate
 */

/**
 * Baseline ECEF Z coordinate
 */

/**
 * Position estimated standard deviation
 */

/**
 * Number of satellites used in solution
 */

/**
 * Status flags
 */

/**
 * This dilution of precision (DOP) message describes the effect of
 * navigation satellite geometry on positional measurement precision.
 */
type Navigation_MsgDopsDepA struct {
	Tow uint32
	Gdop uint16
	Pdop uint16
	Tdop uint16
	Hdop uint16
	Vdop uint16
	_io *kaitai.Stream
	_root *Navigation
	_parent *Sbp_Message
}
func NewNavigation_MsgDopsDepA() *Navigation_MsgDopsDepA {
	return &Navigation_MsgDopsDepA{
	}
}

func (this *Navigation_MsgDopsDepA) Read(io *kaitai.Stream, parent *Sbp_Message, root *Navigation) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp203, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.Tow = uint32(tmp203)
	tmp204, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.Gdop = uint16(tmp204)
	tmp205, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.Pdop = uint16(tmp205)
	tmp206, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.Tdop = uint16(tmp206)
	tmp207, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.Hdop = uint16(tmp207)
	tmp208, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.Vdop = uint16(tmp208)
	return err
}

/**
 * GPS Time of Week
 */

/**
 * Geometric Dilution of Precision
 */

/**
 * Position Dilution of Precision
 */

/**
 * Time Dilution of Precision
 */

/**
 * Horizontal Dilution of Precision
 */

/**
 * Vertical Dilution of Precision
 */

/**
 * The position solution message reports absolute Earth Centered Earth
 * Fixed (ECEF) coordinates and the status (single point vs pseudo-absolute
 * RTK) of the position solution. If the rover receiver knows the surveyed
 * position of the base station and has an RTK solution, this reports a
 * pseudo-absolute position solution using the base station position and
 * the rover's RTK baseline vector. The full GPS time is given by the
 * preceding MSG_GPS_TIME with the matching time-of-week (tow).
 */
type Navigation_MsgPosEcef struct {
	Tow uint32
	X float64
	Y float64
	Z float64
	Accuracy uint16
	NSats uint8
	Flags uint8
	_io *kaitai.Stream
	_root *Navigation
	_parent *Sbp_Message
}
func NewNavigation_MsgPosEcef() *Navigation_MsgPosEcef {
	return &Navigation_MsgPosEcef{
	}
}

func (this *Navigation_MsgPosEcef) Read(io *kaitai.Stream, parent *Sbp_Message, root *Navigation) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp209, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.Tow = uint32(tmp209)
	tmp210, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.X = float64(tmp210)
	tmp211, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Y = float64(tmp211)
	tmp212, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Z = float64(tmp212)
	tmp213, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.Accuracy = uint16(tmp213)
	tmp214, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.NSats = tmp214
	tmp215, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Flags = tmp215
	return err
}

/**
 * GPS Time of Week
 */

/**
 * ECEF X coordinate
 */

/**
 * ECEF Y coordinate
 */

/**
 * ECEF Z coordinate
 */

/**
 * Position estimated standard deviation
 */

/**
 * Number of satellites used in solution
 */

/**
 * Status flags
 */

/**
 * This message reports the Age of the corrections used for the current
 * Differential solution.
 */
type Navigation_MsgAgeCorrections struct {
	Tow uint32
	Age uint16
	_io *kaitai.Stream
	_root *Navigation
	_parent *Sbp_Message
}
func NewNavigation_MsgAgeCorrections() *Navigation_MsgAgeCorrections {
	return &Navigation_MsgAgeCorrections{
	}
}

func (this *Navigation_MsgAgeCorrections) Read(io *kaitai.Stream, parent *Sbp_Message, root *Navigation) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp216, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.Tow = uint32(tmp216)
	tmp217, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.Age = uint16(tmp217)
	return err
}

/**
 * GPS Time of Week
 */

/**
 * Age of the corrections (0xFFFF indicates invalid)
 */

/**
 * This message reports the velocity in Earth Centered Earth Fixed (ECEF)
 * coordinates. The full GPS time is given by the preceding MSG_GPS_TIME
 * with the matching time-of-week (tow).
 */
type Navigation_MsgVelEcefCovGnss struct {
	Tow uint32
	X int32
	Y int32
	Z int32
	CovXX float32
	CovXY float32
	CovXZ float32
	CovYY float32
	CovYZ float32
	CovZZ float32
	NSats uint8
	Flags uint8
	_io *kaitai.Stream
	_root *Navigation
	_parent *Sbp_Message
}
func NewNavigation_MsgVelEcefCovGnss() *Navigation_MsgVelEcefCovGnss {
	return &Navigation_MsgVelEcefCovGnss{
	}
}

func (this *Navigation_MsgVelEcefCovGnss) Read(io *kaitai.Stream, parent *Sbp_Message, root *Navigation) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp218, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.Tow = uint32(tmp218)
	tmp219, err := this._io.ReadS4le()
	if err != nil {
		return err
	}
	this.X = int32(tmp219)
	tmp220, err := this._io.ReadS4le()
	if err != nil {
		return err
	}
	this.Y = int32(tmp220)
	tmp221, err := this._io.ReadS4le()
	if err != nil {
		return err
	}
	this.Z = int32(tmp221)
	tmp222, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.CovXX = float32(tmp222)
	tmp223, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.CovXY = float32(tmp223)
	tmp224, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.CovXZ = float32(tmp224)
	tmp225, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.CovYY = float32(tmp225)
	tmp226, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.CovYZ = float32(tmp226)
	tmp227, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.CovZZ = float32(tmp227)
	tmp228, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.NSats = tmp228
	tmp229, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Flags = tmp229
	return err
}

/**
 * GPS Time of Week
 */

/**
 * Velocity ECEF X coordinate
 */

/**
 * Velocity ECEF Y coordinate
 */

/**
 * Velocity ECEF Z coordinate
 */

/**
 * Estimated variance of x
 */

/**
 * Estimated covariance of x and y
 */

/**
 * Estimated covariance of x and z
 */

/**
 * Estimated variance of y
 */

/**
 * Estimated covariance of y and z
 */

/**
 * Estimated variance of z
 */

/**
 * Number of satellites used in solution
 */

/**
 * Status flags
 */

/**
 * This message reports the protection levels associated to the given state
 * estimate. The full GPS time is given by the preceding MSG_GPS_TIME with
 * the matching time-of-week (tow).
 */
type Navigation_MsgProtectionLevel struct {
	Tow uint32
	Wn int16
	Hpl uint16
	Vpl uint16
	Atpl uint16
	Ctpl uint16
	Hvpl uint16
	Vvpl uint16
	Hopl uint16
	Popl uint16
	Ropl uint16
	Lat float64
	Lon float64
	Height float64
	VX int32
	VY int32
	VZ int32
	Roll int32
	Pitch int32
	Heading int32
	Flags uint32
	_io *kaitai.Stream
	_root *Navigation
	_parent *Sbp_Message
}
func NewNavigation_MsgProtectionLevel() *Navigation_MsgProtectionLevel {
	return &Navigation_MsgProtectionLevel{
	}
}

func (this *Navigation_MsgProtectionLevel) Read(io *kaitai.Stream, parent *Sbp_Message, root *Navigation) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp230, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.Tow = uint32(tmp230)
	tmp231, err := this._io.ReadS2le()
	if err != nil {
		return err
	}
	this.Wn = int16(tmp231)
	tmp232, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.Hpl = uint16(tmp232)
	tmp233, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.Vpl = uint16(tmp233)
	tmp234, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.Atpl = uint16(tmp234)
	tmp235, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.Ctpl = uint16(tmp235)
	tmp236, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.Hvpl = uint16(tmp236)
	tmp237, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.Vvpl = uint16(tmp237)
	tmp238, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.Hopl = uint16(tmp238)
	tmp239, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.Popl = uint16(tmp239)
	tmp240, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.Ropl = uint16(tmp240)
	tmp241, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Lat = float64(tmp241)
	tmp242, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Lon = float64(tmp242)
	tmp243, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Height = float64(tmp243)
	tmp244, err := this._io.ReadS4le()
	if err != nil {
		return err
	}
	this.VX = int32(tmp244)
	tmp245, err := this._io.ReadS4le()
	if err != nil {
		return err
	}
	this.VY = int32(tmp245)
	tmp246, err := this._io.ReadS4le()
	if err != nil {
		return err
	}
	this.VZ = int32(tmp246)
	tmp247, err := this._io.ReadS4le()
	if err != nil {
		return err
	}
	this.Roll = int32(tmp247)
	tmp248, err := this._io.ReadS4le()
	if err != nil {
		return err
	}
	this.Pitch = int32(tmp248)
	tmp249, err := this._io.ReadS4le()
	if err != nil {
		return err
	}
	this.Heading = int32(tmp249)
	tmp250, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.Flags = uint32(tmp250)
	return err
}

/**
 * GPS Time of Week
 */

/**
 * GPS week number
 */

/**
 * Horizontal protection level
 */

/**
 * Vertical protection level
 */

/**
 * Along-track position error protection level
 */

/**
 * Cross-track position error protection level
 */

/**
 * Protection level for the error vector between estimated and true
 * along/cross track velocity vector
 */

/**
 * Protection level for the velocity in vehicle upright direction
 * (different from vertical direction if on a slope)
 */

/**
 * Heading orientation protection level
 */

/**
 * Pitch orientation protection level
 */

/**
 * Roll orientation protection level
 */

/**
 * Latitude
 */

/**
 * Longitude
 */

/**
 * Height
 */

/**
 * Velocity in vehicle x direction
 */

/**
 * Velocity in vehicle y direction
 */

/**
 * Velocity in vehicle z direction
 */

/**
 * Roll angle
 */

/**
 * Pitch angle
 */

/**
 * Heading angle
 */

/**
 * Status flags
 */

/**
 * The position solution message reports absolute Earth Centered Earth
 * Fixed (ECEF) coordinates and the status (single point vs pseudo-absolute
 * RTK) of the position solution. The message also reports the upper
 * triangular portion of the 3x3 covariance matrix. If the receiver knows
 * the surveyed position of the base station and has an RTK solution, this
 * reports a pseudo-absolute position solution using the base station
 * position and the rover's RTK baseline vector. The full GPS time is given
 * by the preceding MSG_GPS_TIME with the matching time-of-week (tow).
 */
type Navigation_MsgPosEcefCov struct {
	Tow uint32
	X float64
	Y float64
	Z float64
	CovXX float32
	CovXY float32
	CovXZ float32
	CovYY float32
	CovYZ float32
	CovZZ float32
	NSats uint8
	Flags uint8
	_io *kaitai.Stream
	_root *Navigation
	_parent *Sbp_Message
}
func NewNavigation_MsgPosEcefCov() *Navigation_MsgPosEcefCov {
	return &Navigation_MsgPosEcefCov{
	}
}

func (this *Navigation_MsgPosEcefCov) Read(io *kaitai.Stream, parent *Sbp_Message, root *Navigation) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp251, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.Tow = uint32(tmp251)
	tmp252, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.X = float64(tmp252)
	tmp253, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Y = float64(tmp253)
	tmp254, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Z = float64(tmp254)
	tmp255, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.CovXX = float32(tmp255)
	tmp256, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.CovXY = float32(tmp256)
	tmp257, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.CovXZ = float32(tmp257)
	tmp258, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.CovYY = float32(tmp258)
	tmp259, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.CovYZ = float32(tmp259)
	tmp260, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.CovZZ = float32(tmp260)
	tmp261, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.NSats = tmp261
	tmp262, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Flags = tmp262
	return err
}

/**
 * GPS Time of Week
 */

/**
 * ECEF X coordinate
 */

/**
 * ECEF Y coordinate
 */

/**
 * ECEF Z coordinate
 */

/**
 * Estimated variance of x
 */

/**
 * Estimated covariance of x and y
 */

/**
 * Estimated covariance of x and z
 */

/**
 * Estimated variance of y
 */

/**
 * Estimated covariance of y and z
 */

/**
 * Estimated variance of z
 */

/**
 * Number of satellites used in solution
 */

/**
 * Status flags
 */

/**
 * The position solution message reports absolute Earth Centered Earth
 * Fixed (ECEF) coordinates and the status (single point vs pseudo-absolute
 * RTK) of the position solution. If the rover receiver knows the surveyed
 * position of the base station and has an RTK solution, this reports a
 * pseudo-absolute position solution using the base station position and
 * the rover's RTK baseline vector. The full GPS time is given by the
 * preceding MSG_GPS_TIME with the matching time-of-week (tow).
 */
type Navigation_MsgPosEcefGnss struct {
	Tow uint32
	X float64
	Y float64
	Z float64
	Accuracy uint16
	NSats uint8
	Flags uint8
	_io *kaitai.Stream
	_root *Navigation
	_parent *Sbp_Message
}
func NewNavigation_MsgPosEcefGnss() *Navigation_MsgPosEcefGnss {
	return &Navigation_MsgPosEcefGnss{
	}
}

func (this *Navigation_MsgPosEcefGnss) Read(io *kaitai.Stream, parent *Sbp_Message, root *Navigation) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp263, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.Tow = uint32(tmp263)
	tmp264, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.X = float64(tmp264)
	tmp265, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Y = float64(tmp265)
	tmp266, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Z = float64(tmp266)
	tmp267, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.Accuracy = uint16(tmp267)
	tmp268, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.NSats = tmp268
	tmp269, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Flags = tmp269
	return err
}

/**
 * GPS Time of Week
 */

/**
 * ECEF X coordinate
 */

/**
 * ECEF Y coordinate
 */

/**
 * ECEF Z coordinate
 */

/**
 * Position estimated standard deviation
 */

/**
 * Number of satellites used in solution
 */

/**
 * Status flags
 */

/**
 * This message reports the velocity in local North East Down (NED)
 * coordinates. The NED coordinate system is defined as the local WGS84
 * tangent plane centered at the current position. The full GPS time is
 * given by the preceding MSG_GPS_TIME with the matching time-of-week
 * (tow).
 */
type Navigation_MsgVelNed struct {
	Tow uint32
	N int32
	E int32
	D int32
	HAccuracy uint16
	VAccuracy uint16
	NSats uint8
	Flags uint8
	_io *kaitai.Stream
	_root *Navigation
	_parent *Sbp_Message
}
func NewNavigation_MsgVelNed() *Navigation_MsgVelNed {
	return &Navigation_MsgVelNed{
	}
}

func (this *Navigation_MsgVelNed) Read(io *kaitai.Stream, parent *Sbp_Message, root *Navigation) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp270, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.Tow = uint32(tmp270)
	tmp271, err := this._io.ReadS4le()
	if err != nil {
		return err
	}
	this.N = int32(tmp271)
	tmp272, err := this._io.ReadS4le()
	if err != nil {
		return err
	}
	this.E = int32(tmp272)
	tmp273, err := this._io.ReadS4le()
	if err != nil {
		return err
	}
	this.D = int32(tmp273)
	tmp274, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.HAccuracy = uint16(tmp274)
	tmp275, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.VAccuracy = uint16(tmp275)
	tmp276, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.NSats = tmp276
	tmp277, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Flags = tmp277
	return err
}

/**
 * GPS Time of Week
 */

/**
 * Velocity North coordinate
 */

/**
 * Velocity East coordinate
 */

/**
 * Velocity Down coordinate
 */

/**
 * Horizontal velocity estimated standard deviation
 */

/**
 * Vertical velocity estimated standard deviation
 */

/**
 * Number of satellites used in solution
 */

/**
 * Status flags
 */

/**
 * UTC-GPST leap seconds before and after the most recent (past, or future,
 * for announced insertions) UTC leap second insertion.
 */
type Navigation_MsgUtcLeapSecond struct {
	Reserved0 int16
	Reserved1 int16
	Reserved2 int8
	CountBefore int8
	Reserved3 uint16
	Reserved4 uint16
	RefWn uint16
	RefDn uint8
	CountAfter int8
	_io *kaitai.Stream
	_root *Navigation
	_parent *Sbp_Message
}
func NewNavigation_MsgUtcLeapSecond() *Navigation_MsgUtcLeapSecond {
	return &Navigation_MsgUtcLeapSecond{
	}
}

func (this *Navigation_MsgUtcLeapSecond) Read(io *kaitai.Stream, parent *Sbp_Message, root *Navigation) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp278, err := this._io.ReadS2le()
	if err != nil {
		return err
	}
	this.Reserved0 = int16(tmp278)
	tmp279, err := this._io.ReadS2le()
	if err != nil {
		return err
	}
	this.Reserved1 = int16(tmp279)
	tmp280, err := this._io.ReadS1()
	if err != nil {
		return err
	}
	this.Reserved2 = tmp280
	tmp281, err := this._io.ReadS1()
	if err != nil {
		return err
	}
	this.CountBefore = tmp281
	tmp282, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.Reserved3 = uint16(tmp282)
	tmp283, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.Reserved4 = uint16(tmp283)
	tmp284, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.RefWn = uint16(tmp284)
	tmp285, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.RefDn = tmp285
	tmp286, err := this._io.ReadS1()
	if err != nil {
		return err
	}
	this.CountAfter = tmp286
	return err
}

/**
 * Reserved.
 */

/**
 * Reserved.
 */

/**
 * Reserved.
 */

/**
 * Leap second count before insertion.
 */

/**
 * Reserved.
 */

/**
 * Reserved.
 */

/**
 * Leap second reference GPS week number.
 */

/**
 * Leap second reference day number.
 */

/**
 * Leap second count after insertion.
 */

/**
 * This message reports the GPS time, representing the time since the GPS
 * epoch began on midnight January 6, 1980 UTC. GPS time counts the weeks
 * and seconds of the week. The weeks begin at the Saturday/Sunday
 * transition. GPS week 0 began at the beginning of the GPS time scale.
 * 
 * Within each week number, the GPS time of the week is between between 0
 * and 604800 seconds (=60*60*24*7). Note that GPS time does not accumulate
 * leap seconds, and as of now, has a small offset from UTC. In a message
 * stream, this message precedes a set of other navigation messages
 * referenced to the same time (but lacking the ns field) and indicates a
 * more precise time of these messages.
 */
type Navigation_MsgGpsTimeDepA struct {
	Wn uint16
	Tow uint32
	NsResidual int32
	Flags uint8
	_io *kaitai.Stream
	_root *Navigation
	_parent *Sbp_Message
}
func NewNavigation_MsgGpsTimeDepA() *Navigation_MsgGpsTimeDepA {
	return &Navigation_MsgGpsTimeDepA{
	}
}

func (this *Navigation_MsgGpsTimeDepA) Read(io *kaitai.Stream, parent *Sbp_Message, root *Navigation) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp287, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.Wn = uint16(tmp287)
	tmp288, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.Tow = uint32(tmp288)
	tmp289, err := this._io.ReadS4le()
	if err != nil {
		return err
	}
	this.NsResidual = int32(tmp289)
	tmp290, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Flags = tmp290
	return err
}

/**
 * GPS week number
 */

/**
 * GPS time of week rounded to the nearest millisecond
 */

/**
 * Nanosecond residual of millisecond-rounded TOW (ranges from -500000
 * to 500000)
 */

/**
 * Status flags (reserved)
 */

/**
 * This position solution message reports the absolute geodetic coordinates
 * and the status (single point vs pseudo-absolute RTK) of the position
 * solution. If the rover receiver knows the surveyed position of the base
 * station and has an RTK solution, this reports a pseudo-absolute position
 * solution using the base station position and the rover's RTK baseline
 * vector. The full GPS time is given by the preceding MSG_GPS_TIME with
 * the matching time-of-week (tow).
 */
type Navigation_MsgPosLlhGnss struct {
	Tow uint32
	Lat float64
	Lon float64
	Height float64
	HAccuracy uint16
	VAccuracy uint16
	NSats uint8
	Flags uint8
	_io *kaitai.Stream
	_root *Navigation
	_parent *Sbp_Message
}
func NewNavigation_MsgPosLlhGnss() *Navigation_MsgPosLlhGnss {
	return &Navigation_MsgPosLlhGnss{
	}
}

func (this *Navigation_MsgPosLlhGnss) Read(io *kaitai.Stream, parent *Sbp_Message, root *Navigation) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp291, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.Tow = uint32(tmp291)
	tmp292, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Lat = float64(tmp292)
	tmp293, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Lon = float64(tmp293)
	tmp294, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Height = float64(tmp294)
	tmp295, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.HAccuracy = uint16(tmp295)
	tmp296, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.VAccuracy = uint16(tmp296)
	tmp297, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.NSats = tmp297
	tmp298, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Flags = tmp298
	return err
}

/**
 * GPS Time of Week
 */

/**
 * Latitude
 */

/**
 * Longitude
 */

/**
 * Height above WGS84 ellipsoid
 */

/**
 * Horizontal position estimated standard deviation
 */

/**
 * Vertical position estimated standard deviation
 */

/**
 * Number of satellites used in solution.
 */

/**
 * Status flags
 */

/**
 * This message reports the Universal Coordinated Time (UTC).  Note the
 * flags which indicate the source of the UTC offset value and source of
 * the time fix.
 */
type Navigation_MsgUtcTimeGnss struct {
	Flags uint8
	Tow uint32
	Year uint16
	Month uint8
	Day uint8
	Hours uint8
	Minutes uint8
	Seconds uint8
	Ns uint32
	_io *kaitai.Stream
	_root *Navigation
	_parent *Sbp_Message
}
func NewNavigation_MsgUtcTimeGnss() *Navigation_MsgUtcTimeGnss {
	return &Navigation_MsgUtcTimeGnss{
	}
}

func (this *Navigation_MsgUtcTimeGnss) Read(io *kaitai.Stream, parent *Sbp_Message, root *Navigation) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp299, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Flags = tmp299
	tmp300, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.Tow = uint32(tmp300)
	tmp301, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.Year = uint16(tmp301)
	tmp302, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Month = tmp302
	tmp303, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Day = tmp303
	tmp304, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Hours = tmp304
	tmp305, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Minutes = tmp305
	tmp306, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Seconds = tmp306
	tmp307, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.Ns = uint32(tmp307)
	return err
}

/**
 * Indicates source and time validity
 */

/**
 * GPS time of week rounded to the nearest millisecond
 */

/**
 * Year
 */

/**
 * Month (range 1 .. 12)
 */

/**
 * days in the month (range 1-31)
 */

/**
 * hours of day (range 0-23)
 */

/**
 * minutes of hour (range 0-59)
 */

/**
 * seconds of minute (range 0-60) rounded down
 */

/**
 * nanoseconds of second (range 0-999999999)
 */

/**
 * This message reports the receiver course over ground (COG) and speed
 * over  ground (SOG) based on the horizontal (N-E) components of the NED
 * velocity  vector. It also includes the vertical velocity coordinate. A
 * flag is provided to indicate whether the COG value has been frozen. When
 * the flag is set to true, the COG field is set to its last valid value
 * until  the system exceeds a minimum velocity threshold. No other fields
 * are  affected by this flag.  The NED coordinate system is defined as the
 * local WGS84 tangent  plane centered at the current position. The full
 * GPS time is given by the  preceding MSG_GPS_TIME with the matching time-
 * of-week (tow). Note: course over ground represents the receiver's
 * direction of travel,  but not necessarily the device heading.
 */
type Navigation_MsgVelCog struct {
	Tow uint32
	Cog uint32
	Sog uint32
	VUp int32
	CogAccuracy uint32
	SogAccuracy uint32
	VUpAccuracy uint32
	Flags uint16
	_io *kaitai.Stream
	_root *Navigation
	_parent *Sbp_Message
}
func NewNavigation_MsgVelCog() *Navigation_MsgVelCog {
	return &Navigation_MsgVelCog{
	}
}

func (this *Navigation_MsgVelCog) Read(io *kaitai.Stream, parent *Sbp_Message, root *Navigation) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp308, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.Tow = uint32(tmp308)
	tmp309, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.Cog = uint32(tmp309)
	tmp310, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.Sog = uint32(tmp310)
	tmp311, err := this._io.ReadS4le()
	if err != nil {
		return err
	}
	this.VUp = int32(tmp311)
	tmp312, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.CogAccuracy = uint32(tmp312)
	tmp313, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.SogAccuracy = uint32(tmp313)
	tmp314, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.VUpAccuracy = uint32(tmp314)
	tmp315, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.Flags = uint16(tmp315)
	return err
}

/**
 * GPS Time of Week
 */

/**
 * Course over ground relative to north direction
 */

/**
 * Speed over ground (based on horizontal velocity)
 */

/**
 * Vertical velocity component (positive up)
 */

/**
 * Course over ground estimated standard deviation
 */

/**
 * Speed over ground estimated standard deviation
 */

/**
 * Vertical velocity estimated standard deviation
 */

/**
 * Status flags
 */

/**
 * This message reports the baseline solution in North East Down (NED)
 * coordinates. This baseline is the relative vector distance from the base
 * station to the rover receiver, and NED coordinate system is defined at
 * the local WGS84 tangent plane centered at the base station position.
 * The full GPS time is given by the preceding MSG_GPS_TIME with the
 * matching time-of-week (tow).
 */
type Navigation_MsgBaselineNed struct {
	Tow uint32
	N int32
	E int32
	D int32
	HAccuracy uint16
	VAccuracy uint16
	NSats uint8
	Flags uint8
	_io *kaitai.Stream
	_root *Navigation
	_parent *Sbp_Message
}
func NewNavigation_MsgBaselineNed() *Navigation_MsgBaselineNed {
	return &Navigation_MsgBaselineNed{
	}
}

func (this *Navigation_MsgBaselineNed) Read(io *kaitai.Stream, parent *Sbp_Message, root *Navigation) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp316, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.Tow = uint32(tmp316)
	tmp317, err := this._io.ReadS4le()
	if err != nil {
		return err
	}
	this.N = int32(tmp317)
	tmp318, err := this._io.ReadS4le()
	if err != nil {
		return err
	}
	this.E = int32(tmp318)
	tmp319, err := this._io.ReadS4le()
	if err != nil {
		return err
	}
	this.D = int32(tmp319)
	tmp320, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.HAccuracy = uint16(tmp320)
	tmp321, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.VAccuracy = uint16(tmp321)
	tmp322, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.NSats = tmp322
	tmp323, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Flags = tmp323
	return err
}

/**
 * GPS Time of Week
 */

/**
 * Baseline North coordinate
 */

/**
 * Baseline East coordinate
 */

/**
 * Baseline Down coordinate
 */

/**
 * Horizontal position estimated standard deviation
 */

/**
 * Vertical position estimated standard deviation
 */

/**
 * Number of satellites used in solution
 */

/**
 * Status flags
 */

/**
 * This position solution message reports the absolute geodetic coordinates
 * and the status (single point vs pseudo-absolute RTK) of the position
 * solution. If the rover receiver knows the surveyed position of the base
 * station and has an RTK solution, this reports a pseudo-absolute position
 * solution using the base station position and the rover's RTK baseline
 * vector. The full GPS time is given by the preceding MSG_GPS_TIME with
 * the matching time-of-week (tow).
 */
type Navigation_MsgPosLlh struct {
	Tow uint32
	Lat float64
	Lon float64
	Height float64
	HAccuracy uint16
	VAccuracy uint16
	NSats uint8
	Flags uint8
	_io *kaitai.Stream
	_root *Navigation
	_parent *Sbp_Message
}
func NewNavigation_MsgPosLlh() *Navigation_MsgPosLlh {
	return &Navigation_MsgPosLlh{
	}
}

func (this *Navigation_MsgPosLlh) Read(io *kaitai.Stream, parent *Sbp_Message, root *Navigation) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp324, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.Tow = uint32(tmp324)
	tmp325, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Lat = float64(tmp325)
	tmp326, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Lon = float64(tmp326)
	tmp327, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Height = float64(tmp327)
	tmp328, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.HAccuracy = uint16(tmp328)
	tmp329, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.VAccuracy = uint16(tmp329)
	tmp330, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.NSats = tmp330
	tmp331, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Flags = tmp331
	return err
}

/**
 * GPS Time of Week
 */

/**
 * Latitude
 */

/**
 * Longitude
 */

/**
 * Height above WGS84 ellipsoid
 */

/**
 * Horizontal position estimated standard deviation
 */

/**
 * Vertical position estimated standard deviation
 */

/**
 * Number of satellites used in solution.
 */

/**
 * Status flags
 */

/**
 * This message reports the baseline heading pointing from the base station
 * to the rover relative to True North. The full GPS time is given by the
 * preceding MSG_GPS_TIME with the matching time-of-week (tow).
 */
type Navigation_MsgBaselineHeadingDepA struct {
	Tow uint32
	Heading uint32
	NSats uint8
	Flags uint8
	_io *kaitai.Stream
	_root *Navigation
	_parent *Sbp_Message
}
func NewNavigation_MsgBaselineHeadingDepA() *Navigation_MsgBaselineHeadingDepA {
	return &Navigation_MsgBaselineHeadingDepA{
	}
}

func (this *Navigation_MsgBaselineHeadingDepA) Read(io *kaitai.Stream, parent *Sbp_Message, root *Navigation) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp332, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.Tow = uint32(tmp332)
	tmp333, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.Heading = uint32(tmp333)
	tmp334, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.NSats = tmp334
	tmp335, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Flags = tmp335
	return err
}

/**
 * GPS Time of Week
 */

/**
 * Heading
 */

/**
 * Number of satellites used in solution
 */

/**
 * Status flags
 */

/**
 * This message reports the GPS time, representing the time since the GPS
 * epoch began on midnight January 6, 1980 UTC. GPS time counts the weeks
 * and seconds of the week. The weeks begin at the Saturday/Sunday
 * transition. GPS week 0 began at the beginning of the GPS time scale.
 * 
 * Within each week number, the GPS time of the week is between between 0
 * and 604800 seconds (=60*60*24*7). Note that GPS time does not accumulate
 * leap seconds, and as of now, has a small offset from UTC. In a message
 * stream, this message precedes a set of other navigation messages
 * referenced to the same time (but lacking the ns field) and indicates a
 * more precise time of these messages.
 */
type Navigation_MsgGpsTimeGnss struct {
	Wn uint16
	Tow uint32
	NsResidual int32
	Flags uint8
	_io *kaitai.Stream
	_root *Navigation
	_parent *Sbp_Message
}
func NewNavigation_MsgGpsTimeGnss() *Navigation_MsgGpsTimeGnss {
	return &Navigation_MsgGpsTimeGnss{
	}
}

func (this *Navigation_MsgGpsTimeGnss) Read(io *kaitai.Stream, parent *Sbp_Message, root *Navigation) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp336, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.Wn = uint16(tmp336)
	tmp337, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.Tow = uint32(tmp337)
	tmp338, err := this._io.ReadS4le()
	if err != nil {
		return err
	}
	this.NsResidual = int32(tmp338)
	tmp339, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Flags = tmp339
	return err
}

/**
 * GPS week number
 */

/**
 * GPS time of week rounded to the nearest millisecond
 */

/**
 * Nanosecond residual of millisecond-rounded TOW (ranges from -500000
 * to 500000)
 */

/**
 * Status flags (reserved)
 */

/**
 * This message reports the baseline solution in Earth Centered Earth Fixed
 * (ECEF) coordinates. This baseline is the relative vector distance from
 * the base station to the rover receiver. The full GPS time is given by
 * the preceding MSG_GPS_TIME with the matching time-of-week (tow).
 */
type Navigation_MsgBaselineEcefDepA struct {
	Tow uint32
	X int32
	Y int32
	Z int32
	Accuracy uint16
	NSats uint8
	Flags uint8
	_io *kaitai.Stream
	_root *Navigation
	_parent *Sbp_Message
}
func NewNavigation_MsgBaselineEcefDepA() *Navigation_MsgBaselineEcefDepA {
	return &Navigation_MsgBaselineEcefDepA{
	}
}

func (this *Navigation_MsgBaselineEcefDepA) Read(io *kaitai.Stream, parent *Sbp_Message, root *Navigation) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp340, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.Tow = uint32(tmp340)
	tmp341, err := this._io.ReadS4le()
	if err != nil {
		return err
	}
	this.X = int32(tmp341)
	tmp342, err := this._io.ReadS4le()
	if err != nil {
		return err
	}
	this.Y = int32(tmp342)
	tmp343, err := this._io.ReadS4le()
	if err != nil {
		return err
	}
	this.Z = int32(tmp343)
	tmp344, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.Accuracy = uint16(tmp344)
	tmp345, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.NSats = tmp345
	tmp346, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Flags = tmp346
	return err
}

/**
 * GPS Time of Week
 */

/**
 * Baseline ECEF X coordinate
 */

/**
 * Baseline ECEF Y coordinate
 */

/**
 * Baseline ECEF Z coordinate
 */

/**
 * Position accuracy estimate
 */

/**
 * Number of satellites used in solution
 */

/**
 * Status flags
 */

/**
 * This message reports the GPS time, representing the time since the GPS
 * epoch began on midnight January 6, 1980 UTC. GPS time counts the weeks
 * and seconds of the week. The weeks begin at the Saturday/Sunday
 * transition. GPS week 0 began at the beginning of the GPS time scale.
 * 
 * Within each week number, the GPS time of the week is between between 0
 * and 604800 seconds (=60*60*24*7). Note that GPS time does not accumulate
 * leap seconds, and as of now, has a small offset from UTC. In a message
 * stream, this message precedes a set of other navigation messages
 * referenced to the same time (but lacking the ns field) and indicates a
 * more precise time of these messages.
 */
type Navigation_MsgGpsTime struct {
	Wn uint16
	Tow uint32
	NsResidual int32
	Flags uint8
	_io *kaitai.Stream
	_root *Navigation
	_parent *Sbp_Message
}
func NewNavigation_MsgGpsTime() *Navigation_MsgGpsTime {
	return &Navigation_MsgGpsTime{
	}
}

func (this *Navigation_MsgGpsTime) Read(io *kaitai.Stream, parent *Sbp_Message, root *Navigation) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp347, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.Wn = uint16(tmp347)
	tmp348, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.Tow = uint32(tmp348)
	tmp349, err := this._io.ReadS4le()
	if err != nil {
		return err
	}
	this.NsResidual = int32(tmp349)
	tmp350, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Flags = tmp350
	return err
}

/**
 * GPS week number
 */

/**
 * GPS time of week rounded to the nearest millisecond
 */

/**
 * Nanosecond residual of millisecond-rounded TOW (ranges from -500000
 * to 500000)
 */

/**
 * Status flags (reserved)
 */

/**
 * This dilution of precision (DOP) message describes the effect of
 * navigation satellite geometry on positional measurement precision.  The
 * flags field indicated whether the DOP reported corresponds to
 * differential or SPP solution.
 */
type Navigation_MsgDops struct {
	Tow uint32
	Gdop uint16
	Pdop uint16
	Tdop uint16
	Hdop uint16
	Vdop uint16
	Flags uint8
	_io *kaitai.Stream
	_root *Navigation
	_parent *Sbp_Message
}
func NewNavigation_MsgDops() *Navigation_MsgDops {
	return &Navigation_MsgDops{
	}
}

func (this *Navigation_MsgDops) Read(io *kaitai.Stream, parent *Sbp_Message, root *Navigation) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp351, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.Tow = uint32(tmp351)
	tmp352, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.Gdop = uint16(tmp352)
	tmp353, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.Pdop = uint16(tmp353)
	tmp354, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.Tdop = uint16(tmp354)
	tmp355, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.Hdop = uint16(tmp355)
	tmp356, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.Vdop = uint16(tmp356)
	tmp357, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Flags = tmp357
	return err
}

/**
 * GPS Time of Week
 */

/**
 * Geometric Dilution of Precision
 */

/**
 * Position Dilution of Precision
 */

/**
 * Time Dilution of Precision
 */

/**
 * Horizontal Dilution of Precision
 */

/**
 * Vertical Dilution of Precision
 */

/**
 * Indicates the position solution with which the DOPS message
 * corresponds
 */

/**
 * The position solution message reports absolute Earth Centered Earth
 * Fixed (ECEF) coordinates and the status (single point vs pseudo-absolute
 * RTK) of the position solution. If the rover receiver knows the surveyed
 * position of the base station and has an RTK solution, this reports a
 * pseudo-absolute position solution using the base station position and
 * the rover's RTK baseline vector. The full GPS time is given by the
 * preceding MSG_GPS_TIME with the matching time-of-week (tow).
 */
type Navigation_MsgPosEcefDepA struct {
	Tow uint32
	X float64
	Y float64
	Z float64
	Accuracy uint16
	NSats uint8
	Flags uint8
	_io *kaitai.Stream
	_root *Navigation
	_parent *Sbp_Message
}
func NewNavigation_MsgPosEcefDepA() *Navigation_MsgPosEcefDepA {
	return &Navigation_MsgPosEcefDepA{
	}
}

func (this *Navigation_MsgPosEcefDepA) Read(io *kaitai.Stream, parent *Sbp_Message, root *Navigation) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp358, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.Tow = uint32(tmp358)
	tmp359, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.X = float64(tmp359)
	tmp360, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Y = float64(tmp360)
	tmp361, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Z = float64(tmp361)
	tmp362, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.Accuracy = uint16(tmp362)
	tmp363, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.NSats = tmp363
	tmp364, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Flags = tmp364
	return err
}

/**
 * GPS Time of Week
 */

/**
 * ECEF X coordinate
 */

/**
 * ECEF Y coordinate
 */

/**
 * ECEF Z coordinate
 */

/**
 * Position accuracy estimate (not implemented). Defaults to 0.
 */

/**
 * Number of satellites used in solution
 */

/**
 * Status flags
 */
type Navigation_EstimatedHorizontalErrorEllipse struct {
	SemiMajor float32
	SemiMinor float32
	Orientation float32
	_io *kaitai.Stream
	_root *Navigation
	_parent *Navigation_MsgPosLlhAcc
}
func NewNavigation_EstimatedHorizontalErrorEllipse() *Navigation_EstimatedHorizontalErrorEllipse {
	return &Navigation_EstimatedHorizontalErrorEllipse{
	}
}

func (this *Navigation_EstimatedHorizontalErrorEllipse) Read(io *kaitai.Stream, parent *Navigation_MsgPosLlhAcc, root *Navigation) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp365, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.SemiMajor = float32(tmp365)
	tmp366, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.SemiMinor = float32(tmp366)
	tmp367, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.Orientation = float32(tmp367)
	return err
}

/**
 * The semi major axis of the estimated horizontal error ellipse at the
 * user-configured confidence level; zero implies invalid.
 */

/**
 * The semi minor axis of the estimated horizontal error ellipse at the
 * user-configured confidence level; zero implies invalid.
 */

/**
 * The orientation of the semi major axis of the estimated horizontal
 * error ellipse with respect to North.
 */

/**
 * This position solution message reports the absolute geodetic coordinates
 * and the status (single point vs pseudo-absolute RTK) of the position
 * solution as well as the estimated horizontal, vertical, cross-track and
 * along-track errors.  The position information and Fix Mode flags  follow
 * the MSG_POS_LLH message. Since the covariance matrix is computed in the
 * local-level North, East, Down frame, the estimated error terms follow
 * that convention.
 * 
 * The estimated errors are reported at a user-configurable confidence
 * level. The user-configured percentile is encoded in the percentile
 * field.
 */
type Navigation_MsgPosLlhAcc struct {
	Tow uint32
	Lat float64
	Lon float64
	Height float64
	OrthometricHeight float64
	HAccuracy float32
	VAccuracy float32
	CtAccuracy float32
	AtAccuracy float32
	HEllipse *Navigation_EstimatedHorizontalErrorEllipse
	ConfidenceAndGeoid uint8
	NSats uint8
	Flags uint8
	_io *kaitai.Stream
	_root *Navigation
	_parent *Sbp_Message
}
func NewNavigation_MsgPosLlhAcc() *Navigation_MsgPosLlhAcc {
	return &Navigation_MsgPosLlhAcc{
	}
}

func (this *Navigation_MsgPosLlhAcc) Read(io *kaitai.Stream, parent *Sbp_Message, root *Navigation) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp368, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.Tow = uint32(tmp368)
	tmp369, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Lat = float64(tmp369)
	tmp370, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Lon = float64(tmp370)
	tmp371, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.Height = float64(tmp371)
	tmp372, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.OrthometricHeight = float64(tmp372)
	tmp373, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.HAccuracy = float32(tmp373)
	tmp374, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.VAccuracy = float32(tmp374)
	tmp375, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.CtAccuracy = float32(tmp375)
	tmp376, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.AtAccuracy = float32(tmp376)
	tmp377 := NewNavigation_EstimatedHorizontalErrorEllipse()
	err = tmp377.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.HEllipse = tmp377
	tmp378, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.ConfidenceAndGeoid = tmp378
	tmp379, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.NSats = tmp379
	tmp380, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Flags = tmp380
	return err
}

/**
 * GPS Time of Week
 */

/**
 * Latitude
 */

/**
 * Longitude
 */

/**
 * Height above WGS84 ellipsoid
 */

/**
 * Height above the geoid (i.e. height above mean sea level). See
 * confidence_and_geoid for geoid model used.
 */

/**
 * Estimated horizontal error at the user-configured confidence level;
 * zero implies invalid.
 */

/**
 * Estimated vertical error at the user-configured confidence level;
 * zero implies invalid.
 */

/**
 * Estimated cross-track error at the user-configured confidence level;
 * zero implies invalid.
 */

/**
 * Estimated along-track error at the user-configured confidence level;
 * zero implies invalid.
 */

/**
 * The estimated horizontal error ellipse at the user-configured
 * confidence level.
 */

/**
 * The lower bits describe the configured confidence level for the
 * estimated position error. The middle bits describe the geoid model
 * used to calculate the orthometric height.
 */

/**
 * Number of satellites used in solution.
 */

/**
 * Status flags
 */
