// Code generated by kaitai-struct-compiler from a .ksy source file. DO NOT EDIT.

import "github.com/kaitai-io/kaitai_struct_go_runtime/kaitai"

type Orientation struct {
	_io *kaitai.Stream
	_root *Orientation
	_parent interface{}
}
func NewOrientation() *Orientation {
	return &Orientation{
	}
}

func (this *Orientation) Read(io *kaitai.Stream, parent interface{}, root *Orientation) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	return err
}

/**
 * This message reports the baseline heading pointing from the base station
 * to the rover relative to True North. The full GPS time is given by the
 * preceding MSG_GPS_TIME with the matching time-of-week (tow). It is
 * intended that time-matched RTK mode is used when the base station is
 * moving.
 */
type Orientation_MsgBaselineHeading struct {
	Tow uint32
	Heading uint32
	NSats uint8
	Flags uint8
	_io *kaitai.Stream
	_root *Orientation
	_parent *Sbp_Message
}
func NewOrientation_MsgBaselineHeading() *Orientation_MsgBaselineHeading {
	return &Orientation_MsgBaselineHeading{
	}
}

func (this *Orientation_MsgBaselineHeading) Read(io *kaitai.Stream, parent *Sbp_Message, root *Orientation) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp1, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.Tow = uint32(tmp1)
	tmp2, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.Heading = uint32(tmp2)
	tmp3, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.NSats = tmp3
	tmp4, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Flags = tmp4
	return err
}

/**
 * GPS Time of Week
 */

/**
 * Heading
 */

/**
 * Number of satellites used in solution
 */

/**
 * Status flags
 */

/**
 * This message reports the quaternion vector describing the vehicle body
 * frame's orientation with respect to a local-level NED frame. The
 * components of the vector should sum to a unit vector assuming that the
 * LSB of each component as a value of 2^-31. This message will only be
 * available in future INS versions of Swift Products and is not produced
 * by Piksi Multi or Duro.
 */
type Orientation_MsgOrientQuat struct {
	Tow uint32
	W int32
	X int32
	Y int32
	Z int32
	WAccuracy float32
	XAccuracy float32
	YAccuracy float32
	ZAccuracy float32
	Flags uint8
	_io *kaitai.Stream
	_root *Orientation
	_parent *Sbp_Message
}
func NewOrientation_MsgOrientQuat() *Orientation_MsgOrientQuat {
	return &Orientation_MsgOrientQuat{
	}
}

func (this *Orientation_MsgOrientQuat) Read(io *kaitai.Stream, parent *Sbp_Message, root *Orientation) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp5, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.Tow = uint32(tmp5)
	tmp6, err := this._io.ReadS4le()
	if err != nil {
		return err
	}
	this.W = int32(tmp6)
	tmp7, err := this._io.ReadS4le()
	if err != nil {
		return err
	}
	this.X = int32(tmp7)
	tmp8, err := this._io.ReadS4le()
	if err != nil {
		return err
	}
	this.Y = int32(tmp8)
	tmp9, err := this._io.ReadS4le()
	if err != nil {
		return err
	}
	this.Z = int32(tmp9)
	tmp10, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.WAccuracy = float32(tmp10)
	tmp11, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.XAccuracy = float32(tmp11)
	tmp12, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.YAccuracy = float32(tmp12)
	tmp13, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.ZAccuracy = float32(tmp13)
	tmp14, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Flags = tmp14
	return err
}

/**
 * GPS Time of Week
 */

/**
 * Real component
 */

/**
 * 1st imaginary component
 */

/**
 * 2nd imaginary component
 */

/**
 * 3rd imaginary component
 */

/**
 * Estimated standard deviation of w
 */

/**
 * Estimated standard deviation of x
 */

/**
 * Estimated standard deviation of y
 */

/**
 * Estimated standard deviation of z
 */

/**
 * Status flags
 */

/**
 * This message reports the yaw, pitch, and roll angles of the vehicle body
 * frame. The rotations should applied intrinsically in the order yaw,
 * pitch, and roll in order to rotate the from a frame aligned with the
 * local-level NED frame to the vehicle body frame.  This message will only
 * be available in future INS versions of Swift Products and is not
 * produced by Piksi Multi or Duro.
 */
type Orientation_MsgOrientEuler struct {
	Tow uint32
	Roll int32
	Pitch int32
	Yaw int32
	RollAccuracy float32
	PitchAccuracy float32
	YawAccuracy float32
	Flags uint8
	_io *kaitai.Stream
	_root *Orientation
	_parent *Sbp_Message
}
func NewOrientation_MsgOrientEuler() *Orientation_MsgOrientEuler {
	return &Orientation_MsgOrientEuler{
	}
}

func (this *Orientation_MsgOrientEuler) Read(io *kaitai.Stream, parent *Sbp_Message, root *Orientation) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp15, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.Tow = uint32(tmp15)
	tmp16, err := this._io.ReadS4le()
	if err != nil {
		return err
	}
	this.Roll = int32(tmp16)
	tmp17, err := this._io.ReadS4le()
	if err != nil {
		return err
	}
	this.Pitch = int32(tmp17)
	tmp18, err := this._io.ReadS4le()
	if err != nil {
		return err
	}
	this.Yaw = int32(tmp18)
	tmp19, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.RollAccuracy = float32(tmp19)
	tmp20, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.PitchAccuracy = float32(tmp20)
	tmp21, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.YawAccuracy = float32(tmp21)
	tmp22, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Flags = tmp22
	return err
}

/**
 * GPS Time of Week
 */

/**
 * rotation about the forward axis of the vehicle
 */

/**
 * rotation about the rightward axis of the vehicle
 */

/**
 * rotation about the downward axis of the vehicle
 */

/**
 * Estimated standard deviation of roll
 */

/**
 * Estimated standard deviation of pitch
 */

/**
 * Estimated standard deviation of yaw
 */

/**
 * Status flags
 */

/**
 * This message reports the orientation rates in the vehicle body frame.
 * The values represent the measurements a strapped down gyroscope would
 * make and are not equivalent to the time derivative of the Euler angles.
 * The orientation and origin of the user frame is specified via device
 * settings. By convention, the vehicle x-axis is expected to be aligned
 * with the forward direction, while the vehicle y-axis is expected to be
 * aligned with the right direction, and the vehicle z-axis should be
 * aligned with the down direction. This message will only be available in
 * future INS versions of Swift Products and is not produced by Piksi Multi
 * or Duro.
 */
type Orientation_MsgAngularRate struct {
	Tow uint32
	X int32
	Y int32
	Z int32
	Flags uint8
	_io *kaitai.Stream
	_root *Orientation
	_parent *Sbp_Message
}
func NewOrientation_MsgAngularRate() *Orientation_MsgAngularRate {
	return &Orientation_MsgAngularRate{
	}
}

func (this *Orientation_MsgAngularRate) Read(io *kaitai.Stream, parent *Sbp_Message, root *Orientation) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp23, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.Tow = uint32(tmp23)
	tmp24, err := this._io.ReadS4le()
	if err != nil {
		return err
	}
	this.X = int32(tmp24)
	tmp25, err := this._io.ReadS4le()
	if err != nil {
		return err
	}
	this.Y = int32(tmp25)
	tmp26, err := this._io.ReadS4le()
	if err != nil {
		return err
	}
	this.Z = int32(tmp26)
	tmp27, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Flags = tmp27
	return err
}

/**
 * GPS Time of Week
 */

/**
 * angular rate about x axis
 */

/**
 * angular rate about y axis
 */

/**
 * angular rate about z axis
 */

/**
 * Status flags
 */
