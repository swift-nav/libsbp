// Code generated by kaitai-struct-compiler from a .ksy source file. DO NOT EDIT.

import "github.com/kaitai-io/kaitai_struct_go_runtime/kaitai"

type Sbas struct {
	_io *kaitai.Stream
	_root *Sbas
	_parent interface{}
}
func NewSbas() *Sbas {
	return &Sbas{
	}
}

func (this *Sbas) Read(io *kaitai.Stream, parent interface{}, root *Sbas) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	return err
}

/**
 * This message is sent once per second per SBAS satellite. ME checks the
 * parity of the data block and sends only blocks that pass the check.
 */
type Sbas_MsgSbasRaw struct {
	Sid *Gnss_GnssSignal
	Tow uint32
	MessageType uint8
	Data []uint8
	_io *kaitai.Stream
	_root *Sbas
	_parent *Sbp_Message
}
func NewSbas_MsgSbasRaw() *Sbas_MsgSbasRaw {
	return &Sbas_MsgSbasRaw{
	}
}

func (this *Sbas_MsgSbasRaw) Read(io *kaitai.Stream, parent *Sbp_Message, root *Sbas) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp1 := NewGnss_GnssSignal()
	err = tmp1.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.Sid = tmp1
	tmp2, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.Tow = uint32(tmp2)
	tmp3, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.MessageType = tmp3
	for i := 0; i < int(27); i++ {
		_ = i
		tmp4, err := this._io.ReadU1()
		if err != nil {
			return err
		}
		this.Data = append(this.Data, tmp4)
	}
	return err
}

/**
 * GNSS signal identifier.
 */

/**
 * GPS time-of-week at the start of the data block.
 */

/**
 * SBAS message type (0-63)
 */

/**
 * Raw SBAS data field of 212 bits (last byte padded with zeros).
 */
