// Code generated by kaitai-struct-compiler from a .ksy source file. DO NOT EDIT.

import "github.com/kaitai-io/kaitai_struct_go_runtime/kaitai"

type Ndb struct {
	_io *kaitai.Stream
	_root *Ndb
	_parent interface{}
}
func NewNdb() *Ndb {
	return &Ndb{
	}
}

func (this *Ndb) Read(io *kaitai.Stream, parent interface{}, root *Ndb) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	return err
}

/**
 * This message is sent out when an object is stored into NDB. If needed
 * message could also be sent out when fetching an object from NDB.
 */
type Ndb_MsgNdbEvent struct {
	RecvTime uint64
	Event uint8
	ObjectType uint8
	Result uint8
	DataSource uint8
	ObjectSid *Gnss_GnssSignal
	SrcSid *Gnss_GnssSignal
	OriginalSender uint16
	_io *kaitai.Stream
	_root *Ndb
	_parent *Sbp_SbpMessage
}
func NewNdb_MsgNdbEvent() *Ndb_MsgNdbEvent {
	return &Ndb_MsgNdbEvent{
	}
}

func (this *Ndb_MsgNdbEvent) Read(io *kaitai.Stream, parent *Sbp_SbpMessage, root *Ndb) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp1, err := this._io.ReadU8le()
	if err != nil {
		return err
	}
	this.RecvTime = uint64(tmp1)
	tmp2, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Event = tmp2
	tmp3, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.ObjectType = tmp3
	tmp4, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Result = tmp4
	tmp5, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.DataSource = tmp5
	tmp6 := NewGnss_GnssSignal()
	err = tmp6.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.ObjectSid = tmp6
	tmp7 := NewGnss_GnssSignal()
	err = tmp7.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.SrcSid = tmp7
	tmp8, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.OriginalSender = uint16(tmp8)
	return err
}

/**
 * HW time in milliseconds.
 */

/**
 * Event type.
 */

/**
 * Event object type.
 */

/**
 * Event result.
 */

/**
 * Data source for STORE event, reserved for other events.
 */

/**
 * GNSS signal identifier, If object_type is Ephemeris OR Almanac, sid
 * indicates for which signal the object belongs to. Reserved in other
 * cases.
 */

/**
 * GNSS signal identifier, If object_type is Almanac, Almanac WN, Iono
 * OR L2C capabilities AND data_source is NDB_DS_RECEIVER sid indicates
 * from which SV data was decoded. Reserved in other cases.
 */

/**
 * A unique identifier of the sending hardware. For v1.0, set to the 2
 * least significant bytes of the device serial number, valid only if
 * data_source is NDB_DS_SBP. Reserved in case of other data_source.
 */
