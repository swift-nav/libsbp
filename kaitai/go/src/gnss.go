// Code generated by kaitai-struct-compiler from a .ksy source file. DO NOT EDIT.

import "github.com/kaitai-io/kaitai_struct_go_runtime/kaitai"

type Gnss struct {
	_io *kaitai.Stream
	_root *Gnss
	_parent interface{}
}
func NewGnss() *Gnss {
	return &Gnss{
	}
}

func (this *Gnss) Read(io *kaitai.Stream, parent interface{}, root *Gnss) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	return err
}

/**
 * Deprecated.
 */
type Gnss_GnssSignalDep struct {
	Sat uint16
	Code uint8
	Reserved uint8
	_io *kaitai.Stream
	_root *Gnss
	_parent interface{}
}
func NewGnss_GnssSignalDep() *Gnss_GnssSignalDep {
	return &Gnss_GnssSignalDep{
	}
}

func (this *Gnss_GnssSignalDep) Read(io *kaitai.Stream, parent interface{}, root *Gnss) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp1, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.Sat = uint16(tmp1)
	tmp2, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Code = tmp2
	tmp3, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Reserved = tmp3
	return err
}

/**
 * Constellation-specific satellite identifier.
 * 
 * Note: unlike GnssSignal, GPS satellites are encoded as (PRN - 1).
 * Other constellations do not have this offset.
 */

/**
 * Signal constellation, band and code
 */

/**
 * Reserved
 */

/**
 * Carrier phase measurement in cycles represented as a 40-bit fixed point
 * number with Q32.8 layout, i.e. 32-bits of whole cycles and 8-bits of
 * fractional cycles. This phase has the same sign as the pseudorange.
 */
type Gnss_CarrierPhase struct {
	I int32
	F uint8
	_io *kaitai.Stream
	_root *Gnss
	_parent interface{}
}
func NewGnss_CarrierPhase() *Gnss_CarrierPhase {
	return &Gnss_CarrierPhase{
	}
}

func (this *Gnss_CarrierPhase) Read(io *kaitai.Stream, parent interface{}, root *Gnss) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp4, err := this._io.ReadS4le()
	if err != nil {
		return err
	}
	this.I = int32(tmp4)
	tmp5, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.F = tmp5
	return err
}

/**
 * Carrier phase whole cycles
 */

/**
 * Carrier phase fractional part
 */

/**
 * A wire-appropriate GPS time, defined as the number of milliseconds since
 * beginning of the week on the Saturday/Sunday transition.
 */
type Gnss_GpsTimeDep struct {
	Tow uint32
	Wn uint16
	_io *kaitai.Stream
	_root *Gnss
	_parent interface{}
}
func NewGnss_GpsTimeDep() *Gnss_GpsTimeDep {
	return &Gnss_GpsTimeDep{
	}
}

func (this *Gnss_GpsTimeDep) Read(io *kaitai.Stream, parent interface{}, root *Gnss) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp6, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.Tow = uint32(tmp6)
	tmp7, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.Wn = uint16(tmp7)
	return err
}

/**
 * Milliseconds since start of GPS week
 */

/**
 * GPS week number
 */

/**
 * Signal identifier containing constellation, band, and satellite
 * identifier.
 */
type Gnss_GnssSignal struct {
	Sat uint8
	Code uint8
	_io *kaitai.Stream
	_root *Gnss
	_parent interface{}
}
func NewGnss_GnssSignal() *Gnss_GnssSignal {
	return &Gnss_GnssSignal{
	}
}

func (this *Gnss_GnssSignal) Read(io *kaitai.Stream, parent interface{}, root *Gnss) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp8, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Sat = tmp8
	tmp9, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Code = tmp9
	return err
}

/**
 * Constellation-specific satellite id. For GLO can either be (100+FCN)
 * where FCN is in [-7,+6] or the Slot ID in [1,28].
 */

/**
 * Signal constellation, band and code
 */

/**
 * A wire-appropriate receiver clock time, defined as the time since the
 * beginning of the week on the Saturday/Sunday transition. In most cases,
 * observations are epoch aligned so ns field will be 0.
 */
type Gnss_GpsTime struct {
	Tow uint32
	NsResidual int32
	Wn uint16
	_io *kaitai.Stream
	_root *Gnss
	_parent interface{}
}
func NewGnss_GpsTime() *Gnss_GpsTime {
	return &Gnss_GpsTime{
	}
}

func (this *Gnss_GpsTime) Read(io *kaitai.Stream, parent interface{}, root *Gnss) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp10, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.Tow = uint32(tmp10)
	tmp11, err := this._io.ReadS4le()
	if err != nil {
		return err
	}
	this.NsResidual = int32(tmp11)
	tmp12, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.Wn = uint16(tmp12)
	return err
}

/**
 * Milliseconds since start of GPS week
 */

/**
 * Nanosecond residual of millisecond-rounded TOW (ranges from -500000
 * to 500000)
 */

/**
 * GPS week number
 */

/**
 * A GPS time, defined as the number of seconds since beginning of the week
 * on the Saturday/Sunday transition.
 */
type Gnss_GpsTimeSec struct {
	Tow uint32
	Wn uint16
	_io *kaitai.Stream
	_root *Gnss
	_parent interface{}
}
func NewGnss_GpsTimeSec() *Gnss_GpsTimeSec {
	return &Gnss_GpsTimeSec{
	}
}

func (this *Gnss_GpsTimeSec) Read(io *kaitai.Stream, parent interface{}, root *Gnss) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp13, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.Tow = uint32(tmp13)
	tmp14, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.Wn = uint16(tmp14)
	return err
}

/**
 * Seconds since start of GPS week
 */

/**
 * GPS week number
 */

/**
 * A (Constellation ID, satellite ID) tuple that uniquely identifies a
 * space vehicle.
 */
type Gnss_SvId struct {
	SatId uint8
	Constellation uint8
	_io *kaitai.Stream
	_root *Gnss
	_parent interface{}
}
func NewGnss_SvId() *Gnss_SvId {
	return &Gnss_SvId{
	}
}

func (this *Gnss_SvId) Read(io *kaitai.Stream, parent interface{}, root *Gnss) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp15, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.SatId = tmp15
	tmp16, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Constellation = tmp16
	return err
}

/**
 * Constellation-specific satellite id. For GLO can either be (100+FCN)
 * where FCN is in [-7,+6] or the Slot ID in [1,28].
 */

/**
 * Constellation ID to which the SV belongs
 */
