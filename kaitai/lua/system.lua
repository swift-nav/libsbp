-- This is a generated file! Please edit source .ksy file and use kaitai-struct-compiler to rebuild
--
-- This file is compatible with Lua 5.3

local class = require("class")
require("kaitaistruct")
local str_decode = require("string_decode")

System = class.class(KaitaiStruct)

function System:_init(io, parent, root)
  KaitaiStruct._init(self, io)
  self._parent = parent
  self._root = root or self
  self:_read()
end

function System:_read()
end


-- 
-- The heartbeat message is sent periodically to inform the host or other
-- attached devices that the system is running. It is used to monitor
-- system malfunctions. It also contains status flags that indicate to the
-- host the status of the system and whether it is operating correctly.
-- Currently, the expected heartbeat interval is 1 sec.
-- 
-- The system error flag is used to indicate that an error has occurred in
-- the system. To determine the source of the error, the remaining error
-- flags should be inspected.
System.MsgHeartbeat = class.class(KaitaiStruct)

function System.MsgHeartbeat:_init(io, parent, root)
  KaitaiStruct._init(self, io)
  self._parent = parent
  self._root = root or self
  self:_read()
end

function System.MsgHeartbeat:_read()
  self.flags = self._io:read_u4le()
end

-- 
-- Status flags

-- 
-- The status journal message contains past status reports (see
-- MSG_STATUS_REPORT) and functions as a error/event storage for telemetry
-- purposes.
System.MsgStatusJournal = class.class(KaitaiStruct)

function System.MsgStatusJournal:_init(io, parent, root)
  KaitaiStruct._init(self, io)
  self._parent = parent
  self._root = root or self
  self:_read()
end

function System.MsgStatusJournal:_read()
  self.reporting_system = self._io:read_u2le()
  self.sbp_version = self._io:read_u2le()
  self.total_status_reports = self._io:read_u4le()
  self.sequence_descriptor = self._io:read_u1()
  self.journal = {}
  local i = 0
  while not self._io:is_eof() do
    self.journal[i + 1] = System.StatusJournalItem(self._io, self, self._root)
    i = i + 1
  end
end

-- 
-- Identity of reporting system
-- 
-- SBP protocol version
-- 
-- Total number of status reports sent since system startup
-- 
-- Index and number of messages in this sequence. First nibble is the
-- size of the sequence (n), second nibble is the zero-indexed counter
-- (ith packet of n)
-- 
-- Status journal

-- 
-- The INS status message describes the state of the operation and
-- initialization of the inertial navigation system.
System.MsgInsStatus = class.class(KaitaiStruct)

function System.MsgInsStatus:_init(io, parent, root)
  KaitaiStruct._init(self, io)
  self._parent = parent
  self._root = root or self
  self:_read()
end

function System.MsgInsStatus:_read()
  self.flags = self._io:read_u4le()
end

-- 
-- Status flags

-- 
-- The GNSS time offset message contains the information that is needed to
-- translate messages tagged with a local timestamp (e.g. IMU or wheeltick
-- messages) to GNSS time for the sender producing this message.
System.MsgGnssTimeOffset = class.class(KaitaiStruct)

function System.MsgGnssTimeOffset:_init(io, parent, root)
  KaitaiStruct._init(self, io)
  self._parent = parent
  self._root = root or self
  self:_read()
end

function System.MsgGnssTimeOffset:_read()
  self.weeks = self._io:read_s2le()
  self.milliseconds = self._io:read_s4le()
  self.microseconds = self._io:read_s2le()
  self.flags = self._io:read_u1()
end

-- 
-- Weeks portion of the time offset
-- 
-- Milliseconds portion of the time offset
-- 
-- Microseconds portion of the time offset
-- 
-- Status flags (reserved)

-- 
-- The CSAC telemetry message has an implementation defined telemetry
-- string from a device. It is not produced or available on general Swift
-- Products. It is intended to be a low rate message for status purposes.
System.MsgCsacTelemetry = class.class(KaitaiStruct)

function System.MsgCsacTelemetry:_init(io, parent, root)
  KaitaiStruct._init(self, io)
  self._parent = parent
  self._root = root or self
  self:_read()
end

function System.MsgCsacTelemetry:_read()
  self.id = self._io:read_u1()
  self.telemetry = str_decode.decode(self._io:read_bytes_full(), "ascii")
end

-- 
-- Index representing the type of telemetry in use.  It is
-- implementation defined.
-- 
-- Comma separated list of values as defined by the index

-- 
-- The PPS time message contains the value of the sender's local time in
-- microseconds at the moment a pulse is detected on the PPS input. This is
-- to be used for syncronisation of sensor data sampled with a local
-- timestamp (e.g. IMU or wheeltick messages) where GNSS time is unknown to
-- the sender.
-- 
-- The local time used to timestamp the PPS pulse must be generated by the
-- same clock which is used to timestamp the IMU/wheel sensor data and
-- should follow the same roll-over rules.  A separate MSG_PPS_TIME message
-- should be sent for each source of sensor data which uses PPS-relative
-- timestamping.  The sender ID for each of these MSG_PPS_TIME messages
-- should match the sender ID of the respective sensor data.
System.MsgPpsTime = class.class(KaitaiStruct)

function System.MsgPpsTime:_init(io, parent, root)
  KaitaiStruct._init(self, io)
  self._parent = parent
  self._root = root or self
  self:_read()
end

function System.MsgPpsTime:_read()
  self.time = self._io:read_u8le()
  self.flags = self._io:read_u1()
end

-- 
-- Local time in microseconds
-- 
-- Status flags

-- 
-- The INS update status message contains information about executed and
-- rejected INS updates. This message is expected to be extended in the
-- future as new types of measurements are being added.
System.MsgInsUpdates = class.class(KaitaiStruct)

function System.MsgInsUpdates:_init(io, parent, root)
  KaitaiStruct._init(self, io)
  self._parent = parent
  self._root = root or self
  self:_read()
end

function System.MsgInsUpdates:_read()
  self.tow = self._io:read_u4le()
  self.gnsspos = self._io:read_u1()
  self.gnssvel = self._io:read_u1()
  self.wheelticks = self._io:read_u1()
  self.speed = self._io:read_u1()
  self.nhc = self._io:read_u1()
  self.zerovel = self._io:read_u1()
end

-- 
-- GPS Time of Week
-- 
-- GNSS position update status flags
-- 
-- GNSS velocity update status flags
-- 
-- Wheelticks update status flags
-- 
-- Wheelticks update status flags
-- 
-- NHC update status flags
-- 
-- Zero velocity update status flags

-- 
-- This message provides information about the receipt of Differential
-- corrections.  It is expected to be sent with each receipt of a complete
-- corrections packet.
System.MsgDgnssStatus = class.class(KaitaiStruct)

function System.MsgDgnssStatus:_init(io, parent, root)
  KaitaiStruct._init(self, io)
  self._parent = parent
  self._root = root or self
  self:_read()
end

function System.MsgDgnssStatus:_read()
  self.flags = self._io:read_u1()
  self.latency = self._io:read_u2le()
  self.num_signals = self._io:read_u1()
  self.source = str_decode.decode(self._io:read_bytes_full(), "ascii")
end

-- 
-- Status flags
-- 
-- Latency of observation receipt
-- 
-- Number of signals from base station
-- 
-- Corrections source string

-- 
-- The CSAC telemetry message provides labels for each member of the string
-- produced by MSG_CSAC_TELEMETRY. It should be provided by a device at a
-- lower rate than the MSG_CSAC_TELEMETRY.
System.MsgCsacTelemetryLabels = class.class(KaitaiStruct)

function System.MsgCsacTelemetryLabels:_init(io, parent, root)
  KaitaiStruct._init(self, io)
  self._parent = parent
  self._root = root or self
  self:_read()
end

function System.MsgCsacTelemetryLabels:_read()
  self.id = self._io:read_u1()
  self.telemetry_labels = str_decode.decode(self._io:read_bytes_full(), "ascii")
end

-- 
-- Index representing the type of telemetry in use.  It is
-- implementation defined.
-- 
-- Comma separated list of telemetry field values

-- 
-- The system start-up message is sent once on system start-up. It notifies
-- the host or other attached devices that the system has started and is
-- now ready to respond to commands or configuration requests.
System.MsgStartup = class.class(KaitaiStruct)

function System.MsgStartup:_init(io, parent, root)
  KaitaiStruct._init(self, io)
  self._parent = parent
  self._root = root or self
  self:_read()
end

function System.MsgStartup:_read()
  self.cause = self._io:read_u1()
  self.startup_type = self._io:read_u1()
  self.reserved = self._io:read_u2le()
end

-- 
-- Cause of startup
-- 
-- Startup type
-- 
-- Reserved

-- 
-- This leading message lists the time metadata of the Solution Group. It
-- also lists the atomic contents (i.e. types of messages included) of the
-- Solution Group.
System.MsgGroupMeta = class.class(KaitaiStruct)

function System.MsgGroupMeta:_init(io, parent, root)
  KaitaiStruct._init(self, io)
  self._parent = parent
  self._root = root or self
  self:_read()
end

function System.MsgGroupMeta:_read()
  self.group_id = self._io:read_u1()
  self.flags = self._io:read_u1()
  self.n_group_msgs = self._io:read_u1()
  self.group_msgs = {}
  local i = 0
  while not self._io:is_eof() do
    self.group_msgs[i + 1] = self._io:read_u2le()
    i = i + 1
  end
end

-- 
-- Id of the Msgs Group, 0 is Unknown, 1 is Bestpos, 2 is Gnss
-- 
-- Status flags (reserved)
-- 
-- Size of list group_msgs
-- 
-- An in-order list of message types included in the Solution Group,
-- including GROUP_META itself

-- 
-- This diagnostic message contains state and update status information for
-- all sensors that are being used by the fusion engine. This message will
-- be generated asynchronously to the solution messages and will be emitted
-- anytime a sensor update is being processed.
System.MsgSensorAidEvent = class.class(KaitaiStruct)

function System.MsgSensorAidEvent:_init(io, parent, root)
  KaitaiStruct._init(self, io)
  self._parent = parent
  self._root = root or self
  self:_read()
end

function System.MsgSensorAidEvent:_read()
  self.time = self._io:read_u4le()
  self.sensor_type = self._io:read_u1()
  self.sensor_id = self._io:read_u2le()
  self.sensor_state = self._io:read_u1()
  self.n_available_meas = self._io:read_u1()
  self.n_attempted_meas = self._io:read_u1()
  self.n_accepted_meas = self._io:read_u1()
  self.flags = self._io:read_u4le()
end

-- 
-- Update timestamp in milliseconds.
-- 
-- Sensor type
-- 
-- Sensor identifier
-- 
-- Reserved for future use
-- 
-- Number of available measurements in this epoch
-- 
-- Number of attempted measurements in this epoch
-- 
-- Number of accepted measurements in this epoch
-- 
-- Reserved for future use

-- 
-- Report the general and specific state of a subsystem.  If the generic
-- state is reported as initializing, the specific state should be ignored.
System.SubSystemReport = class.class(KaitaiStruct)

function System.SubSystemReport:_init(io, parent, root)
  KaitaiStruct._init(self, io)
  self._parent = parent
  self._root = root or self
  self:_read()
end

function System.SubSystemReport:_read()
  self.component = self._io:read_u2le()
  self.generic = self._io:read_u1()
  self.specific = self._io:read_u1()
end

-- 
-- Identity of reporting subsystem
-- 
-- Generic form status report
-- 
-- Subsystem specific status code

-- 
-- The status report is sent periodically to inform the host or other
-- attached devices that the system is running. It is used to monitor
-- system malfunctions. It contains status reports that indicate to the
-- host the status of each subsystem and whether it is operating correctly.
-- 
-- Interpretation of the subsystem specific status code is product
-- dependent, but if the generic status code is initializing, it should be
-- ignored.  Refer to product documentation for details.
System.MsgStatusReport = class.class(KaitaiStruct)

function System.MsgStatusReport:_init(io, parent, root)
  KaitaiStruct._init(self, io)
  self._parent = parent
  self._root = root or self
  self:_read()
end

function System.MsgStatusReport:_read()
  self.reporting_system = self._io:read_u2le()
  self.sbp_version = self._io:read_u2le()
  self.sequence = self._io:read_u4le()
  self.uptime = self._io:read_u4le()
  self.status = {}
  local i = 0
  while not self._io:is_eof() do
    self.status[i + 1] = System.SubSystemReport(self._io, self, self._root)
    i = i + 1
  end
end

-- 
-- Identity of reporting system
-- 
-- SBP protocol version
-- 
-- Increments on each status report sent
-- 
-- Number of seconds since system start-up
-- 
-- Reported status of individual subsystems

-- 
-- Reports the uptime and the state of a subsystem via generic and specific
-- status codes.  If the generic state is reported as initializing, the
-- specific state should be ignored.
System.StatusJournalItem = class.class(KaitaiStruct)

function System.StatusJournalItem:_init(io, parent, root)
  KaitaiStruct._init(self, io)
  self._parent = parent
  self._root = root or self
  self:_read()
end

function System.StatusJournalItem:_read()
  self.uptime = self._io:read_u4le()
  self.report = System.SubSystemReport(self._io, self, self._root)
end

-- 
-- Milliseconds since system startup

